{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"google-oauth-setup.md":{"content":"# Настройка Google OAuth для Cocktailo\n\n## Проблема\nПолучаем ошибку 403 при попытке входа через Google, потому что redirect URI не настроен правильно.\n\n## Решение\n\n### 1. Откройте Google Cloud Console\nПерейдите на https://console.cloud.google.com\n\n### 2. Найдите ваш OAuth проект\n- В левом меню выберите \"APIs & Services\" > \"Credentials\"\n- Найдите ваш OAuth 2.0 Client ID\n\n### 3. Обновите Authorized redirect URIs\nДобавьте следующий URL в список разрешенных redirect URIs:\n\n```\nhttps://0b89bf4b-cd9f-4d8f-9a58-4c413bfbca91-00-295zsrj7l0xlp.janeway.replit.dev/api/auth/google/callback\n```\n\n### 4. Сохраните изменения\nПосле добавления URL-а нажмите \"Save\"\n\n### 5. Подождите несколько минут\nGoogle может потребоваться до 5-10 минут для применения изменений.\n\n## Текущий статус\n- ✅ Google OAuth ключи настроены\n- ✅ Сервер работает на порту 5000  \n- ✅ Callback URL обновлен в коде\n- ⏳ Нужно обновить redirect URI в Google Console\n\nПосле выполнения этих шагов аутентификация должна работать корректно.","size_bytes":1445},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Cocktail Constructor (Cocktailo Maker)\n\n## Overview\n\nThis is a modern full-stack web application for bartenders and cocktail enthusiasts, enabling users to create custom cocktails with realistic visualization, taste balance calculation, and recipe sharing. The app features an interactive cocktail constructor, a recipe generator, and a comprehensive recipe catalog. It aims to be a public demo for creative cocktail exploration.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\nUser language: Russian\nDesign preferences: Futuristic minimalism with Rubik + Montserrat fonts, uniform button colors without neon glows, reduced blue accent overload\nProject name: \"Cocktailo Maker\" (updated from \"Конструктор Коктейлей\")\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **Routing**: Wouter\n- **State Management**: Zustand\n- **Styling**: Tailwind CSS with a custom nightclub theme (dark blues, neon colors)\n- **UI Components**: Radix UI with shadcn/ui styling\n- **Build Tool**: Vite\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js\n- **Language**: TypeScript with ES modules\n- **Database**: PostgreSQL with Neon serverless\n- **ORM**: Drizzle ORM\n- **Authentication**: Replit Auth with OpenID Connect (Note: currently set to public demo mode without active authentication)\n- **Session Management**: Express sessions with PostgreSQL store\n\n### Key Design Decisions\n- **Monorepo Structure**: Organized into `client/`, `server/`, and `shared/`\n- **Type Safety**: Full TypeScript coverage with shared schema definitions\n- **Modern UI**: Dark theme with neon accents for a nightclub aesthetic\n- **Real-time Calculations**: Live cocktail statistics (ABV, cost, taste balance)\n- **Core Features**:\n    - **Cocktail Constructor (`/constructor`)**: Interactive glass selection, ingredient layering, real-time visual rendering, and live calculations.\n    - **Recipe Generator (`/generator`)**: Random cocktail creation based on various parameters.\n    - **Recipe Catalog (`/catalog`)**: Browsing, searching, and filtering recipes with categorization and rating.\n    - **User Profile (`/profile`)**: Viewing user's created recipes and managing favorites (currently in demo mode without full user management).\n- **UI/UX**: Emphasis on futuristic design, gradient effects, animated elements, and responsive layouts for both desktop and mobile, with high-quality 3D renders for cocktail visuals.\n\n## External Dependencies\n\n### Database\n- **Neon PostgreSQL**: Serverless PostgreSQL database.\n- **Drizzle ORM**: Type-safe database operations.\n\n### Authentication\n- **Replit Auth**: OpenID Connect authentication (though currently not actively used in public demo mode).\n\n### Frontend Libraries\n- **React Query**: Server state management and caching.\n- **Radix UI**: Accessible component primitives.\n- **Tailwind CSS**: Utility-first styling.\n- **Lucide React**: Icon library.\n- **React Hook Form**: Form management.\n\n### Development Tools\n- **Vite**: Development server and build tool.\n- **TypeScript**: Static type checking.\n- **ESLint**: Code linting.\n- **Prettier**: Code formatting.","size_bytes":3179},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        // Custom nightclub theme colors\n        \"night-blue\": \"var(--night-blue)\",\n        \"graphite\": \"var(--graphite)\",\n        \"charcoal\": \"var(--charcoal)\",\n        \"ice-white\": \"var(--ice-white)\",\n        \"cream\": \"var(--cream)\",\n        \"neon-turquoise\": \"var(--neon-turquoise)\",\n        \"neon-purple\": \"var(--neon-purple)\",\n        \"neon-amber\": \"var(--neon-amber)\",\n        \"neon-pink\": \"var(--neon-pink)\",\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3043},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/auth.ts":{"content":"import passport from 'passport';\nimport { Strategy as GoogleStrategy } from 'passport-google-oauth20';\nimport { Strategy as LocalStrategy } from 'passport-local';\nimport session from 'express-session';\nimport type { Express, RequestHandler } from 'express';\nimport connectPg from 'connect-pg-simple';\nimport { storage } from './storage';\nimport { nanoid } from 'nanoid';\nimport bcrypt from 'bcryptjs';\nimport { registerSchema, loginSchema } from '@shared/schema';\n\n// Session configuration\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: true,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  \n  return session({\n    secret: process.env.SESSION_SECRET || 'cocktailo-session-secret-key',\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      maxAge: sessionTtl,\n    },\n  });\n}\n\n// Setup Google OAuth\nexport async function setupAuth(app: Express) {\n  // Trust proxy for production\n  app.set('trust proxy', 1);\n  \n  // Session middleware\n  app.use(getSession());\n  \n  // Passport middleware\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  // Google OAuth Strategy - only initialize if credentials are available\n  if (process.env.GOOGLE_CLIENT_ID && process.env.GOOGLE_CLIENT_SECRET) {\n    const callbackURL = process.env.REPLIT_DOMAINS\n      ? `https://${process.env.REPLIT_DOMAINS.split(',')[0]}/api/auth/google/callback`\n      : \"http://localhost:5000/api/auth/google/callback\";\n    \n    passport.use(new GoogleStrategy({\n      clientID: process.env.GOOGLE_CLIENT_ID,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET,\n      callbackURL: callbackURL\n    }, async (accessToken, refreshToken, profile, done) => {\n    try {\n      // Check if user exists by Google ID\n      let user = await storage.getUserByGoogleId(profile.id);\n      \n      if (!user) {\n        // Check if user exists by email\n        const email = profile.emails?.[0]?.value;\n        if (email) {\n          user = await storage.getUserByEmail(email);\n        }\n        \n        if (!user) {\n          // Create new user\n          user = await storage.upsertUser({\n            id: nanoid(),\n            googleId: profile.id,\n            email: profile.emails?.[0]?.value || null,\n            nickname: profile.name?.givenName || profile.displayName || 'Пользователь',\n            profileImageUrl: profile.photos?.[0]?.value || null,\n          });\n        } else {\n          // Update existing user with Google ID\n          user = await storage.upsertUser({\n            ...user,\n            googleId: profile.id,\n            profileImageUrl: profile.photos?.[0]?.value || user.profileImageUrl,\n          });\n        }\n      } else {\n        // Update user info from Google\n        user = await storage.upsertUser({\n          ...user,\n          email: profile.emails?.[0]?.value || user.email,\n          nickname: profile.name?.givenName || profile.displayName || user.nickname,\n          profileImageUrl: profile.photos?.[0]?.value || user.profileImageUrl,\n        });\n      }\n      \n      return done(null, user);\n    } catch (error) {\n      console.error('Google OAuth error:', error);\n      return done(error, false);\n    }\n  }));\n  } else {\n    console.warn('Google OAuth credentials not provided. Google authentication will be disabled.');\n  }\n\n  // Email/Password Strategy\n  passport.use(new LocalStrategy({\n    usernameField: 'email',\n    passwordField: 'password'\n  }, async (email, password, done) => {\n    try {\n      const user = await storage.getUserByEmail(email);\n      \n      if (!user || !user.passwordHash) {\n        return done(null, false, { message: 'Неверный email или пароль' });\n      }\n      \n      const isValidPassword = await bcrypt.compare(password, user.passwordHash);\n      if (!isValidPassword) {\n        return done(null, false, { message: 'Неверный email или пароль' });\n      }\n      \n      return done(null, user);\n    } catch (error) {\n      console.error('Local auth error:', error);\n      return done(error, false);\n    }\n  }));\n\n  // Passport serialization\n  passport.serializeUser((user: any, done) => {\n    done(null, user.id);\n  });\n\n  passport.deserializeUser(async (id: string, done) => {\n    try {\n      const user = await storage.getUser(id);\n      if (!user) {\n        console.error('Failed to deserialize user out of session');\n        return done(null, false);\n      }\n      done(null, user);\n    } catch (error) {\n      console.error('Failed to deserialize user out of session:', error);\n      done(null, false);\n    }\n  });\n\n  // Auth routes - only if Google OAuth is configured\n  if (process.env.GOOGLE_CLIENT_ID && process.env.GOOGLE_CLIENT_SECRET) {\n    app.get('/api/auth/google',\n      passport.authenticate('google', { scope: ['profile', 'email'] })\n    );\n\n    app.get('/api/auth/google/callback',\n      passport.authenticate('google', { failureRedirect: '/auth?error=google_auth_failed' }),\n      (req, res) => {\n        // Successful authentication, redirect to home\n        res.redirect('/');\n      }\n    );\n  } else {\n    // Fallback routes when Google OAuth is not configured\n    app.get('/api/auth/google', (req, res) => {\n      res.redirect('/auth?error=google_oauth_not_configured');\n    });\n    \n    app.get('/api/auth/google/callback', (req, res) => {\n      res.redirect('/auth?error=google_oauth_not_configured');\n    });\n  }\n\n  app.post('/api/auth/logout', (req, res) => {\n    req.logout((err) => {\n      if (err) {\n        console.error('Logout error:', err);\n        return res.status(500).json({ error: 'Failed to logout' });\n      }\n      req.session.destroy((err) => {\n        if (err) {\n          console.error('Session destroy error:', err);\n        }\n        res.clearCookie('connect.sid');\n        res.json({ success: true });\n      });\n    });\n  });\n\n  // Update profile\n  app.patch('/api/auth/profile', async (req, res) => {\n    try {\n      if (!req.user) {\n        return res.status(401).json({ error: 'Не авторизован' });\n      }\n\n      const { nickname, profileImageUrl } = req.body;\n      \n      if (!nickname || nickname.trim().length < 2) {\n        return res.status(400).json({ error: 'Никнейм должен содержать минимум 2 символа' });\n      }\n      \n      if (nickname.trim().length > 50) {\n        return res.status(400).json({ error: 'Никнейм не может быть длиннее 50 символов' });\n      }\n      \n      // Validate image URL if provided\n      if (profileImageUrl && profileImageUrl.length > 0 && !profileImageUrl.startsWith('data:image/')) {\n        return res.status(400).json({ error: 'Неверный формат изображения' });\n      }\n      \n      // Update user\n      const updatedUser = await storage.upsertUser({\n        ...(req.user as any),\n        nickname: nickname.trim(),\n        profileImageUrl: profileImageUrl || (req.user as any).profileImageUrl,\n      });\n      \n      // Return user without password hash\n      const { passwordHash: _, ...userWithoutPassword } = updatedUser;\n      res.json({ user: userWithoutPassword });\n    } catch (error: any) {\n      console.error('Profile update error:', error);\n      if (error.message?.includes('duplicate') || error.message?.includes('unique')) {\n        res.status(400).json({ error: 'Пользователь с таким никнеймом уже существует' });\n      } else {\n        res.status(500).json({ error: 'Ошибка сервера' });\n      }\n    }\n  });\n\n  // Register with email/password\n  app.post('/api/auth/register', async (req, res) => {\n    try {\n      const { email, password, nickname } = registerSchema.parse(req.body);\n      \n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(email);\n      if (existingUser) {\n        return res.status(400).json({ error: 'Пользователь с таким email уже существует' });\n      }\n      \n      // Hash password\n      const saltRounds = 12;\n      const passwordHash = await bcrypt.hash(password, saltRounds);\n      \n      // Create user\n      const newUser = await storage.upsertUser({\n        id: nanoid(),\n        email,\n        nickname,\n        profileImageUrl: null,\n        googleId: null,\n        passwordHash,\n        emailVerified: false,\n      });\n      \n      // Log in the user\n      req.login(newUser, (err) => {\n        if (err) {\n          console.error('Auto-login after registration error:', err);\n          return res.status(500).json({ error: 'Пользователь создан, но произошла ошибка входа' });\n        }\n        \n        // Return user without password hash\n        const { passwordHash: _, ...userWithoutPassword } = newUser;\n        res.status(201).json({ user: userWithoutPassword });\n      });\n    } catch (error: any) {\n      console.error('Registration error:', error);\n      if (error?.issues) {\n        return res.status(400).json({ error: error.issues[0].message });\n      }\n      res.status(500).json({ error: 'Ошибка регистрации' });\n    }\n  });\n\n  // Login with email/password\n  app.post('/api/auth/login', (req, res, next) => {\n    try {\n      loginSchema.parse(req.body);\n    } catch (error: any) {\n      if (error?.issues) {\n        return res.status(400).json({ error: error.issues[0].message });\n      }\n      return res.status(400).json({ error: 'Неверные данные' });\n    }\n    \n    passport.authenticate('local', (err: any, user: any, info: any) => {\n      if (err) {\n        console.error('Login error:', err);\n        return res.status(500).json({ error: 'Ошибка входа' });\n      }\n      \n      if (!user) {\n        return res.status(401).json({ error: info?.message || 'Неверный email или пароль' });\n      }\n      \n      req.login(user, (err) => {\n        if (err) {\n          console.error('Login session error:', err);\n          return res.status(500).json({ error: 'Ошибка создания сессии' });\n        }\n        \n        // Return user without password hash\n        const { passwordHash: _, ...userWithoutPassword } = user;\n        res.json({ user: userWithoutPassword });\n      });\n    })(req, res, next);\n  });\n\n  // Guest login\n  app.post('/api/auth/guest', async (req, res) => {\n    try {\n      const guestUser = await storage.upsertUser({\n        id: nanoid(),\n        email: null,\n        nickname: 'Гость',\n        profileImageUrl: null,\n        googleId: null,\n        passwordHash: null,\n        emailVerified: false,\n      });\n      \n      req.login(guestUser, (err) => {\n        if (err) {\n          console.error('Guest login error:', err);\n          return res.status(500).json({ error: 'Failed to login as guest' });\n        }\n        res.json({ user: guestUser });\n      });\n    } catch (error) {\n      console.error('Guest login error:', error);\n      res.status(500).json({ error: 'Failed to create guest user' });\n    }\n  });\n}\n\n// Authentication middleware\nexport const isAuthenticated: RequestHandler = (req, res, next) => {\n  if (req.isAuthenticated()) {\n    return next();\n  }\n  res.status(401).json({ error: 'Authentication required' });\n};\n\n// Optional authentication middleware (doesn't block if not authenticated)\nexport const optionalAuth: RequestHandler = (req, res, next) => {\n  // Always proceed, auth info will be available in req.user if logged in\n  next();\n};","size_bytes":11692},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { seedDatabase } from \"./seed\";\nimport path from \"path\";\n\nconst app = express();\napp.use(express.json({ limit: '10mb' }));\napp.use(express.urlencoded({ extended: false, limit: '10mb' }));\n\n// Serve attached assets\napp.use('/attached_assets', express.static(path.join(process.cwd(), 'attached_assets')));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Initialize database with sample data\n  await seedDatabase();\n  \n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2347},"server/replitAuth.ts":{"content":"import session from \"express-session\";\nimport type { Express } from \"express\";\nimport MemoryStore from \"memorystore\";\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const MemStore = MemoryStore(session);\n  const sessionStore = new MemStore({\n    checkPeriod: sessionTtl\n  });\n  \n  return session({\n    secret: process.env.SESSION_SECRET || 'fallback-secret-key-for-development',\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  // Simplified demo auth system - no authentication required\n  app.set(\"trust proxy\", 1);\n  \n  // Add session middleware with memory store\n  app.use(getSession());\n  \n  // Demo user endpoints\n  app.get(\"/api/user\", (req, res) => {\n    // Return a demo user for the cocktail app\n    res.json({\n      id: \"demo-user\",\n      email: \"demo@example.com\",\n      firstName: \"Demo\",\n      lastName: \"User\",\n      profileImageUrl: null\n    });\n  });\n  \n  app.post(\"/api/logout\", (req, res) => {\n    req.session.destroy(() => {\n      res.json({ success: true });\n    });\n  });\n  \n  app.get(\"/api/login\", (req, res) => {\n    res.redirect(\"/\");\n  });\n  \n  app.get(\"/api/callback\", (req, res) => {\n    res.redirect(\"/\");\n  });\n}\n\n// Simplified auth middleware - always allows access\nexport const isAuthenticated = (req: any, res: any, next: any) => {\n  next();\n};\n","size_bytes":1526},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, isAuthenticated, optionalAuth } from \"./auth\";\nimport { \n  insertIngredientSchema,\n  insertGlassTypeSchema,\n  insertRecipeSchema,\n  insertRecipeIngredientSchema,\n  insertUserFavoriteSchema,\n  insertRecipeRatingSchema\n} from \"@shared/schema\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Setup Google OAuth authentication\n  await setupAuth(app);\n\n  // Auth routes\n  app.get('/api/auth/user', optionalAuth, async (req, res) => {\n    if (req.user) {\n      res.json(req.user);\n    } else {\n      res.status(401).json({ error: 'Not authenticated' });\n    }\n  });\n\n  // Ingredient routes\n  app.get('/api/ingredients', async (req, res) => {\n    try {\n      const { category } = req.query;\n      const ingredients = category \n        ? await storage.getIngredientsByCategory(category as string)\n        : await storage.getIngredients();\n      res.json(ingredients);\n    } catch (error) {\n      console.error(\"Error fetching ingredients:\", error);\n      res.status(500).json({ message: \"Failed to fetch ingredients\" });\n    }\n  });\n\n  app.post('/api/ingredients', async (req, res) => {\n    try {\n      const ingredient = insertIngredientSchema.parse(req.body);\n      const newIngredient = await storage.createIngredient(ingredient);\n      res.status(201).json(newIngredient);\n    } catch (error) {\n      console.error(\"Error creating ingredient:\", error);\n      res.status(500).json({ message: \"Failed to create ingredient\" });\n    }\n  });\n\n  // Glass type routes\n  app.get('/api/glass-types', async (req, res) => {\n    try {\n      const glassTypes = await storage.getGlassTypes();\n      res.json(glassTypes);\n    } catch (error) {\n      console.error(\"Error fetching glass types:\", error);\n      res.status(500).json({ message: \"Failed to fetch glass types\" });\n    }\n  });\n\n  app.get('/api/glass-types/:id', async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const glassType = await storage.getGlassType(id);\n      if (!glassType) {\n        return res.status(404).json({ message: \"Glass type not found\" });\n      }\n      res.json(glassType);\n    } catch (error) {\n      console.error(\"Error fetching glass type:\", error);\n      res.status(500).json({ message: \"Failed to fetch glass type\" });\n    }\n  });\n\n  app.post('/api/glass-types', async (req, res) => {\n    try {\n      const glassType = insertGlassTypeSchema.parse(req.body);\n      const newGlassType = await storage.createGlassType(glassType);\n      res.status(201).json(newGlassType);\n    } catch (error) {\n      console.error(\"Error creating glass type:\", error);\n      res.status(500).json({ message: \"Failed to create glass type\" });\n    }\n  });\n\n  // Recipe routes\n  app.get('/api/recipes', async (req, res) => {\n    try {\n      const { limit = 20, offset = 0, search, category, difficulty } = req.query;\n      \n      let recipes;\n      if (search || category || difficulty) {\n        recipes = await storage.searchRecipes(\n          search as string || \"\",\n          category as string,\n          difficulty as string\n        );\n      } else {\n        recipes = await storage.getRecipes(\n          parseInt(limit as string),\n          parseInt(offset as string)\n        );\n      }\n      \n      res.json(recipes);\n    } catch (error) {\n      console.error(\"Error fetching recipes:\", error);\n      res.status(500).json({ message: \"Failed to fetch recipes\" });\n    }\n  });\n\n  // Current user recipes route - must come before /:id route\n  app.get('/api/recipes/user', async (req: any, res) => {\n    try {\n      // For demo purposes, return empty array since no auth\n      res.json([]);\n    } catch (error) {\n      console.error(\"Error fetching user recipes:\", error);\n      res.status(500).json({ message: \"Failed to fetch user recipes\" });\n    }\n  });\n\n  app.get('/api/recipes/:id', async (req, res) => {\n    try {\n      const recipe = await storage.getRecipeWithIngredients(req.params.id);\n      if (!recipe) {\n        return res.status(404).json({ message: \"Recipe not found\" });\n      }\n      res.json(recipe);\n    } catch (error) {\n      console.error(\"Error fetching recipe:\", error);\n      res.status(500).json({ message: \"Failed to fetch recipe\" });\n    }\n  });\n\n  app.post('/api/recipes', async (req: any, res) => {\n    try {\n      const recipeData = insertRecipeSchema.parse({\n        ...req.body,\n        createdBy: null // Demo mode - no user ID\n      });\n      \n      const recipe = await storage.createRecipe(recipeData);\n      \n      // Add ingredients if provided\n      if (req.body.ingredients && Array.isArray(req.body.ingredients)) {\n        for (const ingredient of req.body.ingredients) {\n          await storage.createRecipeIngredient({\n            recipeId: recipe.id,\n            ...ingredient\n          });\n        }\n      }\n      \n      res.status(201).json(recipe);\n    } catch (error) {\n      console.error(\"Error creating recipe:\", error);\n      res.status(500).json({ message: \"Failed to create recipe\" });\n    }\n  });\n\n  app.put('/api/recipes/:id', async (req: any, res) => {\n    try {\n      const recipe = await storage.getRecipe(req.params.id);\n      \n      if (!recipe) {\n        return res.status(404).json({ message: \"Recipe not found\" });\n      }\n      \n      const updateData = insertRecipeSchema.partial().parse(req.body);\n      const updatedRecipe = await storage.updateRecipe(req.params.id, updateData);\n      \n      // Update ingredients if provided\n      if (req.body.ingredients && Array.isArray(req.body.ingredients)) {\n        await storage.deleteRecipeIngredients(req.params.id);\n        for (const ingredient of req.body.ingredients) {\n          await storage.createRecipeIngredient({\n            recipeId: req.params.id,\n            ...ingredient\n          });\n        }\n      }\n      \n      res.json(updatedRecipe);\n    } catch (error) {\n      console.error(\"Error updating recipe:\", error);\n      res.status(500).json({ message: \"Failed to update recipe\" });\n    }\n  });\n\n  app.delete('/api/recipes/:id', async (req: any, res) => {\n    try {\n      const recipe = await storage.getRecipe(req.params.id);\n      \n      if (!recipe) {\n        return res.status(404).json({ message: \"Recipe not found\" });\n      }\n      \n      await storage.deleteRecipe(req.params.id);\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error deleting recipe:\", error);\n      res.status(500).json({ message: \"Failed to delete recipe\" });\n    }\n  });\n\n  // User recipe routes (simplified for demo)\n  app.get('/api/users/:userId/recipes', async (req: any, res) => {\n    try {\n      // For demo purposes, return empty array\n      res.json([]);\n    } catch (error) {\n      console.error(\"Error fetching user recipes:\", error);\n      res.status(500).json({ message: \"Failed to fetch user recipes\" });\n    }\n  });\n\n\n\n  // User favorite routes (simplified for demo)\n  app.get('/api/users/:userId/favorites', async (req: any, res) => {\n    try {\n      // For demo purposes, return empty array\n      res.json([]);\n    } catch (error) {\n      console.error(\"Error fetching user favorites:\", error);\n      res.status(500).json({ message: \"Failed to fetch user favorites\" });\n    }\n  });\n\n  app.post('/api/users/:userId/favorites', async (req: any, res) => {\n    try {\n      // For demo purposes, return success but don't actually save\n      res.status(201).json({ message: \"Favorite added (demo mode)\" });\n    } catch (error) {\n      console.error(\"Error adding favorite:\", error);\n      res.status(500).json({ message: \"Failed to add favorite\" });\n    }\n  });\n\n  app.delete('/api/users/:userId/favorites/:recipeId', async (req: any, res) => {\n    try {\n      // For demo purposes, return success but don't actually remove\n      res.status(204).send();\n    } catch (error) {\n      console.error(\"Error removing favorite:\", error);\n      res.status(500).json({ message: \"Failed to remove favorite\" });\n    }\n  });\n\n  // Recipe rating routes\n  app.get('/api/recipes/:recipeId/ratings', async (req, res) => {\n    try {\n      const ratings = await storage.getRecipeRatings(req.params.recipeId);\n      res.json(ratings);\n    } catch (error) {\n      console.error(\"Error fetching recipe ratings:\", error);\n      res.status(500).json({ message: \"Failed to fetch recipe ratings\" });\n    }\n  });\n\n  app.post('/api/recipes/:recipeId/ratings', async (req: any, res) => {\n    try {\n      // For demo purposes, return success but don't actually save\n      res.status(201).json({ message: \"Rating added (demo mode)\" });\n    } catch (error) {\n      console.error(\"Error creating/updating rating:\", error);\n      res.status(500).json({ message: \"Failed to create/update rating\" });\n    }\n  });\n\n  // Random recipe generator\n  app.post('/api/recipes/generate', async (req, res) => {\n    try {\n      const { mode = 'classic' } = req.body;\n      \n      // Get all ingredients and glass types\n      const ingredients = await storage.getIngredients();\n      const glassTypes = await storage.getGlassTypes();\n      \n      // Generate random recipe based on mode\n      const generatedRecipe = generateRandomRecipe(ingredients, glassTypes, mode);\n      \n      res.json(generatedRecipe);\n    } catch (error) {\n      console.error(\"Error generating recipe:\", error);\n      res.status(500).json({ message: \"Failed to generate recipe\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n\n// Helper function to generate random recipes\nfunction generateRandomRecipe(ingredients: any[], glassTypes: any[], mode: string) {\n  const alcoholIngredients = ingredients.filter(i => i.category === 'alcohol');\n  const juiceIngredients = ingredients.filter(i => i.category === 'juice');\n  const syrupIngredients = ingredients.filter(i => i.category === 'syrup');\n  const fruitIngredients = ingredients.filter(i => i.category === 'fruit');\n  \n  let selectedIngredients = [];\n  let glassType = glassTypes[Math.floor(Math.random() * glassTypes.length)];\n  \n  switch (mode) {\n    case 'classic':\n      selectedIngredients = [\n        alcoholIngredients[Math.floor(Math.random() * alcoholIngredients.length)],\n        juiceIngredients[Math.floor(Math.random() * juiceIngredients.length)],\n        syrupIngredients[Math.floor(Math.random() * syrupIngredients.length)]\n      ];\n      break;\n    case 'crazy':\n      selectedIngredients = [\n        alcoholIngredients[Math.floor(Math.random() * alcoholIngredients.length)],\n        alcoholIngredients[Math.floor(Math.random() * alcoholIngredients.length)],\n        juiceIngredients[Math.floor(Math.random() * juiceIngredients.length)],\n        syrupIngredients[Math.floor(Math.random() * syrupIngredients.length)],\n        fruitIngredients[Math.floor(Math.random() * fruitIngredients.length)]\n      ];\n      break;\n    case 'summer':\n      selectedIngredients = [\n        alcoholIngredients.filter(i => i.name.toLowerCase().includes('rum') || i.name.toLowerCase().includes('vodka'))[0] || alcoholIngredients[0],\n        juiceIngredients.filter(i => i.name.toLowerCase().includes('pineapple') || i.name.toLowerCase().includes('orange'))[0] || juiceIngredients[0],\n        fruitIngredients[Math.floor(Math.random() * fruitIngredients.length)]\n      ];\n      break;\n    case 'nonalcoholic':\n      selectedIngredients = [\n        juiceIngredients[Math.floor(Math.random() * juiceIngredients.length)],\n        juiceIngredients[Math.floor(Math.random() * juiceIngredients.length)],\n        syrupIngredients[Math.floor(Math.random() * syrupIngredients.length)]\n      ];\n      break;\n    case 'shot':\n      glassType = glassTypes.find(g => g.shape === 'shot') || glassTypes[0];\n      selectedIngredients = [\n        alcoholIngredients[Math.floor(Math.random() * alcoholIngredients.length)]\n      ];\n      break;\n    default:\n      selectedIngredients = [\n        alcoholIngredients[Math.floor(Math.random() * alcoholIngredients.length)],\n        juiceIngredients[Math.floor(Math.random() * juiceIngredients.length)]\n      ];\n  }\n  \n  // Generate random amounts based on glass capacity\n  const baseAmount = Math.floor(glassType.capacity / selectedIngredients.length);\n  const recipeIngredients = selectedIngredients.filter(Boolean).map((ingredient, index) => ({\n    ingredient,\n    amount: baseAmount + Math.floor(Math.random() * 20) - 10, // ±10ml variance\n    unit: 'ml',\n    order: index + 1\n  }));\n  \n  return {\n    name: generateRandomName(),\n    description: `A ${mode} cocktail with ${selectedIngredients.filter(Boolean).map(i => i.name).join(', ')}`,\n    glass: glassType,\n    ingredients: recipeIngredients,\n    totalVolume: recipeIngredients.reduce((sum, ri) => sum + ri.amount, 0),\n    category: mode\n  };\n}\n\nfunction generateRandomName(): string {\n  const adjectives = ['Tropical', 'Midnight', 'Golden', 'Crimson', 'Azure', 'Emerald', 'Sunset', 'Storm', 'Fire', 'Ice'];\n  const nouns = ['Breeze', 'Thunder', 'Wave', 'Dream', 'Spark', 'Flame', 'Mist', 'Rush', 'Bliss', 'Punch'];\n  \n  const adjective = adjectives[Math.floor(Math.random() * adjectives.length)];\n  const noun = nouns[Math.floor(Math.random() * nouns.length)];\n  \n  return `${adjective} ${noun}`;\n}\n","size_bytes":13220},"server/seed.ts":{"content":"import { db } from \"./db\";\nimport { ingredients, glassTypes } from \"@shared/schema\";\nimport { InsertIngredient, InsertGlassType } from \"@shared/schema\";\n\n// Sample ingredients data\nconst sampleIngredients: InsertIngredient[] = [\n  // Alcohol\n  { name: \"Водка\", category: \"alcohol\", color: \"#ffffff\", abv: \"40\", pricePerLiter: \"1500\", tasteProfile: { sweet: 0, sour: 0, bitter: 0, alcohol: 10 }, unit: \"ml\" },\n  { name: \"Джин\", category: \"alcohol\", color: \"#f0f0f0\", abv: \"40\", pricePerLiter: \"2000\", tasteProfile: { sweet: 0, sour: 0, bitter: 2, alcohol: 10 }, unit: \"ml\" },\n  { name: \"Ром\", category: \"alcohol\", color: \"#d4af37\", abv: \"40\", pricePerLiter: \"1800\", tasteProfile: { sweet: 3, sour: 0, bitter: 0, alcohol: 10 }, unit: \"ml\" },\n  { name: \"Текила\", category: \"alcohol\", color: \"#f5f5dc\", abv: \"40\", pricePerLiter: \"2200\", tasteProfile: { sweet: 0, sour: 1, bitter: 1, alcohol: 10 }, unit: \"ml\" },\n  { name: \"Виски\", category: \"alcohol\", color: \"#b8860b\", abv: \"40\", pricePerLiter: \"3000\", tasteProfile: { sweet: 1, sour: 0, bitter: 3, alcohol: 10 }, unit: \"ml\" },\n  { name: \"Кокосовый ликер\", category: \"alcohol\", color: \"#f8f8ff\", abv: \"21\", pricePerLiter: \"1200\", tasteProfile: { sweet: 8, sour: 0, bitter: 0, alcohol: 6 }, unit: \"ml\" },\n  \n  // Juices\n  { name: \"Апельсиновый сок\", category: \"juice\", color: \"#ffa500\", abv: \"0\", pricePerLiter: \"200\", tasteProfile: { sweet: 7, sour: 3, bitter: 0, alcohol: 0 }, unit: \"ml\" },\n  { name: \"Лимонный сок\", category: \"juice\", color: \"#fff700\", abv: \"0\", pricePerLiter: \"300\", tasteProfile: { sweet: 1, sour: 9, bitter: 0, alcohol: 0 }, unit: \"ml\" },\n  { name: \"Лаймовый сок\", category: \"juice\", color: \"#32cd32\", abv: \"0\", pricePerLiter: \"350\", tasteProfile: { sweet: 1, sour: 8, bitter: 0, alcohol: 0 }, unit: \"ml\" },\n  { name: \"Клюквенный сок\", category: \"juice\", color: \"#dc143c\", abv: \"0\", pricePerLiter: \"400\", tasteProfile: { sweet: 5, sour: 6, bitter: 1, alcohol: 0 }, unit: \"ml\" },\n  { name: \"Ананасовый сок\", category: \"juice\", color: \"#ffff00\", abv: \"0\", pricePerLiter: \"250\", tasteProfile: { sweet: 8, sour: 2, bitter: 0, alcohol: 0 }, unit: \"ml\" },\n  \n  // Syrups\n  { name: \"Сахарный сироп\", category: \"syrup\", color: \"#ffffff\", abv: \"0\", pricePerLiter: \"150\", tasteProfile: { sweet: 10, sour: 0, bitter: 0, alcohol: 0 }, unit: \"ml\" },\n  { name: \"Гренадин\", category: \"syrup\", color: \"#ff0000\", abv: \"0\", pricePerLiter: \"300\", tasteProfile: { sweet: 8, sour: 1, bitter: 0, alcohol: 0 }, unit: \"ml\" },\n  { name: \"Кленовый сироп\", category: \"syrup\", color: \"#d2691e\", abv: \"0\", pricePerLiter: \"800\", tasteProfile: { sweet: 9, sour: 0, bitter: 0, alcohol: 0 }, unit: \"ml\" },\n  \n  // Fruits\n  { name: \"Лимон\", category: \"fruit\", color: \"#fff700\", abv: \"0\", pricePerLiter: \"100\", tasteProfile: { sweet: 1, sour: 8, bitter: 1, alcohol: 0 }, unit: \"piece\" },\n  { name: \"Лайм\", category: \"fruit\", color: \"#32cd32\", abv: \"0\", pricePerLiter: \"120\", tasteProfile: { sweet: 1, sour: 7, bitter: 0, alcohol: 0 }, unit: \"piece\" },\n  { name: \"Апельсин\", category: \"fruit\", color: \"#ffa500\", abv: \"0\", pricePerLiter: \"80\", tasteProfile: { sweet: 6, sour: 3, bitter: 0, alcohol: 0 }, unit: \"piece\" },\n  { name: \"Вишня\", category: \"fruit\", color: \"#dc143c\", abv: \"0\", pricePerLiter: \"200\", tasteProfile: { sweet: 7, sour: 2, bitter: 0, alcohol: 0 }, unit: \"piece\" },\n  \n  // Ice\n  { name: \"Лед\", category: \"ice\", color: \"#e6f3ff\", abv: \"0\", pricePerLiter: \"50\", tasteProfile: { sweet: 0, sour: 0, bitter: 0, alcohol: 0 }, unit: \"ml\" },\n  \n  // Spices\n  { name: \"Мята\", category: \"spice\", color: \"#90ee90\", abv: \"0\", pricePerLiter: \"500\", tasteProfile: { sweet: 0, sour: 0, bitter: 3, alcohol: 0 }, unit: \"piece\" },\n  { name: \"Соль\", category: \"spice\", color: \"#ffffff\", abv: \"0\", pricePerLiter: \"100\", tasteProfile: { sweet: 0, sour: 0, bitter: 0, alcohol: 0 }, unit: \"g\" },\n];\n\n// Sample glass types data\nconst sampleGlassTypes: InsertGlassType[] = [\n  { name: \"Олд-фэшн\", capacity: 300, shape: \"old-fashioned\" },\n  { name: \"Хайбол\", capacity: 350, shape: \"highball\" },\n  { name: \"Мартини\", capacity: 180, shape: \"martini\" },\n  { name: \"Шот\", capacity: 50, shape: \"shot\" },\n  { name: \"Коллинз\", capacity: 400, shape: \"collins\" },\n  { name: \"Купе\", capacity: 200, shape: \"coupe\" },\n  { name: \"Винный бокал\", capacity: 250, shape: \"wine\" },\n  { name: \"Пивная кружка\", capacity: 500, shape: \"beer\" },\n];\n\nexport async function seedDatabase() {\n  try {\n    console.log(\"Seeding database...\");\n    \n    // Check if data already exists\n    const existingIngredients = await db.select().from(ingredients).limit(1);\n    const existingGlassTypes = await db.select().from(glassTypes).limit(1);\n    \n    if (existingIngredients.length === 0) {\n      console.log(\"Inserting ingredients...\");\n      await db.insert(ingredients).values(sampleIngredients);\n    }\n    \n    if (existingGlassTypes.length === 0) {\n      console.log(\"Inserting glass types...\");\n      await db.insert(glassTypes).values(sampleGlassTypes);\n    }\n    \n    console.log(\"Database seeded successfully!\");\n  } catch (error) {\n    console.error(\"Error seeding database:\", error);\n  }\n}\n\n// Run seed if this file is called directly\nif (import.meta.url === `file://${process.argv[1]}`) {\n  seedDatabase();\n}","size_bytes":5438},"server/storage.ts":{"content":"import {\n  users,\n  ingredients,\n  glassTypes,\n  recipes,\n  recipeIngredients,\n  userFavorites,\n  recipeRatings,\n  type User,\n  type UpsertUser,\n  type Ingredient,\n  type InsertIngredient,\n  type GlassType,\n  type InsertGlassType,\n  type Recipe,\n  type InsertRecipe,\n  type RecipeIngredient,\n  type InsertRecipeIngredient,\n  type UserFavorite,\n  type InsertUserFavorite,\n  type RecipeRating,\n  type InsertRecipeRating,\n} from \"@shared/schema\";\nimport { nanoid } from \"nanoid\";\n\nexport interface IStorage {\n  // User operations (mandatory for authentication)\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  getUserByGoogleId(googleId: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n\n  // Ingredient operations\n  getIngredients(): Promise<Ingredient[]>;\n  getIngredientsByCategory(category: string): Promise<Ingredient[]>;\n  createIngredient(ingredient: InsertIngredient): Promise<Ingredient>;\n\n  // Glass type operations\n  getGlassTypes(): Promise<GlassType[]>;\n  getGlassType(id: number): Promise<GlassType | undefined>;\n  createGlassType(glassType: InsertGlassType): Promise<GlassType>;\n\n  // Recipe operations\n  getRecipes(limit?: number, offset?: number): Promise<Recipe[]>;\n  getRecipe(id: string): Promise<Recipe | undefined>;\n  getRecipeWithIngredients(id: string): Promise<(Recipe & { ingredients: (RecipeIngredient & { ingredient: Ingredient })[] }) | undefined>;\n  getUserRecipes(userId: string): Promise<Recipe[]>;\n  createRecipe(recipe: InsertRecipe): Promise<Recipe>;\n  updateRecipe(id: string, recipe: Partial<InsertRecipe>): Promise<Recipe>;\n  deleteRecipe(id: string): Promise<void>;\n  searchRecipes(query: string, category?: string, difficulty?: string): Promise<Recipe[]>;\n\n  // Recipe ingredient operations\n  getRecipeIngredients(recipeId: string): Promise<(RecipeIngredient & { ingredient: Ingredient })[]>;\n  createRecipeIngredient(recipeIngredient: InsertRecipeIngredient): Promise<RecipeIngredient>;\n  deleteRecipeIngredients(recipeId: string): Promise<void>;\n\n  // User favorite operations\n  getUserFavorites(userId: string): Promise<(UserFavorite & { recipe: Recipe })[]>;\n  addUserFavorite(userId: string, recipeId: string): Promise<UserFavorite>;\n  removeUserFavorite(userId: string, recipeId: string): Promise<void>;\n  isUserFavorite(userId: string, recipeId: string): Promise<boolean>;\n\n  // Recipe rating operations\n  getRecipeRatings(recipeId: string): Promise<RecipeRating[]>;\n  createRecipeRating(rating: InsertRecipeRating): Promise<RecipeRating>;\n  updateRecipeRating(userId: string, recipeId: string, rating: number, review?: string): Promise<RecipeRating>;\n  getUserRecipeRating(userId: string, recipeId: string): Promise<RecipeRating | undefined>;\n}\n\nexport class MemoryStorage implements IStorage {\n  private users: Map<string, User> = new Map();\n  private ingredients: Map<number, Ingredient> = new Map();\n  private glassTypes: Map<number, GlassType> = new Map();\n  private recipes: Map<string, Recipe> = new Map();\n  private recipeIngredients: Map<string, RecipeIngredient[]> = new Map();\n  private userFavorites: Map<string, UserFavorite[]> = new Map();\n  private recipeRatings: Map<string, RecipeRating[]> = new Map();\n  private nextId = { ingredient: 1, glassType: 1, rating: 1, favorite: 1, recipeIngredient: 1 };\n\n  constructor() {\n    this.initializeData();\n  }\n\n  private initializeData() {\n    // Initialize sample ingredients\n    const sampleIngredients: InsertIngredient[] = [\n      {\n        name: \"Водка\",\n        category: \"alcohol\",\n        color: \"#ffffff\",\n        abv: \"40.00\",\n        pricePerLiter: \"1500.00\",\n        tasteProfile: { sweet: 0, sour: 0, bitter: 0, alcohol: 8 },\n        unit: \"ml\"\n      },\n      {\n        name: \"Ром\",\n        category: \"alcohol\", \n        color: \"#8B4513\",\n        abv: \"40.00\",\n        pricePerLiter: \"2000.00\",\n        tasteProfile: { sweet: 3, sour: 0, bitter: 0, alcohol: 8 },\n        unit: \"ml\"\n      },\n      {\n        name: \"Апельсиновый сок\",\n        category: \"juice\",\n        color: \"#FFA500\",\n        abv: \"0.00\",\n        pricePerLiter: \"300.00\",\n        tasteProfile: { sweet: 7, sour: 3, bitter: 0, alcohol: 0 },\n        unit: \"ml\"\n      },\n      {\n        name: \"Лимонный сок\",\n        category: \"juice\",\n        color: \"#FFFF00\",\n        abv: \"0.00\",\n        pricePerLiter: \"400.00\",\n        tasteProfile: { sweet: 1, sour: 9, bitter: 0, alcohol: 0 },\n        unit: \"ml\"\n      },\n      {\n        name: \"Гренадин\",\n        category: \"syrup\",\n        color: \"#DC143C\",\n        abv: \"0.00\",\n        pricePerLiter: \"800.00\",\n        tasteProfile: { sweet: 9, sour: 0, bitter: 0, alcohol: 0 },\n        unit: \"ml\"\n      },\n      {\n        name: \"Лед\",\n        category: \"ice\",\n        color: \"#E0FFFF\",\n        abv: \"0.00\",\n        pricePerLiter: \"50.00\",\n        tasteProfile: { sweet: 0, sour: 0, bitter: 0, alcohol: 0 },\n        unit: \"piece\"\n      }\n    ];\n\n    sampleIngredients.forEach(ingredient => {\n      const id = this.nextId.ingredient++;\n      this.ingredients.set(id, {\n        id,\n        ...ingredient,\n        abv: ingredient.abv || null,\n        unit: ingredient.unit || \"ml\",\n        createdAt: new Date()\n      });\n    });\n\n    // Initialize sample glass types\n    const sampleGlassTypes: InsertGlassType[] = [\n      { name: \"Мартини\", capacity: 180, shape: \"martini\" },\n      { name: \"Хайбол\", capacity: 350, shape: \"highball\" },\n      { name: \"Олд фэшенд\", capacity: 250, shape: \"old-fashioned\" },\n      { name: \"Шот\", capacity: 50, shape: \"shot\" }\n    ];\n\n    sampleGlassTypes.forEach(glassType => {\n      const id = this.nextId.glassType++;\n      this.glassTypes.set(id, {\n        id,\n        ...glassType,\n        createdAt: new Date()\n      });\n    });\n  }\n\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.email === email);\n  }\n\n  async getUserByGoogleId(googleId: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.googleId === googleId);\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const user: User = {\n      id: userData.id,\n      email: userData.email || null,\n      nickname: userData.nickname,\n      profileImageUrl: userData.profileImageUrl || null,\n      googleId: userData.googleId || null,\n      passwordHash: userData.passwordHash || null,\n      emailVerified: userData.emailVerified || false,\n      updatedAt: new Date(),\n      createdAt: this.users.get(userData.id)?.createdAt || new Date()\n    };\n    this.users.set(userData.id, user);\n    return user;\n  }\n\n  // Ingredient operations\n  async getIngredients(): Promise<Ingredient[]> {\n    return Array.from(this.ingredients.values()).sort((a, b) => \n      a.category.localeCompare(b.category) || a.name.localeCompare(b.name)\n    );\n  }\n\n  async getIngredientsByCategory(category: string): Promise<Ingredient[]> {\n    return Array.from(this.ingredients.values())\n      .filter(ingredient => ingredient.category === category)\n      .sort((a, b) => a.name.localeCompare(b.name));\n  }\n\n  async createIngredient(ingredient: InsertIngredient): Promise<Ingredient> {\n    const id = this.nextId.ingredient++;\n    const newIngredient: Ingredient = {\n      id,\n      ...ingredient,\n      abv: ingredient.abv || null,\n      unit: ingredient.unit || \"ml\",\n      createdAt: new Date()\n    };\n    this.ingredients.set(id, newIngredient);\n    return newIngredient;\n  }\n\n  // Glass type operations\n  async getGlassTypes(): Promise<GlassType[]> {\n    return Array.from(this.glassTypes.values()).sort((a, b) => a.name.localeCompare(b.name));\n  }\n\n  async getGlassType(id: number): Promise<GlassType | undefined> {\n    return this.glassTypes.get(id);\n  }\n\n  async createGlassType(glassType: InsertGlassType): Promise<GlassType> {\n    const id = this.nextId.glassType++;\n    const newGlassType: GlassType = {\n      id,\n      ...glassType,\n      createdAt: new Date()\n    };\n    this.glassTypes.set(id, newGlassType);\n    return newGlassType;\n  }\n\n  // Recipe operations\n  async getRecipes(limit = 50, offset = 0): Promise<Recipe[]> {\n    const allRecipes = Array.from(this.recipes.values())\n      .sort((a, b) => {\n        const ratingDiff = parseFloat(b.rating || \"0\") - parseFloat(a.rating || \"0\");\n        if (ratingDiff !== 0) return ratingDiff;\n        return new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime();\n      });\n    \n    return allRecipes.slice(offset, offset + limit);\n  }\n\n  async getRecipe(id: string): Promise<Recipe | undefined> {\n    return this.recipes.get(id);\n  }\n\n  async getRecipeWithIngredients(id: string): Promise<(Recipe & { ingredients: (RecipeIngredient & { ingredient: Ingredient })[] }) | undefined> {\n    const recipe = await this.getRecipe(id);\n    if (!recipe) return undefined;\n\n    const ingredients = await this.getRecipeIngredients(id);\n    return { ...recipe, ingredients };\n  }\n\n  async getUserRecipes(userId: string): Promise<Recipe[]> {\n    return Array.from(this.recipes.values())\n      .filter(recipe => recipe.createdBy === userId)\n      .sort((a, b) => new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime());\n  }\n\n  async createRecipe(recipe: InsertRecipe): Promise<Recipe> {\n    const id = recipe.id || nanoid();\n    const newRecipe: Recipe = {\n      ...recipe,\n      id,\n      createdBy: recipe.createdBy || null,\n      glassTypeId: recipe.glassTypeId || null,\n      description: recipe.description || null,\n      instructions: recipe.instructions || null,\n      difficulty: recipe.difficulty || \"easy\",\n      isPublic: recipe.isPublic !== false,\n      rating: recipe.rating || \"0\",\n      ratingCount: recipe.ratingCount || 0,\n      createdAt: new Date(),\n      updatedAt: new Date()\n    };\n    this.recipes.set(id, newRecipe);\n    return newRecipe;\n  }\n\n  async updateRecipe(id: string, recipe: Partial<InsertRecipe>): Promise<Recipe> {\n    const existing = this.recipes.get(id);\n    if (!existing) {\n      throw new Error(\"Recipe not found\");\n    }\n    \n    const updated = {\n      ...existing,\n      ...recipe,\n      updatedAt: new Date()\n    };\n    this.recipes.set(id, updated);\n    return updated;\n  }\n\n  async deleteRecipe(id: string): Promise<void> {\n    this.recipes.delete(id);\n    this.recipeIngredients.delete(id);\n    // Remove from favorites\n    for (const [userId, favorites] of Array.from(this.userFavorites.entries())) {\n      const filtered = favorites.filter((fav: UserFavorite) => fav.recipeId !== id);\n      this.userFavorites.set(userId, filtered);\n    }\n    // Remove ratings\n    this.recipeRatings.delete(id);\n  }\n\n  async searchRecipes(query: string, category?: string, difficulty?: string): Promise<Recipe[]> {\n    return Array.from(this.recipes.values())\n      .filter(recipe => {\n        if (query) {\n          const searchTerm = query.toLowerCase();\n          const nameMatch = recipe.name.toLowerCase().includes(searchTerm);\n          const descMatch = recipe.description?.toLowerCase().includes(searchTerm);\n          if (!nameMatch && !descMatch) return false;\n        }\n        \n        if (category && recipe.category !== category) return false;\n        if (difficulty && recipe.difficulty !== difficulty) return false;\n        \n        return true;\n      })\n      .sort((a, b) => {\n        const ratingDiff = parseFloat(b.rating || \"0\") - parseFloat(a.rating || \"0\");\n        if (ratingDiff !== 0) return ratingDiff;\n        return new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime();\n      });\n  }\n\n  // Recipe ingredient operations\n  async getRecipeIngredients(recipeId: string): Promise<(RecipeIngredient & { ingredient: Ingredient })[]> {\n    const recipeIngs = this.recipeIngredients.get(recipeId) || [];\n    return recipeIngs\n      .map(ri => ({\n        ...ri,\n        ingredient: this.ingredients.get(ri.ingredientId!)!\n      }))\n      .filter(ri => ri.ingredient)\n      .sort((a, b) => a.order - b.order);\n  }\n\n  async createRecipeIngredient(recipeIngredient: InsertRecipeIngredient): Promise<RecipeIngredient> {\n    const id = this.nextId.recipeIngredient++;\n    const newRecipeIngredient: RecipeIngredient = {\n      id,\n      ...recipeIngredient,\n      recipeId: recipeIngredient.recipeId || null,\n      ingredientId: recipeIngredient.ingredientId || null,\n      createdAt: new Date()\n    };\n    \n    const existing = this.recipeIngredients.get(recipeIngredient.recipeId!) || [];\n    existing.push(newRecipeIngredient);\n    this.recipeIngredients.set(recipeIngredient.recipeId!, existing);\n    \n    return newRecipeIngredient;\n  }\n\n  async deleteRecipeIngredients(recipeId: string): Promise<void> {\n    this.recipeIngredients.delete(recipeId);\n  }\n\n  // User favorite operations\n  async getUserFavorites(userId: string): Promise<(UserFavorite & { recipe: Recipe })[]> {\n    const favorites = this.userFavorites.get(userId) || [];\n    return favorites\n      .map(fav => ({\n        ...fav,\n        recipe: this.recipes.get(fav.recipeId!)!\n      }))\n      .filter(fav => fav.recipe)\n      .sort((a, b) => new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime());\n  }\n\n  async addUserFavorite(userId: string, recipeId: string): Promise<UserFavorite> {\n    const id = this.nextId.favorite++;\n    const favorite: UserFavorite = {\n      id,\n      userId,\n      recipeId,\n      createdAt: new Date()\n    };\n    \n    const existing = this.userFavorites.get(userId) || [];\n    existing.push(favorite);\n    this.userFavorites.set(userId, existing);\n    \n    return favorite;\n  }\n\n  async removeUserFavorite(userId: string, recipeId: string): Promise<void> {\n    const existing = this.userFavorites.get(userId) || [];\n    const filtered = existing.filter(fav => fav.recipeId !== recipeId);\n    this.userFavorites.set(userId, filtered);\n  }\n\n  async isUserFavorite(userId: string, recipeId: string): Promise<boolean> {\n    const favorites = this.userFavorites.get(userId) || [];\n    return favorites.some(fav => fav.recipeId === recipeId);\n  }\n\n  // Recipe rating operations\n  async getRecipeRatings(recipeId: string): Promise<RecipeRating[]> {\n    return (this.recipeRatings.get(recipeId) || [])\n      .sort((a, b) => new Date(b.createdAt!).getTime() - new Date(a.createdAt!).getTime());\n  }\n\n  async createRecipeRating(rating: InsertRecipeRating): Promise<RecipeRating> {\n    const id = this.nextId.rating++;\n    const newRating: RecipeRating = {\n      id,\n      ...rating,\n      recipeId: rating.recipeId || null,\n      userId: rating.userId || null,\n      review: rating.review || null,\n      createdAt: new Date()\n    };\n    \n    const existing = this.recipeRatings.get(rating.recipeId!) || [];\n    existing.push(newRating);\n    this.recipeRatings.set(rating.recipeId!, existing);\n    \n    // Update recipe average rating\n    const allRatings = await this.getRecipeRatings(rating.recipeId!);\n    const avgRating = allRatings.reduce((sum, r) => sum + r.rating, 0) / allRatings.length;\n    \n    const recipe = this.recipes.get(rating.recipeId!);\n    if (recipe) {\n      const updatedRecipe = {\n        ...recipe,\n        rating: avgRating.toFixed(2),\n        ratingCount: allRatings.length\n      };\n      this.recipes.set(rating.recipeId!, updatedRecipe);\n    }\n    \n    return newRating;\n  }\n\n  async updateRecipeRating(userId: string, recipeId: string, rating: number, review?: string): Promise<RecipeRating> {\n    const ratings = this.recipeRatings.get(recipeId) || [];\n    const existingIndex = ratings.findIndex(r => r.userId === userId);\n    \n    if (existingIndex === -1) {\n      throw new Error(\"Rating not found\");\n    }\n    \n    ratings[existingIndex] = {\n      ...ratings[existingIndex],\n      rating,\n      review: review || null\n    };\n    this.recipeRatings.set(recipeId, ratings);\n    \n    // Update recipe average rating\n    const allRatings = await this.getRecipeRatings(recipeId);\n    const avgRating = allRatings.reduce((sum, r) => sum + r.rating, 0) / allRatings.length;\n    \n    const recipe = this.recipes.get(recipeId);\n    if (recipe) {\n      const updatedRecipe = {\n        ...recipe,\n        rating: avgRating.toFixed(2),\n        ratingCount: allRatings.length\n      };\n      this.recipes.set(recipeId, updatedRecipe);\n    }\n    \n    return ratings[existingIndex];\n  }\n\n  async getUserRecipeRating(userId: string, recipeId: string): Promise<RecipeRating | undefined> {\n    const ratings = this.recipeRatings.get(recipeId) || [];\n    return ratings.find(r => r.userId === userId);\n  }\n}\n\n// Use memory storage for Replit environment migration\nexport const storage = new MemoryStorage();","size_bytes":16762},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import {\n  pgTable,\n  text,\n  varchar,\n  timestamp,\n  jsonb,\n  index,\n  serial,\n  integer,\n  decimal,\n  boolean,\n  uuid,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table for Google Auth and Email/Password\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().notNull(),\n  email: varchar(\"email\").unique(),\n  nickname: varchar(\"nickname\").notNull(),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  googleId: varchar(\"google_id\").unique(), // Google OAuth ID\n  passwordHash: varchar(\"password_hash\"), // For email/password auth\n  emailVerified: boolean(\"email_verified\").default(false),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Ingredients table\nexport const ingredients = pgTable(\"ingredients\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  category: varchar(\"category\", { length: 50 }).notNull(), // alcohol, juice, syrup, fruit, ice, spice\n  color: varchar(\"color\", { length: 7 }).notNull(), // hex color for visualization\n  abv: decimal(\"abv\", { precision: 5, scale: 2 }).default(\"0\"), // alcohol by volume percentage\n  pricePerLiter: decimal(\"price_per_liter\", { precision: 10, scale: 2 }).notNull(),\n  tasteProfile: jsonb(\"taste_profile\").notNull(), // {sweet: 0-10, sour: 0-10, bitter: 0-10, alcohol: 0-10}\n  unit: varchar(\"unit\", { length: 10 }).notNull().default(\"ml\"), // ml, g, piece\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Glass types table\nexport const glassTypes = pgTable(\"glass_types\", {\n  id: serial(\"id\").primaryKey(),\n  name: varchar(\"name\", { length: 50 }).notNull(),\n  capacity: integer(\"capacity\").notNull(), // in ml\n  shape: varchar(\"shape\", { length: 20 }).notNull(), // old-fashioned, highball, martini, shot\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Cocktail recipes table\nexport const recipes = pgTable(\"recipes\", {\n  id: uuid(\"id\").primaryKey().defaultRandom(),\n  name: varchar(\"name\", { length: 100 }).notNull(),\n  description: text(\"description\"),\n  instructions: text(\"instructions\"),\n  createdBy: varchar(\"created_by\").references(() => users.id),\n  glassTypeId: integer(\"glass_type_id\").references(() => glassTypes.id),\n  totalVolume: integer(\"total_volume\").notNull(), // in ml\n  totalAbv: decimal(\"total_abv\", { precision: 5, scale: 2 }).notNull(),\n  totalCost: decimal(\"total_cost\", { precision: 10, scale: 2 }).notNull(),\n  tasteBalance: jsonb(\"taste_balance\").notNull(), // calculated taste profile\n  difficulty: varchar(\"difficulty\", { length: 20 }).default(\"easy\"), // easy, medium, hard\n  category: varchar(\"category\", { length: 50 }).notNull(), // classic, summer, shot, non-alcoholic\n  isPublic: boolean(\"is_public\").default(true),\n  rating: decimal(\"rating\", { precision: 3, scale: 2 }).default(\"0\"),\n  ratingCount: integer(\"rating_count\").default(0),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Recipe ingredients junction table\nexport const recipeIngredients = pgTable(\"recipe_ingredients\", {\n  id: serial(\"id\").primaryKey(),\n  recipeId: uuid(\"recipe_id\").references(() => recipes.id, { onDelete: \"cascade\" }),\n  ingredientId: integer(\"ingredient_id\").references(() => ingredients.id),\n  amount: decimal(\"amount\", { precision: 8, scale: 2 }).notNull(),\n  unit: varchar(\"unit\", { length: 10 }).notNull(),\n  order: integer(\"order\").notNull(), // for layering order\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// User favorite recipes\nexport const userFavorites = pgTable(\"user_favorites\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }),\n  recipeId: uuid(\"recipe_id\").references(() => recipes.id, { onDelete: \"cascade\" }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Recipe ratings\nexport const recipeRatings = pgTable(\"recipe_ratings\", {\n  id: serial(\"id\").primaryKey(),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }),\n  recipeId: uuid(\"recipe_id\").references(() => recipes.id, { onDelete: \"cascade\" }),\n  rating: integer(\"rating\").notNull(), // 1-5 stars\n  review: text(\"review\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Zod schemas\nexport const insertIngredientSchema = createInsertSchema(ingredients);\nexport const insertGlassTypeSchema = createInsertSchema(glassTypes);\nexport const insertRecipeSchema = createInsertSchema(recipes);\nexport const insertRecipeIngredientSchema = createInsertSchema(recipeIngredients);\nexport const insertUserFavoriteSchema = createInsertSchema(userFavorites);\nexport const insertRecipeRatingSchema = createInsertSchema(recipeRatings);\n\n// Auth schemas\nexport const registerSchema = z.object({\n  email: z.string().email(\"Неверный формат email\"),\n  password: z.string().min(6, \"Пароль должен быть не менее 6 символов\"),\n  nickname: z.string().min(2, \"Никнейм должен содержать минимум 2 символа\").max(50, \"Никнейм не может быть длиннее 50 символов\"),\n});\n\nexport const loginSchema = z.object({\n  email: z.string().email(\"Неверный формат email\"),\n  password: z.string().min(1, \"Пароль обязателен\"),\n});\n\nexport const insertUserSchema = createInsertSchema(users, {\n  nickname: z.string().min(2, \"Никнейм должен содержать минимум 2 символа\").max(50, \"Никнейм не может быть длиннее 50 символов\"),\n  email: z.string().email(\"Неверный формат email\"),\n}).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Types\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type RegisterUser = z.infer<typeof registerSchema>;\nexport type LoginUser = z.infer<typeof loginSchema>;\nexport type Ingredient = typeof ingredients.$inferSelect;\nexport type InsertIngredient = z.infer<typeof insertIngredientSchema>;\nexport type GlassType = typeof glassTypes.$inferSelect;\nexport type InsertGlassType = z.infer<typeof insertGlassTypeSchema>;\nexport type Recipe = typeof recipes.$inferSelect;\nexport type InsertRecipe = z.infer<typeof insertRecipeSchema>;\nexport type RecipeIngredient = typeof recipeIngredients.$inferSelect;\nexport type InsertRecipeIngredient = z.infer<typeof insertRecipeIngredientSchema>;\nexport type UserFavorite = typeof userFavorites.$inferSelect;\nexport type InsertUserFavorite = z.infer<typeof insertUserFavoriteSchema>;\nexport type RecipeRating = typeof recipeRatings.$inferSelect;\nexport type InsertRecipeRating = z.infer<typeof insertRecipeRatingSchema>;\n","size_bytes":7125},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport NotFound from \"@/pages/not-found\";\nimport Landing from \"@/pages/landing\";\nimport Home from \"@/pages/home\";\nimport Constructor from \"@/pages/constructor\";\nimport Generator from \"@/pages/generator\";\nimport Catalog from \"@/pages/catalog\";\nimport Profile from \"@/pages/profile\";\nimport Auth from \"@/pages/auth\";\nimport RecipePage from \"@/pages/RecipePage\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Landing} />\n      <Route path=\"/auth\" component={Auth} />\n      <Route path=\"/home\" component={Home} />\n      <Route path=\"/constructor\" component={Constructor} />\n      <Route path=\"/generator\" component={Generator} />\n      <Route path=\"/catalog\" component={Catalog} />\n      <Route path=\"/profile\" component={Profile} />\n      <Route path=\"/recipe/:id\" component={RecipePage} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"min-h-screen bg-background text-foreground\">\n          <Toaster />\n          <Router />\n        </div>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1445},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(220, 15%, 8%);\n  --foreground: hsl(0, 0%, 95%);\n  --card: hsl(220, 15%, 10%);\n  --card-foreground: hsl(0, 0%, 95%);\n  --popover: hsl(220, 15%, 10%);\n  --popover-foreground: hsl(0, 0%, 95%);\n  --primary: hsl(210, 40%, 45%);\n  --primary-foreground: hsl(0, 0%, 98%);\n  --secondary: hsl(220, 10%, 18%);\n  --secondary-foreground: hsl(0, 0%, 90%);\n  --muted: hsl(220, 10%, 15%);\n  --muted-foreground: hsl(220, 5%, 60%);\n  --accent: hsl(210, 30%, 25%);\n  --accent-foreground: hsl(0, 0%, 95%);\n  --destructive: hsl(0, 60%, 50%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(220, 10%, 20%);\n  --input: hsl(220, 10%, 15%);\n  --ring: hsl(210, 40%, 45%);\n  --radius: 8px;\n  \n  /* Minimalist futuristic colors */\n  --steel: hsl(210, 15%, 25%);\n  --graphite: hsl(220, 10%, 12%);\n  --charcoal: hsl(220, 8%, 18%);\n  --platinum: hsl(0, 0%, 92%);\n  --zinc: hsl(220, 5%, 55%);\n  --electric: hsl(210, 100%, 65%);\n  \n  /* Neon background colors for containers */\n  --neon-turquoise: hsl(180, 100%, 50%);\n  --neon-purple: hsl(270, 62%, 72%);\n  --neon-amber: hsl(45, 100%, 52%);\n  --neon-pink: hsl(330, 100%, 66%);\n  --night-blue: hsl(240, 23%, 11%);\n}\n\n/* Анимации для страницы рецепта */\n@keyframes fadeInUp {\n  from {\n    opacity: 0;\n    transform: translateY(30px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.animate-fadeInUp {\n  animation: fadeInUp 0.6s ease-out forwards;\n}\n\n/* Анимация переливающегося фона для кнопок */\n@keyframes shimmer {\n  0% {\n    background-position: 0% 50%;\n  }\n  50% {\n    background-position: 100% 50%;\n  }\n  100% {\n    background-position: 0% 50%;\n  }\n}\n\n/* Hover эффекты для карточек коктейлей - оптимизированы */\n.cocktail-card {\n  will-change: transform;\n}\n\n.cocktail-image {\n  will-change: transform;\n}\n\n.cocktail-card:has(.recipe-button:hover) {\n  transform: scale(1.02);\n  box-shadow: 0 15px 30px rgba(0, 0, 0, 0.25), 0 0 20px rgba(139, 69, 255, 0.15);\n}\n\n.cocktail-card:has(.recipe-button:hover) .cocktail-image {\n  transform: scale(1.05);\n}\n\n/* Исправляем темный эффект наложения при увеличении карточки */\n.cocktail-card:has(.recipe-button:hover) .bg-gradient-to-t {\n  transform: scale(1.03);\n  transform-origin: center;\n}\n\n.recipe-button:hover {\n  box-shadow: 0 6px 20px rgba(139, 69, 255, 0.5), 0 3px 10px rgba(0, 247, 239, 0.3);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --primary: hsl(180, 100%, 50%);\n  --primary-foreground: hsl(240, 23%, 11%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --ring: hsl(180, 100%, 50%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  \n  body {\n    @apply bg-background text-foreground;\n    font-family: 'Rubik', -apple-system, BlinkMacSystemFont, sans-serif;\n  }\n  \n  h1, h2, h3, h4, h5, h6 {\n    font-family: 'Montserrat', -apple-system, BlinkMacSystemFont, sans-serif;\n    font-weight: 600;\n  }\n}\n\n@layer components {\n  .bg-steel {\n    background-color: var(--steel);\n  }\n  \n  .bg-graphite {\n    background-color: var(--graphite);\n  }\n  \n  .bg-charcoal {\n    background-color: var(--charcoal);\n  }\n  \n  .text-platinum {\n    color: var(--platinum);\n  }\n  \n  .text-zinc {\n    color: var(--zinc);\n  }\n  \n  .text-electric {\n    color: var(--electric);\n  }\n  \n  .animate-gradient-x {\n    background-size: 400% 400%;\n    animation: gradient-x 4s ease infinite;\n  }\n  \n  @keyframes gradient-x {\n    0%, 100% {\n      background-position: 0% 50%;\n    }\n    50% {\n      background-position: 100% 50%;\n    }\n  }\n\n  /* Breathing animation for title */\n  @keyframes breathing {\n    0%, 100% {\n      transform: scale(1) translateY(0px);\n      text-shadow: 0 4px 8px rgba(0, 0, 0, 0.6), 0 8px 16px rgba(0, 0, 0, 0.4);\n    }\n  }\n\n  /* Gentle glow animation for auth title */\n  @keyframes gentleGlow {\n    0% {\n      transform: scale(1);\n      text-shadow: \n        0 0 15px rgba(0, 150, 180, 0.6), \n        0 0 30px rgba(150, 50, 120, 0.4), \n        0 0 45px rgba(0, 120, 150, 0.3),\n        0 0 60px rgba(120, 40, 100, 0.2);\n      filter: drop-shadow(0 0 8px rgba(0, 150, 180, 0.3)) brightness(0.95);\n    }\n    100% {\n      transform: scale(1.05);\n      text-shadow: \n        0 0 25px rgba(0, 180, 220, 0.8), \n        0 0 50px rgba(180, 80, 150, 0.6), \n        0 0 75px rgba(0, 150, 200, 0.4),\n        0 0 100px rgba(150, 60, 130, 0.3);\n      filter: drop-shadow(0 0 15px rgba(0, 180, 220, 0.5)) brightness(1.1);\n    }\n  }\n\n  /* Fade in animation for auth form elements */\n  @keyframes fade-in {\n    0% {\n      opacity: 0;\n      transform: translateY(20px);\n    }\n    100% {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n\n  .animate-fade-in {\n    animation: fade-in 0.6s ease-out;\n  }\n\n  /* Complete the breathing animation */\n  @keyframes breathing-complete {\n    0%, 100% {\n      transform: scale(1) translateY(0px);\n      text-shadow: 0 4px 8px rgba(0, 0, 0, 0.6), 0 8px 16px rgba(0, 0, 0, 0.4);\n    }\n    50% {\n      transform: scale(1.02) translateY(-2px);\n      text-shadow: 0 6px 12px rgba(0, 0, 0, 0.8), 0 12px 24px rgba(0, 0, 0, 0.6), 0 0 40px rgba(255, 255, 255, 0.1);\n    }\n  }\n\n  .animate-breathing {\n    animation: breathing 4s ease-in-out infinite;\n  }\n\n  /* Shimmering shadow animation */\n  @keyframes shimmer-shadow {\n    0%, 100% {\n      box-shadow: \n        0 0 20px rgba(0, 255, 240, 0.3),\n        0 0 40px rgba(255, 77, 157, 0.2),\n        0 10px 30px rgba(0, 0, 0, 0.4);\n    }\n    33% {\n      box-shadow: \n        0 0 30px rgba(255, 77, 157, 0.4),\n        0 0 50px rgba(179, 136, 235, 0.3),\n        0 15px 40px rgba(0, 0, 0, 0.5);\n    }\n    66% {\n      box-shadow: \n        0 0 25px rgba(179, 136, 235, 0.3),\n        0 0 45px rgba(255, 186, 8, 0.2),\n        0 12px 35px rgba(0, 0, 0, 0.4);\n    }\n  }\n\n  .animate-shimmer-shadow {\n    animation: shimmer-shadow 4s ease-in-out infinite;\n  }\n\n  /* Hero image mobile optimizations */\n  .hero-image {\n    width: 100%;\n    height: auto;\n    object-fit: contain;\n    max-height: 400px;\n    aspect-ratio: 1 / 1;\n    pointer-events: none;\n    user-select: none;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    -ms-user-select: none;\n    -webkit-touch-callout: none;\n    -webkit-user-drag: none;\n    -khtml-user-drag: none;\n    -moz-user-drag: none;\n    -o-user-drag: none;\n    user-drag: none;\n  }\n\n  @media (max-width: 480px) {\n    .hero-image {\n      max-height: 300px;\n      aspect-ratio: 1 / 1;\n      margin: 0 auto;\n    }\n  }\n\n  @media (min-width: 768px) {\n    .hero-image {\n      max-height: 500px;\n    }\n  }\n\n  /* Hero button gentle breathing animation */\n  @keyframes gentle-breathe {\n    0%, 100% {\n      box-shadow: \n        0 0 15px rgba(179, 136, 235, 0.3),\n        0 0 30px rgba(179, 136, 235, 0.15),\n        0 8px 25px rgba(0, 0, 0, 0.3);\n      transform: scale(1);\n    }\n    50% {\n      box-shadow: \n        0 0 25px rgba(179, 136, 235, 0.45),\n        0 0 50px rgba(179, 136, 235, 0.25),\n        0 10px 30px rgba(0, 0, 0, 0.35);\n      transform: scale(1.01);\n    }\n  }\n\n  .animate-gentle-breathe {\n    animation: gentle-breathe 6s ease-in-out infinite;\n  }\n  \n  .bg-neon-turquoise {\n    background-color: var(--neon-turquoise);\n  }\n  \n  .bg-neon-purple {\n    background-color: var(--neon-purple);\n  }\n  \n  .bg-neon-amber {\n    background-color: var(--neon-amber);\n  }\n  \n  .bg-neon-pink {\n    background-color: var(--neon-pink);\n  }\n  \n  .text-night-blue {\n    color: var(--night-blue);\n  }\n\n  .text-neon-turquoise {\n    color: var(--neon-turquoise);\n  }\n\n  .text-neon-purple {\n    color: var(--neon-purple);\n  }\n\n  .text-electric {\n    color: var(--electric);\n  }\n\n  .border-neon-turquoise {\n    border-color: var(--neon-turquoise);\n  }\n\n  .shadow-neon-purple {\n    --tw-shadow-color: var(--neon-purple);\n  }\n\n  .shadow-neon-turquoise {\n    --tw-shadow-color: var(--neon-turquoise);\n  }\n  \n  .glass-effect {\n    background: rgba(32, 35, 42, 0.8);\n    backdrop-filter: blur(16px);\n    border: 1px solid rgba(255, 255, 255, 0.08);\n  }\n  \n  .minimalist-button {\n    transition: all 0.2s ease-out;\n    border: 1px solid var(--border);\n  }\n  \n  .minimalist-button:hover {\n    background-color: var(--accent);\n    transform: translateY(-1px);\n  }\n  \n  .subtle-border {\n    border: 1px solid var(--border);\n  }\n  \n  .liquid-layer {\n    transition: all 0.8s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  /* Popular Recipes Swiper Styles */\n  .popular-recipes-swiper .swiper-slide {\n    transition: all 0.3s ease;\n    will-change: transform;\n  }\n\n  /* Базовые настройки для отображения теней */\n  .popular-recipes-swiper {\n    padding: 30px 0;\n  }\n\n  .popular-recipes-swiper .swiper-slide {\n    height: auto;\n  }\n\n  .popular-recipes-swiper .swiper-slide-active .recipe-card > div {\n    filter: drop-shadow(0 0 18px rgba(143, 0, 255, 0.25)) drop-shadow(0 6px 28px rgba(0, 0, 0, 0.35)) !important;\n    border: 1px solid rgba(143, 0, 255, 0.3) !important;\n  }\n\n  /* Performance optimizations */\n  .recipe-card {\n    contain: layout style;\n  }\n\n  .recipe-card img {\n    content-visibility: auto;\n    contain-intrinsic-size: 300px 192px;\n  }\n\n  /* Reduce paint on hover animations */\n  .group:hover .group-hover\\\\:scale-105 {\n    transform: scale(1.05);\n    will-change: transform;\n  }\n\n  /* Text clamp utilities */\n  .line-clamp-2 {\n    display: -webkit-box;\n    -webkit-line-clamp: 2;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n}\n\n@layer utilities {\n  .animate-fade-in {\n    animation: fadeIn 0.6s ease-out;\n  }\n  \n  .animate-slide-up {\n    animation: slideUp 0.4s ease-out;\n  }\n  \n  .animate-pulse-slow {\n    animation: pulse 3s cubic-bezier(0.4, 0, 0.6, 1) infinite;\n  }\n}\n\n@keyframes fadeIn {\n  from { \n    opacity: 0;\n    transform: translateY(10px);\n  }\n  to { \n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n@keyframes slideUp {\n  from { \n    transform: translateY(20px);\n    opacity: 0;\n  }\n  to { \n    transform: translateY(0);\n    opacity: 1;\n  }\n}\n\n/* Адаптивные стили для каталога коктейлей */\n@media (max-width: 640px) {\n  .mobile-compact {\n    @apply text-sm p-3;\n  }\n  \n  .mobile-hidden {\n    @apply hidden;\n  }\n  \n  .mobile-stack {\n    @apply flex-col space-y-2 space-x-0;\n  }\n}\n\n@media (min-width: 641px) and (max-width: 1023px) {\n  .tablet-responsive {\n    @apply grid-cols-2 gap-4;\n  }\n}\n\n@media (min-width: 1024px) {\n  .desktop-responsive {\n    @apply grid-cols-3 gap-6;\n  }\n}\n","size_bytes":11062},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/PopularRecipesSection.tsx":{"content":"import { useState } from 'react';\nimport { Swiper, SwiperSlide } from 'swiper/react';\nimport { Navigation, Autoplay } from 'swiper/modules';\nimport { ArrowLeft, ArrowRight, Star, RefreshCw } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Link } from 'wouter';\n\n// Import Swiper styles\nimport 'swiper/css';\nimport 'swiper/css/navigation';\nimport 'swiper/css/autoplay';\n\ninterface Recipe {\n  id: number;\n  name: string;\n  image: string;\n  description: string;\n  tags: string[];\n  abv: number;\n  volume: number;\n  rating: number;\n  reviewCount: number;\n  difficulty: string;\n  flavor: {\n    sweet: number;\n    sour: number;\n    bitter: number;\n    spicy: number;\n  };\n  price?: number;\n}\n\nconst popularRecipes: Recipe[] = [\n  {\n    id: 1,\n    name: \"Маргарита\",\n    image: \"/attached_assets/Flux_Dev_a_lush_3d_render_of_A_classic_Margarita_cocktail_in_a_0_1753377591761.jpg\",\n    description: \"Классика текилы с лаймом и солью\",\n    tags: [\"❄️ Освежающий\", \"🍋 Кислый\", \"⚡ Крепкий\"],\n    abv: 13,\n    volume: 150,\n    rating: 4.8,\n    reviewCount: 315,\n    difficulty: \"Легко\",\n    flavor: { sweet: 1, sour: 4, bitter: 1, spicy: 0 },\n    price: 230\n  },\n  {\n    id: 2,\n    name: \"Мохито\",\n    image: \"/attached_assets/Flux_Dev_a_lush_3d_render_of_A_refreshing_Mojito_in_a_tall_hig_0_1753377591761.jpg\",\n    description: \"Мята, лайм и ром — вечная классика\",\n    tags: [\"🌿 Лёгкий\", \"🌿 Мятный\", \"❄️ Освежающий\"],\n    abv: 10,\n    volume: 200,\n    rating: 4.9,\n    reviewCount: 408,\n    difficulty: \"Легко\",\n    flavor: { sweet: 2, sour: 3, bitter: 1, spicy: 0 },\n    price: 240\n  },\n  {\n    id: 3,\n    name: \"Сангрия\",\n    image: \"/attached_assets/Flux_Dev_a_lush_3d_render_of_A_vibrant_red_Sangria_in_a_large__1_1753377591760.jpg\",\n    description: \"Фруктово-винный коктейль из Испании\",\n    tags: [\"🍓 Фруктовый\", \"🌿 Лёгкий\", \"🌈 Яркий\"],\n    abv: 9,\n    volume: 250,\n    rating: 4.7,\n    reviewCount: 289,\n    difficulty: \"Легко\",\n    flavor: { sweet: 4, sour: 2, bitter: 0, spicy: 0 },\n    price: 260\n  },\n  {\n    id: 4,\n    name: \"Апероль шприц\",\n    image: \"/attached_assets/Flux_Dev_a_lush_3d_render_of_An_Aperol_Spritz_in_a_large_ballo_0_1753377591760.jpg\",\n    description: \"Итальянская классика с апельсиновыми нотами\",\n    tags: [\"🍸 Горьковатый\", \"🍊 Цитрус\", \"❄️ Освежающий\"],\n    abv: 11,\n    volume: 180,\n    rating: 4.6,\n    reviewCount: 198,\n    difficulty: \"Легко\",\n    flavor: { sweet: 2, sour: 2, bitter: 3, spicy: 0 },\n    price: 220\n  },\n  {\n    id: 5,\n    name: \"Пина Колада\",\n    image: \"/attached_assets/Flux_Dev_a_lush_3d_render_of_A_Pia_Colada_in_a_tall_hurricane__0_1753377591760.jpg\",\n    description: \"Тропический рай из ананаса и кокоса\",\n    tags: [\"🍬 Сладкий\", \"🥥 Кремовый\", \"🌴 Экзотический\"],\n    abv: 10,\n    volume: 200,\n    rating: 4.9,\n    reviewCount: 376,\n    difficulty: \"Средне\",\n    flavor: { sweet: 5, sour: 1, bitter: 0, spicy: 0 },\n    price: 250\n  },\n  {\n    id: 6,\n    name: \"Дайкири\",\n    image: \"/attached_assets/Flux_Dev_a_lush_3d_render_of_A_Daiquiri_in_a_sleek_cocktail_gl_0_1753377591759.jpg\",\n    description: \"Минимализм с лаймом и ромом\",\n    tags: [\"🍋 Кислый\", \"⚡ Крепкий\", \"🍊 Цитрус\"],\n    abv: 14,\n    volume: 120,\n    rating: 4.8,\n    reviewCount: 220,\n    difficulty: \"Средне\",\n    flavor: { sweet: 1, sour: 4, bitter: 1, spicy: 0 },\n    price: 210\n  },\n  {\n    id: 7,\n    name: \"Манхэттен\",\n    image: \"/attached_assets/Flux_Dev_a_lush_3d_render_of_A_deep_amber_Manhattan_in_a_short_0_1753377591759.jpg\",\n    description: \"Горький и сильный коктейль с вермутом\",\n    tags: [\"⚡ Крепкий\", \"🍸 Горький\", \"🔥 Пряный\"],\n    abv: 18,\n    volume: 90,\n    rating: 4.7,\n    reviewCount: 185,\n    difficulty: \"Сложно\",\n    flavor: { sweet: 1, sour: 1, bitter: 4, spicy: 2 },\n    price: 240\n  },\n  {\n    id: 8,\n    name: \"Мартини Фиеро Тоник\",\n    image: \"/attached_assets/Flux_Dev_a_lush_3d_render_of_A_vibrant_orange_Martini_Fiero__T_1_1753377591758.jpg\",\n    description: \"Лёгкий коктейль на базе апельсинового мартини\",\n    tags: [\"🌿 Лёгкий\", \"🍊 Цитрус\", \"💫 Пузырьки\"],\n    abv: 8,\n    volume: 180,\n    rating: 4.5,\n    reviewCount: 130,\n    difficulty: \"Легко\",\n    flavor: { sweet: 2, sour: 2, bitter: 2, spicy: 0 },\n    price: 200\n  },\n  {\n    id: 9,\n    name: \"Б-52\",\n    image: \"/attached_assets/Flux_Dev_a_lush_3d_render_of_A_layered_B52_shot_in_a_small_sho_3_1753377591758.jpg\",\n    description: \"Слоистый шот с ликёрами\",\n    tags: [\"🍬 Сладкий\", \"🥃 Шот\", \"🥛 Густой\"],\n    abv: 22,\n    volume: 50,\n    rating: 4.6,\n    reviewCount: 165,\n    difficulty: \"Сложно\",\n    flavor: { sweet: 4, sour: 0, bitter: 1, spicy: 0 },\n    price: 180\n  },\n  {\n    id: 10,\n    name: \"Космополитен\",\n    image: \"/attached_assets/Flux_Dev_a_lush_3d_render_of_A_bright_pink_Cosmopolitan_in_a_m_0_1753377591757.jpg\",\n    description: \"Яркий коктейль с клюквой и лаймом\",\n    tags: [\"🌈 Яркий\", \"🍓 Фруктовый\", \"💃 Женственный\"],\n    abv: 13,\n    volume: 130,\n    rating: 4.8,\n    reviewCount: 203,\n    difficulty: \"Средне\",\n    flavor: { sweet: 3, sour: 3, bitter: 1, spicy: 0 },\n    price: 210\n  },\n  {\n    id: 11,\n    name: \"Белый русский\",\n    image: \"/attached_assets/Flux_Dev_a_lush_3d_render_of_A_White_Russian_in_a_short_glass__2_1753377591757.jpg\",\n    description: \"Кофейно-сливочный коктейль на водке\",\n    tags: [\"🥛 Сливочный\", \"⚡ Крепкий\", \"🍮 Десертный\"],\n    abv: 20,\n    volume: 120,\n    rating: 4.7,\n    reviewCount: 157,\n    difficulty: \"Легко\",\n    flavor: { sweet: 4, sour: 0, bitter: 1, spicy: 0 },\n    price: 230\n  },\n  {\n    id: 12,\n    name: \"Лонг Айленд Айс Ти\",\n    image: \"/attached_assets/Flux_Dev_a_lush_3d_render_of_A_Long_Island_Iced_Tea_in_a_tall__1_1753377591756.jpg\",\n    description: \"Мощный коктейль из 5 спиртов\",\n    tags: [\"⚡ Крепкий\", \"🍊 Цитрус\", \"🧊 Лёд\"],\n    abv: 22,\n    volume: 250,\n    rating: 4.9,\n    reviewCount: 432,\n    difficulty: \"Сложно\",\n    flavor: { sweet: 2, sour: 3, bitter: 1, spicy: 1 },\n    price: 270\n  },\n  {\n    id: 13,\n    name: \"Куба либре\",\n    image: \"/attached_assets/Flux_Dev_a_lush_3d_render_of_A_Cuba_Libre_in_a_tall_glass_dark_2_1753377591756.jpg\",\n    description: \"Кола + ром + лайм — просто и эффектно\",\n    tags: [\"🥂 Классика\", \"💫 Газированный\", \"⚡ Крепкий\"],\n    abv: 12,\n    volume: 200,\n    rating: 4.6,\n    reviewCount: 188,\n    difficulty: \"Легко\",\n    flavor: { sweet: 3, sour: 2, bitter: 1, spicy: 0 },\n    price: 220\n  },\n  {\n    id: 14,\n    name: \"Текила Санрайз\",\n    image: \"/attached_assets/Flux_Dev_a_lush_3d_render_of_A_Tequila_Sunrise_in_a_tall_glass_2_1753377591754.jpg\",\n    description: \"Солнечный градиент апельсина и гренадина\",\n    tags: [\"🌈 Яркий\", \"🍊 Цитрус\", \"🌴 Экзотика\"],\n    abv: 13,\n    volume: 160,\n    rating: 4.8,\n    reviewCount: 294,\n    difficulty: \"Средне\",\n    flavor: { sweet: 4, sour: 2, bitter: 0, spicy: 0 },\n    price: 230\n  },\n  {\n    id: 15,\n    name: \"Негрони\",\n    image: \"/attached_assets/Flux_Dev_A_classic_Negroni_in_a_short_glass_with_a_large_ice_c_3_1753377591753.jpg\",\n    description: \"Горький и стильный коктейль с джином\",\n    tags: [\"⚡ Крепкий\", \"🍸 Горький\", \"🍷 Аперитив\"],\n    abv: 20,\n    volume: 100,\n    rating: 4.5,\n    reviewCount: 162,\n    difficulty: \"Средне\",\n    flavor: { sweet: 1, sour: 1, bitter: 5, spicy: 1 },\n    price: 250\n  }\n];\n\nconst RecipeCard = ({ recipe }: { recipe: Recipe }) => {\n  return (\n    <div className=\"recipe-card relative\">\n      <div \n        className=\"bg-[#1A1A1E] rounded-2xl transition-all duration-200 ease-out overflow-hidden group h-[460px] flex flex-col relative z-10 will-change-auto max-[480px]:h-[420px] max-[480px]:w-[85%] max-[480px]:mx-auto\"\n        style={{\n          filter: 'drop-shadow(0 0 12px rgba(236, 72, 153, 0.15)) drop-shadow(0 4px 20px rgba(0, 0, 0, 0.25))',\n          transform: 'translateZ(0)', // Force hardware acceleration\n          backfaceVisibility: 'hidden', // Prevent flickering\n        }}\n        onMouseEnter={(e) => {\n          e.currentTarget.style.filter = 'drop-shadow(0 0 16px rgba(6, 182, 212, 0.2)) drop-shadow(0 6px 24px rgba(0, 0, 0, 0.3))';\n        }}\n        onMouseLeave={(e) => {\n          e.currentTarget.style.filter = 'drop-shadow(0 0 12px rgba(236, 72, 153, 0.15)) drop-shadow(0 4px 20px rgba(0, 0, 0, 0.25))';\n        }}\n      >\n        {/* Background Image covering entire card */}\n        <div className=\"absolute inset-0 overflow-hidden will-change-transform rounded-2xl\">\n          <img\n            src={recipe.image}\n            alt={recipe.name}\n            className=\"w-full h-full object-cover transition-transform duration-200 ease-out group-hover:scale-105 will-change-transform\"\n            loading=\"lazy\"\n            decoding=\"async\"\n\n            style={{\n              transform: 'translateZ(0)', // Force hardware acceleration\n              contentVisibility: 'auto', // Optimize rendering\n            }}\n          />\n          {/* Enhanced gradient overlay for better text readability - always visible */}\n          <div className=\"absolute inset-0 bg-gradient-to-t from-black/80 via-black/40 to-black/20 pointer-events-none\" />\n        </div>\n\n        {/* Content overlay */}\n        <div className=\"relative z-10 flex flex-col h-full\">\n          {/* Title and Description container - centered text, compact */}\n          <div className=\"bg-black/40 backdrop-blur-sm rounded-t-2xl p-2 max-[480px]:p-1.5 border-b border-white/10 text-center\">\n            {/* Title */}\n            <h3 className=\"text-white text-xl font-bold max-[480px]:text-lg drop-shadow-lg mb-0.5\">{recipe.name}</h3>\n            \n            {/* Description - Compact height */}\n            <div className=\"h-8 flex items-center justify-center max-[480px]:h-6\">\n              <p className=\"text-white/90 text-sm italic leading-tight max-[480px]:text-xs line-clamp-2 drop-shadow-md mb-0\">{recipe.description}</p>\n            </div>\n          </div>\n\n          {/* Tags - Fixed height to prevent layout shift */}\n          <div className=\"flex flex-wrap gap-2 min-h-[60px] items-start content-start px-4 py-4 max-[480px]:min-h-[50px] max-[480px]:gap-1 max-[480px]:px-3 max-[480px]:py-3\">\n            {recipe.tags.map((tag, index) => (\n              <span\n                key={index}\n                className=\"text-sm bg-black/40 backdrop-blur-sm px-3 py-1 rounded-full text-white font-medium whitespace-nowrap max-[480px]:text-xs max-[480px]:px-2 border border-white/20\"\n              >\n                {tag}\n              </span>\n            ))}\n          </div>\n\n          {/* Main spacer - takes up remaining space */}\n          <div className=\"flex-1\"></div>\n\n          {/* All stats in one container - 4 rows */}\n          <div className=\"space-y-2 text-lg text-white font-bold max-[480px]:text-base px-4 py-3 max-[480px]:px-3\" style={{ textShadow: '2px 2px 4px rgba(0, 0, 0, 0.8)' }}>\n            {/* Row 1: Объем */}\n            <div className=\"flex items-center text-left\">\n              <span>💧 {recipe.volume} мл</span>\n            </div>\n            \n            {/* Row 2: ABV */}\n            <div className=\"flex items-center text-left\">\n              <span>🍹 {recipe.abv}%</span>\n            </div>\n            \n            {/* Row 3: Цена */}\n            <div className=\"flex items-center text-left\">\n              <span>💰 {recipe.price || '150'} ₽</span>\n            </div>\n            \n            {/* Row 4: Рейтинг */}\n            <div className=\"flex items-center space-x-2 text-left\">\n              <div className=\"flex\">\n                {Array.from({ length: 5 }, (_, i) => (\n                  <Star\n                    key={i}\n                    className={`w-5 h-5 max-[480px]:w-4 max-[480px]:h-4 ${\n                      i < Math.floor(recipe.rating)\n                        ? 'fill-yellow-400 text-yellow-400'\n                        : 'text-white/40'\n                    }`}\n                    style={{ filter: 'drop-shadow(1px 1px 2px rgba(0, 0, 0, 0.8))' }}\n                  />\n                ))}\n              </div>\n              <span className=\"text-base text-white font-medium max-[480px]:text-sm\" style={{ textShadow: '2px 2px 4px rgba(0, 0, 0, 0.8)' }}>({recipe.reviewCount})</span>\n            </div>\n          </div>\n\n          {/* Single centered button - at bottom with symmetric margin */}\n          <div className=\"flex justify-center px-4 py-4 max-[480px]:px-3 max-[480px]:py-3\">\n            <Link href={`/recipe/${recipe.id}`}>\n              <Button\n                className=\"bg-gradient-to-r from-purple-500/90 to-cyan-500/90 backdrop-blur-sm text-white font-medium rounded-lg px-8 py-3 hover:from-purple-600/90 hover:to-cyan-600/90 transition-all duration-200 ease-out shadow-xl hover:shadow-2xl will-change-transform border border-white/20\"\n                style={{\n                  transform: 'translateZ(0)', // Force hardware acceleration\n                }}\n                onMouseEnter={(e) => {\n                  e.currentTarget.style.transform = 'translateZ(0) scale(1.02)';\n                }}\n                onMouseLeave={(e) => {\n                  e.currentTarget.style.transform = 'translateZ(0) scale(1)';\n                }}\n              >\n                Открыть рецепт\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default function PopularRecipesSection() {\n  const [swiperRef, setSwiperRef] = useState<any>(null);\n\n  return (\n    <section className=\"py-12 bg-[#0C0C0F] relative overflow-hidden max-[480px]:py-8\">\n      {/* Background gradient effects */}\n      <div className=\"absolute inset-0 opacity-20\">\n        <div className=\"absolute top-0 left-0 w-full h-2 bg-gradient-to-r from-purple-400 via-cyan-400 to-purple-400 blur-sm\" />\n        <div className=\"absolute bottom-0 left-0 w-full h-2 bg-gradient-to-r from-cyan-400 via-purple-400 to-cyan-400 blur-sm\" />\n      </div>\n      <div className=\"container mx-auto px-6 relative z-10 max-w-7xl max-[480px]:px-4\">\n        {/* Section Title */}\n        <div className=\"text-center mb-10 max-[480px]:mb-4\">\n          <h2 className=\"md:text-5xl font-bold text-[#F1F1F1] mb-4 text-[40px] max-[480px]:text-2xl max-[480px]:mb-2\" \n              style={{ textShadow: '0 0 20px rgba(6, 182, 212, 0.3)' }}>\n            Популярные рецепты коктейлей\n          </h2>\n          <div className=\"h-px w-16 mx-auto bg-gradient-to-r from-purple-400 to-cyan-400 max-[480px]:w-12\" />\n        </div>\n\n        {/* Swiper Carousel */}\n        <Swiper\n          onSwiper={setSwiperRef}\n          modules={[Navigation, Autoplay]}\n          grabCursor={true}\n          centeredSlides={true}\n          loop={true}\n          autoplay={{\n            delay: 5000,\n            disableOnInteraction: false,\n            pauseOnMouseEnter: true,\n          }}\n          slidesPerView={1}\n          spaceBetween={20}\n          breakpoints={{\n            640: {\n              slidesPerView: 2,\n              spaceBetween: 30,\n            },\n            1024: {\n              slidesPerView: 3,\n              spaceBetween: 40,\n            },\n          }}\n          className=\"popular-recipes-swiper mb-8 max-[480px]:mb-4\"\n        >\n          {popularRecipes.map((recipe) => (\n            <SwiperSlide key={recipe.id}>\n              <RecipeCard recipe={recipe} />\n            </SwiperSlide>\n          ))}\n        </Swiper>\n\n        {/* Navigation Arrows */}\n        <div className=\"flex justify-center items-center gap-6 mt-5 max-[480px]:gap-3 max-[480px]:mt-2\">\n          <button\n            onClick={() => swiperRef?.slidePrev()}\n            className=\"p-4 rounded-full bg-white/10 backdrop-blur-sm border border-white/20 hover:bg-white/20 transition-all duration-300 hover:shadow-lg hover:shadow-cyan-500/30 max-[480px]:p-3\"\n          >\n            <ArrowLeft className=\"w-6 h-6 text-white max-[480px]:w-5 max-[480px]:h-5\" />\n          </button>\n          \n          <button\n            onClick={() => swiperRef?.slideNext()}\n            className=\"p-4 rounded-full bg-white/10 backdrop-blur-sm border border-white/20 hover:bg-white/20 transition-all duration-300 hover:shadow-lg hover:shadow-cyan-500/30 max-[480px]:p-3\"\n          >\n            <ArrowRight className=\"w-6 h-6 text-white max-[480px]:w-5 max-[480px]:h-5\" />\n          </button>\n        </div>\n      </div>\n    </section>\n  );\n}","size_bytes":17415},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\nexport function useAuth() {\n  const { data: user, isLoading, error } = useQuery({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n    staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  const isAuthenticated = !!user && !error;\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated,\n    error,\n  };\n}","size_bytes":354},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*/.test(error.message);\n}\n\nexport function handleGoogleLogin() {\n  window.location.href = '/api/auth/google';\n}\n\nexport function handleGuestLogin() {\n  return fetch('/api/auth/guest', {\n    method: 'POST',\n    credentials: 'include',\n  }).then(res => res.json());\n}\n\nexport function handleLogout() {\n  return fetch('/api/auth/logout', {\n    method: 'POST',\n    credentials: 'include',\n  }).then(res => res.json());\n}","size_bytes":494},"client/src/lib/cocktail-utils.ts":{"content":"import type { Ingredient, RecipeIngredient } from \"@shared/schema\";\n\nexport interface TasteProfile {\n  sweet: number;\n  sour: number;\n  bitter: number;\n  alcohol: number;\n}\n\nexport interface CocktailCalculation {\n  totalVolume: number;\n  totalAbv: number;\n  totalCost: number;\n  tasteBalance: TasteProfile;\n}\n\nexport function calculateCocktailStats(\n  ingredients: (RecipeIngredient & { ingredient: Ingredient })[]\n): CocktailCalculation {\n  if (!ingredients.length) {\n    return {\n      totalVolume: 0,\n      totalAbv: 0,\n      totalCost: 0,\n      tasteBalance: { sweet: 0, sour: 0, bitter: 0, alcohol: 0 }\n    };\n  }\n\n  let totalVolume = 0;\n  let totalAlcohol = 0;\n  let totalCost = 0;\n  let totalSweet = 0;\n  let totalSour = 0;\n  let totalBitter = 0;\n  let totalAlcoholTaste = 0;\n\n  ingredients.forEach(({ ingredient, amount }) => {\n    const volume = parseFloat(amount.toString());\n    const abv = parseFloat(ingredient.abv?.toString() || \"0\");\n    const pricePerLiter = parseFloat(ingredient.pricePerLiter.toString());\n    const tasteProfile = ingredient.tasteProfile as TasteProfile;\n\n    totalVolume += volume;\n    totalAlcohol += (volume * abv) / 100;\n    totalCost += (volume / 1000) * pricePerLiter;\n\n    // Weight taste contributions by volume\n    const weight = volume / 100; // Normalize by 100ml\n    totalSweet += (tasteProfile.sweet || 0) * weight;\n    totalSour += (tasteProfile.sour || 0) * weight;\n    totalBitter += (tasteProfile.bitter || 0) * weight;\n    totalAlcoholTaste += (tasteProfile.alcohol || 0) * weight;\n  });\n\n  const totalAbv = totalVolume > 0 ? (totalAlcohol / totalVolume) * 100 : 0;\n  const totalWeight = totalVolume / 100;\n\n  return {\n    totalVolume: Math.round(totalVolume),\n    totalAbv: Math.round(totalAbv * 100) / 100,\n    totalCost: Math.round(totalCost * 100) / 100,\n    tasteBalance: {\n      sweet: Math.min(10, Math.round((totalSweet / totalWeight) * 10) / 10),\n      sour: Math.min(10, Math.round((totalSour / totalWeight) * 10) / 10),\n      bitter: Math.min(10, Math.round((totalBitter / totalWeight) * 10) / 10),\n      alcohol: Math.min(10, Math.round((totalAlcoholTaste / totalWeight) * 10) / 10)\n    }\n  };\n}\n\nexport function getIngredientColor(ingredient: Ingredient): string {\n  return ingredient.color || \"#888888\";\n}\n\nexport function generateCocktailName(): string {\n  const adjectives = [\n    \"Тропический\", \"Полуночный\", \"Золотой\", \"Алый\", \"Лазурный\", \n    \"Изумрудный\", \"Закатный\", \"Штормовой\", \"Огненный\", \"Ледяной\"\n  ];\n  const nouns = [\n    \"Бриз\", \"Гром\", \"Волна\", \"Сон\", \"Искра\", \n    \"Пламя\", \"Туман\", \"Порыв\", \"Блаженство\", \"Пунш\"\n  ];\n  \n  const adjective = adjectives[Math.floor(Math.random() * adjectives.length)];\n  const noun = nouns[Math.floor(Math.random() * nouns.length)];\n  \n  return `${adjective} ${noun}`;\n}\n\nexport function validateCocktailIngredients(\n  ingredients: (RecipeIngredient & { ingredient: Ingredient })[]\n): string[] {\n  const errors: string[] = [];\n  \n  if (!ingredients.length) {\n    errors.push(\"Добавьте хотя бы один ингредиент\");\n    return errors;\n  }\n\n  const stats = calculateCocktailStats(ingredients);\n  \n  if (stats.totalVolume < 30) {\n    errors.push(\"Слишком маленький объем коктейля\");\n  }\n  \n  if (stats.totalVolume > 500) {\n    errors.push(\"Слишком большой объем коктейля\");\n  }\n\n  if (stats.tasteBalance.sweet > 8) {\n    errors.push(\"Слишком много сладких ингредиентов\");\n  }\n  \n  if (stats.tasteBalance.bitter > 7) {\n    errors.push(\"Слишком много горьких ингредиентов\");\n  }\n\n  if (stats.totalAbv > 50) {\n    errors.push(\"Слишком крепкий коктейль\");\n  }\n\n  return errors;\n}\n","size_bytes":3885},"client/src/lib/ingredients-data.ts":{"content":"import type { Ingredient } from \"@shared/schema\";\n\n// This would typically come from the API, but here's some starter data\nexport const SAMPLE_INGREDIENTS: Partial<Ingredient>[] = [\n  // Alcohol\n  {\n    name: \"Водка\",\n    category: \"alcohol\",\n    color: \"#FFFFFF\",\n    abv: 40,\n    pricePerLiter: 1200,\n    tasteProfile: { sweet: 0, sour: 0, bitter: 0, alcohol: 9 },\n    unit: \"ml\"\n  },\n  {\n    name: \"Белый ром\",\n    category: \"alcohol\",\n    color: \"#FFFACD\",\n    abv: 40,\n    pricePerLiter: 1500,\n    tasteProfile: { sweet: 2, sour: 0, bitter: 0, alcohol: 8 },\n    unit: \"ml\"\n  },\n  {\n    name: \"Джин\",\n    category: \"alcohol\",\n    color: \"#F8F8FF\",\n    abv: 42,\n    pricePerLiter: 1800,\n    tasteProfile: { sweet: 0, sour: 0, bitter: 3, alcohol: 9 },\n    unit: \"ml\"\n  },\n  {\n    name: \"Виски\",\n    category: \"alcohol\",\n    color: \"#D2691E\",\n    abv: 40,\n    pricePerLiter: 2500,\n    tasteProfile: { sweet: 1, sour: 0, bitter: 4, alcohol: 9 },\n    unit: \"ml\"\n  },\n  {\n    name: \"Текила\",\n    category: \"alcohol\",\n    color: \"#F5F5DC\",\n    abv: 38,\n    pricePerLiter: 2000,\n    tasteProfile: { sweet: 0, sour: 1, bitter: 2, alcohol: 8 },\n    unit: \"ml\"\n  },\n  \n  // Juices\n  {\n    name: \"Апельсиновый сок\",\n    category: \"juice\",\n    color: \"#FFA500\",\n    abv: 0,\n    pricePerLiter: 200,\n    tasteProfile: { sweet: 7, sour: 3, bitter: 0, alcohol: 0 },\n    unit: \"ml\"\n  },\n  {\n    name: \"Ананасовый сок\",\n    category: \"juice\",\n    color: \"#FFE135\",\n    abv: 0,\n    pricePerLiter: 250,\n    tasteProfile: { sweet: 8, sour: 2, bitter: 0, alcohol: 0 },\n    unit: \"ml\"\n  },\n  {\n    name: \"Клюквенный сок\",\n    category: \"juice\",\n    color: \"#DC143C\",\n    abv: 0,\n    pricePerLiter: 300,\n    tasteProfile: { sweet: 4, sour: 6, bitter: 1, alcohol: 0 },\n    unit: \"ml\"\n  },\n  {\n    name: \"Лимонный сок\",\n    category: \"juice\",\n    color: \"#FFFF00\",\n    abv: 0,\n    pricePerLiter: 400,\n    tasteProfile: { sweet: 1, sour: 9, bitter: 0, alcohol: 0 },\n    unit: \"ml\"\n  },\n  {\n    name: \"Лаймовый сок\",\n    category: \"juice\",\n    color: \"#32CD32\",\n    abv: 0,\n    pricePerLiter: 450,\n    tasteProfile: { sweet: 1, sour: 8, bitter: 0, alcohol: 0 },\n    unit: \"ml\"\n  },\n  \n  // Syrups\n  {\n    name: \"Простой сироп\",\n    category: \"syrup\",\n    color: \"#FFFFFF\",\n    abv: 0,\n    pricePerLiter: 150,\n    tasteProfile: { sweet: 10, sour: 0, bitter: 0, alcohol: 0 },\n    unit: \"ml\"\n  },\n  {\n    name: \"Сироп граната\",\n    category: \"syrup\",\n    color: \"#B22222\",\n    abv: 0,\n    pricePerLiter: 350,\n    tasteProfile: { sweet: 9, sour: 1, bitter: 0, alcohol: 0 },\n    unit: \"ml\"\n  },\n  {\n    name: \"Кокосовый сироп\",\n    category: \"syrup\",\n    color: \"#FFFACD\",\n    abv: 0,\n    pricePerLiter: 400,\n    tasteProfile: { sweet: 8, sour: 0, bitter: 0, alcohol: 0 },\n    unit: \"ml\"\n  },\n  {\n    name: \"Мятный сироп\",\n    category: \"syrup\",\n    color: \"#90EE90\",\n    abv: 0,\n    pricePerLiter: 300,\n    tasteProfile: { sweet: 7, sour: 0, bitter: 2, alcohol: 0 },\n    unit: \"ml\"\n  },\n  \n  // Fruits and garnishes\n  {\n    name: \"Лайм\",\n    category: \"fruit\",\n    color: \"#32CD32\",\n    abv: 0,\n    pricePerLiter: 500,\n    tasteProfile: { sweet: 2, sour: 7, bitter: 0, alcohol: 0 },\n    unit: \"piece\"\n  },\n  {\n    name: \"Лимон\",\n    category: \"fruit\",\n    color: \"#FFFF00\",\n    abv: 0,\n    pricePerLiter: 400,\n    tasteProfile: { sweet: 2, sour: 8, bitter: 0, alcohol: 0 },\n    unit: \"piece\"\n  },\n  {\n    name: \"Мята\",\n    category: \"fruit\",\n    color: \"#00FF00\",\n    abv: 0,\n    pricePerLiter: 800,\n    tasteProfile: { sweet: 1, sour: 0, bitter: 3, alcohol: 0 },\n    unit: \"piece\"\n  },\n  {\n    name: \"Вишня\",\n    category: \"fruit\",\n    color: \"#DC143C\",\n    abv: 0,\n    pricePerLiter: 600,\n    tasteProfile: { sweet: 8, sour: 1, bitter: 0, alcohol: 0 },\n    unit: \"piece\"\n  },\n  \n  // Ice and others\n  {\n    name: \"Лёд\",\n    category: \"ice\",\n    color: \"#E0E0E0\",\n    abv: 0,\n    pricePerLiter: 50,\n    tasteProfile: { sweet: 0, sour: 0, bitter: 0, alcohol: 0 },\n    unit: \"g\"\n  }\n];\n\nexport const GLASS_TYPES = [\n  { name: \"Old-fashioned\", capacity: 300, shape: \"old-fashioned\" },\n  { name: \"Highball\", capacity: 350, shape: \"highball\" },\n  { name: \"Martini\", capacity: 150, shape: \"martini\" },\n  { name: \"Shot\", capacity: 50, shape: \"shot\" },\n  { name: \"Rocks\", capacity: 250, shape: \"rocks\" },\n  { name: \"Coupe\", capacity: 180, shape: \"coupe\" }\n];\n","size_bytes":4484},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/RecipePage.tsx":{"content":"import { useParams } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Star, ArrowLeft, Heart, Share2, Play, ShoppingCart } from \"lucide-react\";\nimport { useState } from \"react\";\n\n// Данные для коктейля Мохито\nconst mojitorecipeData = {\n  id: 2,\n  name: \"Мохито\",\n  image: \"/attached_assets/Flux_Dev_a_lush_3d_render_of_A_refreshing_Mojito_in_a_tall_hig_0_1753377591761.jpg\",\n  description: \"Освежающий кубинский коктейль с мятой и лаймом\",\n  tags: [\"🌿 Лёгкий\", \"🌱 Мятный\", \"❄️ Освежающий\"],\n  abv: 10,\n  volume: 200,\n  calories: 160,\n  price: 240,\n  rating: 4.8,\n  reviewCount: 342,\n  videoUrl: \"https://www.youtube.com/watch?v=Zc_TZ0UWP3I\",\n  ingredients: [\n    { name: \"Ром\", amount: \"50 мл\", icon: \"🥃\" },\n    { name: \"Мята\", amount: \"10 г\", icon: \"🌿\" },\n    { name: \"Лайм\", amount: \"½ штуки\", icon: \"🍋\" },\n    { name: \"Сахар\", amount: \"2 ч. ложки\", icon: \"🍬\" },\n    { name: \"Содовая\", amount: \"до 200 мл\", icon: \"💧\" }\n  ],\n  steps: [\n    { icon: \"🍋\", text: \"Разомни мяту и сахар с лаймом\", step: 1 },\n    { icon: \"🧊\", text: \"Добавь ром и лёд\", step: 2 },\n    { icon: \"🥤\", text: \"Долей содовую\", step: 3 },\n    { icon: \"🍹\", text: \"Перемешай ложкой\", step: 4 }\n  ],\n  equipment: [\n    { name: \"Джулеп ложка\", icon: \"🥄\" },\n    { name: \"Барный стакан\", icon: \"🥃\" },\n    { name: \"Джиггер\", icon: \"🧴\" }\n  ],\n  taste: {\n    sweetness: 3,\n    sourness: 3,\n    bitterness: 1,\n    strength: 2,\n    refreshing: 5\n  },\n  recommendations: [\n    { name: \"Cuba Libre\", image: \"/attached_assets/Flux_Dev_a_lush_3d_render_of_A_Cuba_Libre_in_a_tall_glass_dark_2_1753377591756.jpg\" },\n    { name: \"Margarita\", image: \"/attached_assets/Flux_Dev_a_lush_3d_render_of_A_classic_Margarita_cocktail_in_a_0_1753377591761.jpg\" }\n  ]\n};\n\nconst TasteSemicircles = ({ taste }: { taste: any }) => {\n  const characteristics = [\n    { label: \"Сладость\", value: taste.sweetness, color: \"#FF006E\", shadowColor: \"rgba(255, 0, 110, 0.6)\" }, // Неоново-розовый\n    { label: \"Кислотность\", value: taste.sourness, color: \"#FFBE0B\", shadowColor: \"rgba(255, 190, 11, 0.6)\" }, // Неоново-желтый\n    { label: \"Горечь\", value: taste.bitterness, color: \"#FB5607\", shadowColor: \"rgba(251, 86, 7, 0.6)\" }, // Неоново-оранжевый\n    { label: \"Крепость\", value: taste.strength, color: \"#8338EC\", shadowColor: \"rgba(131, 56, 236, 0.6)\" }, // Неоново-фиолетовый\n    { label: \"Освежающая сила\", value: taste.refreshing, color: \"#06FFA5\", shadowColor: \"rgba(6, 255, 165, 0.6)\" } // Неоново-зеленый\n  ];\n\n  const SemicircleChart = ({ value, color, shadowColor, label }: { value: number, color: string, shadowColor: string, label: string }) => {\n    const radius = 80;\n    const strokeWidth = 16;\n    const segments = 5;\n    const gapAngle = 3; // Угол зазора между сегментами\n    const segmentAngle = (180 - (segments - 1) * gapAngle) / segments; // Угол каждого сегмента с учетом зазоров\n    const centerX = 100;\n    const centerY = 100;\n\n    return (\n      <div className=\"flex flex-col items-center\">\n        <div className=\"relative mb-6\">\n          <svg width=\"200\" height=\"120\" className=\"overflow-visible\">\n            {/* Сегменты полукруга */}\n            {Array.from({ length: segments }, (_, i) => {\n              const startAngle = i * (segmentAngle + gapAngle);\n              const endAngle = startAngle + segmentAngle;\n              \n              // Преобразование в радианы для правильного полукруга\n              const startRadian = (startAngle) * Math.PI / 180;\n              const endRadian = (endAngle) * Math.PI / 180;\n              \n              const startX = centerX - radius * Math.cos(startRadian);\n              const startY = centerY - radius * Math.sin(startRadian);\n              const endX = centerX - radius * Math.cos(endRadian);\n              const endY = centerY - radius * Math.sin(endRadian);\n              \n              const largeArcFlag = (endAngle - startAngle) > 180 ? 1 : 0;\n              \n              // Создаем толстую дугу вместо сектора\n              const outerRadius = radius;\n              const innerRadius = radius - strokeWidth;\n              \n              const outerStartX = centerX - outerRadius * Math.cos(startRadian);\n              const outerStartY = centerY - outerRadius * Math.sin(startRadian);\n              const outerEndX = centerX - outerRadius * Math.cos(endRadian);\n              const outerEndY = centerY - outerRadius * Math.sin(endRadian);\n              \n              const innerStartX = centerX - innerRadius * Math.cos(startRadian);\n              const innerStartY = centerY - innerRadius * Math.sin(startRadian);\n              const innerEndX = centerX - innerRadius * Math.cos(endRadian);\n              const innerEndY = centerY - innerRadius * Math.sin(endRadian);\n              \n              const pathData = [\n                `M ${outerStartX} ${outerStartY}`,\n                `A ${outerRadius} ${outerRadius} 0 ${largeArcFlag} 1 ${outerEndX} ${outerEndY}`,\n                `L ${innerEndX} ${innerEndY}`,\n                `A ${innerRadius} ${innerRadius} 0 ${largeArcFlag} 0 ${innerStartX} ${innerStartY}`,\n                `Z`\n              ].join(' ');\n              \n              const isActive = i < value;\n              \n              return (\n                <path\n                  key={i}\n                  d={pathData}\n                  fill={isActive ? color : \"rgba(128, 128, 128, 0.15)\"}\n                  stroke={isActive ? color : \"rgba(128, 128, 128, 0.3)\"}\n                  strokeWidth=\"2\"\n                  filter={isActive ? `drop-shadow(0 0 12px ${shadowColor})` : \"none\"}\n                  className=\"transition-all duration-300\"\n                />\n              );\n            })}\n            \n            {/* Базовая линия полукруга */}\n            <line\n              x1={centerX - radius}\n              y1={centerY}\n              x2={centerX + radius}\n              y2={centerY}\n              stroke=\"rgba(255, 255, 255, 0.2)\"\n              strokeWidth=\"2\"\n            />\n          </svg>\n        </div>\n        \n        {/* Название характеристики */}\n        <div className=\"text-center\">\n          <div className=\"text-white font-semibold text-base mb-2\">{label}</div>\n          <div \n            className=\"text-xl font-bold\"\n            style={{ \n              color: color,\n              textShadow: `0 0 12px ${shadowColor}`\n            }}\n          >\n            {value}/5\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-8 justify-items-center\">\n      {characteristics.map((char, index) => (\n        <SemicircleChart\n          key={index}\n          value={char.value}\n          color={char.color}\n          shadowColor={char.shadowColor}\n          label={char.label}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default function RecipePage() {\n  const params = useParams();\n  const [currentStep, setCurrentStep] = useState(1);\n  const [isFavorite, setIsFavorite] = useState(false);\n  const [userRating, setUserRating] = useState(0);\n\n  const recipe = mojitorecipeData; // В будущем здесь будет загрузка по ID\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-[#0A0A0D] via-[#1B1B1F] to-[#0A0A0D]\">\n      {/* Back Button - исправлена позиция для мобильных */}\n      <div className=\"absolute top-6 left-6 z-20 md:top-6 md:left-6\">\n        <Button\n          onClick={() => window.history.back()}\n          className=\"bg-black/40 backdrop-blur-sm border border-white/20 hover:bg-black/60 transition-all duration-300\"\n        >\n          <ArrowLeft className=\"w-4 h-4 mr-2\" />\n          Назад\n        </Button>\n      </div>\n\n      {/* Hero Section */}\n      <section className=\"relative min-h-[70vh] flex items-center justify-center overflow-hidden\">\n        {/* Background Image */}\n        <div className=\"absolute inset-0\">\n          <img\n            src={recipe.image}\n            alt={recipe.name}\n            className=\"w-full h-full object-cover scale-110 blur-sm\"\n          />\n          <div className=\"absolute inset-0 bg-gradient-to-t from-black/90 via-black/60 to-black/30\" />\n        </div>\n\n        {/* Hero Content */}\n        <div className=\"relative z-10 text-center max-w-4xl mx-auto px-6\">\n          {/* Cocktail Glass - круглое изображение с неоновым свечением */}\n          <div className=\"mt-8 mb-16 flex justify-center\">\n            <div className=\"relative\">\n              <img\n                src={recipe.image}\n                alt={recipe.name}\n                className=\"w-64 h-64 max-[500px]:w-56 max-[500px]:h-56 sm:w-80 sm:h-80 lg:w-[28rem] lg:h-[28rem] mx-auto object-cover rounded-full shadow-2xl transition-transform duration-500 hover:scale-105 border-4 border-cyan-400/30\"\n                style={{\n                  filter: 'drop-shadow(0 0 40px rgba(6, 182, 212, 0.6))'\n                }}\n              />\n              {/* Дополнительные неоновые кольца */}\n              <div className=\"absolute inset-0 rounded-full border-2 border-purple-400/40 animate-pulse\"></div>\n              <div className=\"absolute -inset-2 rounded-full border border-cyan-300/30 animate-pulse\" style={{ animationDelay: '1s' }}></div>\n            </div>\n          </div>\n\n          {/* Title */}\n          <h1 \n            className=\"text-6xl font-bold text-white mb-8 max-[480px]:text-4xl mt-12\"\n            style={{ textShadow: '0 0 20px rgba(0, 255, 240, 0.5)' }}\n          >\n            {recipe.name}\n          </h1>\n\n          {/* Tags */}\n          <div className=\"flex flex-wrap justify-center gap-3 mb-16\">\n            {recipe.tags.map((tag, index) => (\n              <span\n                key={index}\n                className=\"px-4 py-2 bg-zinc-800/80 backdrop-blur-sm text-cyan-400 rounded-full text-sm font-medium border border-cyan-400/30 hover:scale-105 transition-transform duration-200\"\n              >\n                {tag}\n              </span>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Main Content */}\n      <div className=\"max-w-6xl mx-auto px-6 py-12 space-y-16\">\n        \n        {/* Ingredients & Calculations */}\n        <section className=\"flex flex-col md:flex-row gap-8\">\n          {/* Ingredients */}\n          <div className=\"flex-1\">\n            <h2 className=\"text-3xl font-bold text-white mb-6 text-center\">\n              🧪 Что внутри?\n            </h2>\n            <div className=\"bg-black/40 backdrop-blur-sm rounded-2xl p-6 border border-white/10\">\n              <div className=\"space-y-4\">\n                {recipe.ingredients.map((ingredient, index) => (\n                  <div key={index} className=\"flex items-center justify-between text-white\">\n                    <div className=\"flex items-center space-x-3\">\n                      <span className=\"text-2xl\">{ingredient.icon}</span>\n                      <span className=\"text-lg\">{ingredient.name}</span>\n                    </div>\n                    <span className=\"text-cyan-400 font-semibold\">{ingredient.amount}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {/* Calculations - тёмный фон как у ингредиентов */}\n          <div className=\"flex-1\">\n            <h2 className=\"text-3xl font-bold text-white mb-6 text-center\">📊 Расчёты</h2>\n            <div className=\"bg-black/40 backdrop-blur-sm rounded-2xl p-6 border border-white/10 flex items-center\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div className=\"text-center p-4 bg-gradient-to-br from-purple-500/20 to-purple-600/20 rounded-xl border border-purple-400/30 shadow-lg shadow-purple-500/20\">\n                  <div className=\"text-2xl font-bold text-purple-300\" style={{ textShadow: '0 0 10px rgba(168, 85, 247, 0.8)' }}>{recipe.abv}%</div>\n                  <div className=\"text-white/80\">ABV</div>\n                </div>\n                <div className=\"text-center p-4 bg-gradient-to-br from-cyan-500/20 to-cyan-600/20 rounded-xl border border-cyan-400/30 shadow-lg shadow-cyan-500/20\">\n                  <div className=\"text-2xl font-bold text-cyan-300\" style={{ textShadow: '0 0 10px rgba(6, 182, 212, 0.8)' }}>{recipe.volume} мл</div>\n                  <div className=\"text-white/80\">Объём</div>\n                </div>\n                <div className=\"text-center p-4 bg-gradient-to-br from-pink-500/20 to-pink-600/20 rounded-xl border border-pink-400/30 shadow-lg shadow-pink-500/20\">\n                  <div className=\"text-2xl font-bold text-pink-300\" style={{ textShadow: '0 0 10px rgba(236, 72, 153, 0.8)' }}>{recipe.calories} ккал</div>\n                  <div className=\"text-white/80\">Калории</div>\n                </div>\n                <div className=\"text-center p-4 bg-gradient-to-br from-green-500/20 to-green-600/20 rounded-xl border border-green-400/30 shadow-lg shadow-green-500/20\">\n                  <div className=\"text-2xl font-bold text-green-300\" style={{ textShadow: '0 0 10px rgba(34, 197, 94, 0.8)' }}>{recipe.price} ₽</div>\n                  <div className=\"text-white/80\">Стоимость</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        {/* Main Content Grid - Equipment and Video */}\n        <section className=\"flex flex-col lg:flex-row gap-8\">\n          {/* Equipment Section - Left side */}\n          <div className=\"flex-1\">\n            <h2 className=\"text-3xl font-bold text-white mb-6 text-center\">Что потребуется ?</h2>\n            <div className=\"bg-black/40 backdrop-blur-sm rounded-2xl p-6 border border-white/10\">\n              <div className=\"grid md:grid-cols-2 lg:grid-cols-1 xl:grid-cols-2 gap-4 mb-6\">\n                {recipe.equipment.map((item, index) => (\n                  <div key={index} className=\"text-center p-4 bg-gradient-to-br from-white/5 to-white/10 rounded-xl border border-white/20 hover:border-white/40 hover:from-white/10 hover:to-white/15 transition-all duration-300 transform hover:scale-105\">\n                    <div className=\"text-4xl mb-3 transform hover:scale-110 transition-transform duration-200\">{item.icon}</div>\n                    <div className=\"text-white font-semibold text-base\">{item.name}</div>\n                  </div>\n                ))}\n                {/* Дополнительная карточка только для симметрии в 2-колоночной компоновке */}\n                <div className=\"text-center p-4 bg-gradient-to-br from-white/5 to-white/10 rounded-xl border border-white/20 hover:border-white/40 hover:from-white/10 hover:to-white/15 transition-all duration-300 transform hover:scale-105 md:block lg:hidden xl:block hidden\">\n                  <div className=\"text-4xl mb-3 transform hover:scale-110 transition-transform duration-200\">😊</div>\n                  <div className=\"text-white font-semibold text-base\">Хорошее настроение</div>\n                </div>\n              </div>\n              \n              {/* Единая кнопка Посетить магазин */}\n              <div className=\"text-center\">\n                <Button className=\"bg-gradient-to-r from-orange-500 to-red-500 hover:from-orange-600 hover:to-red-600 px-8 py-4 text-lg font-semibold rounded-2xl shadow-xl transform hover:scale-105 transition-all duration-300 border border-orange-400/30\"\n                  style={{\n                    boxShadow: '0 0 20px rgba(234, 88, 12, 0.4)'\n                  }}\n                >\n                  <ShoppingCart className=\"w-6 h-6 mr-3\" />\n                  Посетить магазин\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          {/* Video Section - Right side */}\n          <div className=\"flex-1\">\n            <h2 className=\"text-3xl font-bold text-white mb-6 text-center\">Видео приготовления</h2>\n            <div className=\"bg-black/40 backdrop-blur-sm rounded-2xl p-6 border border-white/10 flex flex-col\">\n              \n              <div className=\"flex-1 flex items-center justify-center\">\n                <div className=\"relative w-full max-w-lg\">\n                  <div className=\"aspect-video bg-gradient-to-br from-purple-900/30 to-cyan-900/30 rounded-2xl flex items-center justify-center border-2 border-white/20 backdrop-blur-md overflow-hidden\">\n                    {/* Background pattern */}\n                    <div className=\"absolute inset-0 opacity-20\">\n                      <div className=\"w-full h-full bg-gradient-to-br from-white/5 to-transparent\"></div>\n                    </div>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"text-center mt-4\">\n                <Button\n                  onClick={() => window.open(recipe.videoUrl, '_blank')}\n                  className=\"bg-gradient-to-r from-purple-600/90 to-cyan-600/90 hover:from-purple-500/90 hover:to-cyan-500/90 px-12 py-6 text-xl font-semibold rounded-2xl shadow-2xl transform hover:scale-105 transition-all duration-300 border border-white/30 backdrop-blur-sm\"\n                  style={{\n                    boxShadow: '0 0 30px rgba(168, 85, 247, 0.4), 0 0 60px rgba(6, 182, 212, 0.2)'\n                  }}\n                >\n                  <Play className=\"w-8 h-8 mr-3\" />\n                  Смотреть видео\n                </Button>\n              </div>\n            </div>\n          </div>\n        </section>\n\n        {/* Recipe Steps - квадратные карточки с описанием */}\n        <section>\n          <h2 className=\"text-3xl font-bold text-white mb-8 text-center\">Пошаговый рецепт</h2>\n          <div className=\"w-full\">\n            {recipe.steps.map((step, index) => {\n              // Подробные описания для каждого шага\n              const getStepDescription = (stepNumber: number) => {\n                switch(stepNumber) {\n                  case 1: return \"Возьмите свежие листья мяты и аккуратно разомните их в барном стакане вместе с сахаром и кусочками лайма. Этот процесс называется мадлинг - он поможет извлечь эфирные масла из мяты, которые придадут коктейлю неповторимый аромат. Не переусердствуйте, чтобы не сделать напиток горьким.\";\n                  case 2: return \"Добавьте светлый ром в стакан с размятой мятой. Следом аккуратно насыпьте колотый лёд до верха стакана. Лёд должен быть достаточно мелким, чтобы хорошо охладить напиток, но не слишком мелким, чтобы не разбавить его слишком быстро. Идеально подойдёт лёд размером с орех.\";\n                  case 3: return \"Медленно долейте содовую воду до верха стакана. Наливайте её тонкой струйкой по барной ложке, чтобы не разрушить слоистость напитка. Содовая придаст мохито лёгкую игристость и освежающий эффект. Важно не переборщить - содовая должна дополнять, а не доминировать во вкусе.\";\n                  case 4: return \"Осторожно перемешайте коктейль барной ложкой движениями снизу вверх. Цель - объединить все ингредиенты, не повредив листья мяты. Перемешивайте 3-4 раза, этого достаточно. Украсьте веточкой свежей мяты и долькой лайма на краю стакана. Ваш идеальный мохито готов!\";\n                  default: return \"Следуйте инструкции для выполнения данного шага приготовления коктейля.\";\n                }\n              };\n              \n              return (\n                <div\n                  key={index}\n                  className={`${\n                    currentStep === step.step ? 'block' : 'hidden'\n                  } transition-all duration-500`}\n                >\n                  <div\n                    className=\"cursor-pointer transform hover:scale-[1.01] transition-all duration-300 group\"\n                    onClick={() => {\n                      if (currentStep < recipe.steps.length) {\n                        setCurrentStep(currentStep + 1);\n                      } else {\n                        setCurrentStep(1);\n                      }\n                    }}\n                  >\n                    {/* Полноширинная карточка с неоновым эффектом */}\n                    <div className=\"w-full bg-gradient-to-br from-cyan-500/20 to-purple-500/20 border-2 border-cyan-400/50 shadow-lg shadow-cyan-500/25 rounded-2xl p-8 group-hover:border-cyan-300/70 group-hover:shadow-xl group-hover:shadow-cyan-500/40 group-active:border-cyan-200 group-active:shadow-2xl group-active:shadow-cyan-500/60 transition-all duration-300\">\n                      {/* Заголовок */}\n                      <div className=\"text-center mb-6\">\n                        <div className=\"text-cyan-300 text-lg font-medium mb-3\">Шаг {step.step}</div>\n                        <div className=\"text-white text-2xl font-semibold mb-4\">{step.text}</div>\n                        \n                        {/* Иконка сразу после заголовка */}\n                        <div className=\"inline-flex items-center justify-center w-20 h-20 bg-gradient-to-br from-white/10 to-white/5 rounded-full border border-white/20 mb-6\">\n                          <div className=\"text-5xl transform transition-all duration-300 group-hover:scale-110 group-hover:rotate-6\">\n                            {step.icon}\n                          </div>\n                        </div>\n                      </div>\n                      \n                      {/* Подробное описание */}\n                      <div className=\"text-center\">\n                        <p className=\"text-zinc-300 text-base leading-relaxed max-w-3xl mx-auto\">\n                          {getStepDescription(step.step)}\n                        </p>\n                      </div>\n                      \n                      {/* Индикатор клика */}\n                      <div className=\"text-center mt-8\">\n                        <p className=\"text-cyan-400/60 text-sm font-medium group-hover:text-cyan-300/80 transition-colors duration-300\">\n                          Нажмите для перехода к следующему шагу\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              );\n            })}\n          </div>\n        </section>\n\n        {/* Taste Analysis */}\n        <section>\n          <h2 className=\"text-3xl font-bold text-white mb-6 text-center\">🧠 Анализ вкуса</h2>\n          <div className=\"bg-black/40 backdrop-blur-sm rounded-2xl p-6 border border-white/10\">\n            <TasteSemicircles taste={recipe.taste} />\n          </div>\n        </section>\n\n        {/* Social Functions - адаптивная компоновка */}\n        <section>\n          <h2 className=\"text-3xl font-bold text-white mb-6 text-center\">Ваша оценка</h2>\n          <div className=\"bg-black/40 backdrop-blur-sm rounded-2xl p-6 border border-white/10\">\n          \n          {/* Адаптивная компоновка для рейтинга и кнопок */}\n          <div className=\"flex flex-col max-[800px]:space-y-0 min-[800px]:flex-row min-[800px]:items-center min-[800px]:justify-between min-[800px]:space-y-0\">\n            \n            {/* Кнопка \"В избранное\" - слева на больших экранах */}\n            <div className=\"min-[800px]:order-1 max-[800px]:order-2 max-[800px]:w-[60%] max-[500px]:w-[80%] max-[800px]:mx-auto max-[800px]:mb-4 max-[800px]:mt-4\">\n              <Button\n                onClick={() => setIsFavorite(!isFavorite)}\n                className={`${\n                  isFavorite\n                    ? 'bg-gradient-to-r from-neon-purple to-purple-500 hover:from-purple-600 hover:to-purple-700'\n                    : 'bg-gradient-to-r from-neon-purple/20 to-purple-500/20 hover:from-neon-purple/30 hover:to-purple-500/30 border-2 border-purple-400/50'\n                } backdrop-blur-sm px-6 py-3 text-base font-semibold rounded-xl shadow-lg transform hover:scale-105 transition-all duration-300 w-full min-[800px]:w-auto min-[800px]:min-w-[160px]`}\n                style={{\n                  boxShadow: '0 0 20px rgba(168, 85, 247, 0.4), 0 0 40px rgba(139, 69, 193, 0.2)'\n                }}\n              >\n                <Heart className={`w-5 h-5 mr-2 ${isFavorite ? 'fill-current' : ''}`} />\n                {isFavorite ? 'В избранном' : 'В избранное'}\n              </Button>\n            </div>\n\n            {/* Рейтинг звездочками - по центру */}\n            <div className=\"min-[800px]:order-2 max-[800px]:order-1 text-center max-[800px]:mb-10\">\n              <div className=\"flex justify-center space-x-2 mb-2\">\n                {[1, 2, 3, 4, 5].map((star) => (\n                  <Star\n                    key={star}\n                    className={`w-8 h-8 cursor-pointer transition-all duration-200 transform hover:scale-110 ${\n                      userRating >= star\n                        ? 'fill-yellow-400 text-yellow-400 drop-shadow-lg'\n                        : 'text-white/40 hover:text-yellow-300'\n                    }`}\n                    onClick={() => setUserRating(star)}\n                    style={{ \n                      filter: userRating >= star ? 'drop-shadow(0 0 8px rgba(250, 204, 21, 0.8))' : 'none'\n                    }}\n                  />\n                ))}\n              </div>\n              <div className=\"text-white/60 text-sm\">\n                {recipe.rating} ({recipe.reviewCount} отзывов)\n              </div>\n            </div>\n\n            {/* Кнопка \"Поделиться\" - справа на больших экранах */}\n            <div className=\"min-[800px]:order-3 max-[800px]:order-3 max-[800px]:w-[60%] max-[500px]:w-[80%] max-[800px]:mx-auto\">\n              <Button \n                className=\"bg-gradient-to-r from-neon-turquoise/20 to-electric/20 hover:from-neon-turquoise/30 hover:to-electric/30 backdrop-blur-sm border-2 border-cyan-400/50 px-6 py-3 text-base font-semibold rounded-xl shadow-lg transform hover:scale-105 transition-all duration-300 w-full min-[800px]:w-auto min-[800px]:min-w-[160px]\"\n                style={{\n                  boxShadow: '0 0 20px rgba(0, 255, 255, 0.4), 0 0 40px rgba(54, 152, 255, 0.2)'\n                }}\n              >\n                <Share2 className=\"w-5 h-5 mr-2\" />\n                Поделиться\n              </Button>\n            </div>\n          </div>\n          </div>\n        </section>\n\n        {/* Recommendations */}\n        <section>\n          <div className=\"bg-black/40 backdrop-blur-sm rounded-2xl p-6 border border-white/10\">\n            <h2 className=\"text-3xl font-bold text-white mb-6 text-center\">🧬 Если понравилось — попробуй ещё</h2>\n            <div className=\"grid md:grid-cols-2 gap-6\">\n              {recipe.recommendations.map((rec, index) => (\n                <div key={index} className=\"bg-white/5 rounded-xl p-6 border border-white/10 hover:bg-white/10 transition-all duration-200 cursor-pointer\">\n                  <img\n                    src={rec.image}\n                    alt={rec.name}\n                    className=\"w-full h-48 object-cover rounded-lg mb-4\"\n                  />\n                  <h3 className=\"text-white text-xl font-semibold mb-2\">{rec.name}</h3>\n                  <Button className=\"w-full bg-gradient-to-r from-purple-500 to-cyan-500 hover:from-purple-600 hover:to-cyan-600\">\n                    Открыть рецепт\n                  </Button>\n                </div>\n              ))}\n            </div>\n          </div>\n        </section>\n      </div>\n    </div>\n  );\n}","size_bytes":29380},"client/src/pages/auth.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Eye, EyeOff, Mail, Lock, Martini, ArrowLeft, User } from \"lucide-react\";\nimport { Link, useLocation } from \"wouter\";\nimport { handleGoogleLogin, handleGuestLogin } from \"@/lib/authUtils\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function Auth() {\n  const [isLogin, setIsLogin] = useState(true);\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [formData, setFormData] = useState({\n    email: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n    nickname: \"\"\n  });\n  const [errors, setErrors] = useState<{[key: string]: string}>({});\n  const [location, setLocation] = useLocation();\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n  const queryClient = useQueryClient();\n\n  // Check for authentication errors from URL params\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const error = urlParams.get('error');\n    \n    if (error === 'google_auth_failed') {\n      toast({\n        title: \"Ошибка аутентификации\",\n        description: \"Не удалось войти через Google. Попробуйте снова.\",\n        variant: \"destructive\",\n      });\n    } else if (error === 'google_oauth_not_configured') {\n      toast({\n        title: \"Google OAuth недоступен\",\n        description: \"Аутентификация через Google временно недоступна. Попробуйте войти как гость.\",\n        variant: \"destructive\",\n      });\n    }\n  }, [toast]);\n\n  // Redirect if already authenticated\n  useEffect(() => {\n    if (!isLoading && isAuthenticated) {\n      setLocation('/');\n    }\n  }, [isAuthenticated, isLoading, setLocation]);\n\n  const guestLoginMutation = useMutation({\n    mutationFn: handleGuestLogin,\n    onSuccess: () => {\n      toast({\n        title: \"Добро пожаловать!\",\n        description: \"Вы вошли как гость.\",\n      });\n      setLocation('/');\n    },\n    onError: () => {\n      toast({\n        title: \"Ошибка\",\n        description: \"Не удалось войти как гость. Попробуйте снова.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (data: { email: string; password: string; nickname: string }) => {\n      const response = await fetch('/api/auth/register', {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: { 'Content-Type': 'application/json' }\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Registration failed');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Регистрация успешна!\",\n        description: \"Добро пожаловать в Cocktailo Maker!\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/user'] });\n      setLocation('/');\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Ошибка регистрации\",\n        description: error.message || \"Не удалось создать аккаунт. Попробуйте снова.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: { email: string; password: string }) => {\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: { 'Content-Type': 'application/json' }\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Login failed');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Добро пожаловать!\",\n        description: \"Успешный вход в систему.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/user'] });\n      setLocation('/');\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Ошибка входа\",\n        description: error.message || \"Неверный email или пароль.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleInputChange = (field: string, value: string) => {\n    setFormData(prev => ({ ...prev, [field]: value }));\n    // Clear error when user starts typing\n    if (errors[field]) {\n      setErrors(prev => ({ ...prev, [field]: \"\" }));\n    }\n  };\n\n  const validateForm = () => {\n    const newErrors: {[key: string]: string} = {};\n    \n    if (!formData.email.trim()) {\n      newErrors.email = \"Введите email адрес\";\n    } else if (!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(formData.email)) {\n      newErrors.email = \"Введите корректный email адрес\";\n    }\n    \n    if (!formData.password.trim()) {\n      newErrors.password = \"Введите пароль\";\n    } else if (formData.password.length < 6) {\n      newErrors.password = \"Пароль должен содержать минимум 6 символов\";\n    }\n    \n    if (!isLogin) {\n      if (!formData.nickname.trim()) {\n        newErrors.nickname = \"Введите никнейм\";\n      } else if (formData.nickname.length < 2) {\n        newErrors.nickname = \"Никнейм должен содержать минимум 2 символа\";\n      } else if (formData.nickname.length > 50) {\n        newErrors.nickname = \"Никнейм не может быть длиннее 50 символов\";\n      }\n      \n      if (!formData.confirmPassword.trim()) {\n        newErrors.confirmPassword = \"Подтвердите пароль\";\n      } else if (formData.password !== formData.confirmPassword) {\n        newErrors.confirmPassword = \"Пароли не совпадают\";\n      }\n    }\n    \n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    \n    if (!validateForm()) return;\n    \n    if (isLogin) {\n      loginMutation.mutate({\n        email: formData.email,\n        password: formData.password\n      });\n    } else {\n      registerMutation.mutate({\n        email: formData.email,\n        password: formData.password,\n        nickname: formData.nickname\n      });\n    }\n  };\n\n  const handleGuestLoginClick = () => {\n    guestLoginMutation.mutate();\n  };\n\n  const handleGoogleLoginClick = () => {\n    handleGoogleLogin();\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-b from-[#0A0A0D] to-[#121212] relative overflow-hidden\">\n      {/* Background Image with Overlay */}\n      <div \n        className=\"absolute inset-0 bg-cover bg-center\"\n        style={{\n          backgroundImage: `url(/attached_assets/Flux_Dev_a_lush_3d_render_of_A_dark_ambient_bar_interior_at_ni_3_1752955194546.jpg)`,\n        }}\n      >\n        <div className=\"absolute inset-0 bg-black/55 backdrop-blur-[6px]\"></div>\n      </div>\n      {/* Floating Background Elements */}\n      <div className=\"absolute inset-0 opacity-20 pointer-events-none\">\n        <div className=\"absolute top-20 left-10 w-32 h-32 bg-neon-turquoise rounded-full blur-3xl animate-pulse\"></div>\n        <div className=\"absolute bottom-32 right-16 w-40 h-40 bg-neon-purple rounded-full blur-3xl animate-pulse\" style={{ animationDelay: '1s' }}></div>\n        <div className=\"absolute top-1/2 left-1/4 w-24 h-24 bg-pink-400 rounded-full blur-2xl animate-pulse\" style={{ animationDelay: '2s' }}></div>\n      </div>\n      {/* Back Button */}\n      <Link href=\"/\">\n        <Button \n          variant=\"ghost\" \n          className=\"absolute top-6 left-6 z-50 text-white/80 hover:text-white hover:bg-white/10 transition-all duration-300\"\n        >\n          <ArrowLeft className=\"mr-2 h-4 w-4\" />\n          На главную\n        </Button>\n      </Link>\n      {/* Main Content */}\n      <div className=\"relative z-10 flex min-h-screen pt-20 md:pt-0\">\n        {/* Left Side - Visual (Hidden on Mobile) */}\n        <div className=\"hidden md:flex md:w-1/2 items-center justify-center p-8\">\n          <div className=\"text-center max-w-md\">\n            {/* Futuristic Cocktail Glass Image with Title Inside */}\n            <div className=\"mx-auto relative py-8\">\n              <div className=\"relative group\">\n                {/* Title positioned inside container at top */}\n                <div className=\"absolute top-8 left-1/2 transform -translate-x-1/2 z-20 text-center w-full px-4\">\n                  <h1 \n                    className=\"font-bold text-center text-[38px] leading-tight bg-gradient-to-r from-cyan-300 via-purple-400 to-pink-400 bg-clip-text text-transparent\"\n                    style={{ \n                      fontFamily: 'Rubik, system-ui, sans-serif',\n                      fontWeight: '800',\n                      letterSpacing: '-0.02em',\n                      textShadow: '0 0 30px rgba(96, 165, 250, 0.6), 0 0 60px rgba(168, 85, 247, 0.4), 0 0 90px rgba(236, 72, 153, 0.3)',\n                      filter: 'drop-shadow(0 0 20px rgba(96, 165, 250, 0.5)) drop-shadow(0 0 40px rgba(168, 85, 247, 0.3))'\n                    }}\n                  >\n                    Добро пожаловать<br />\n                    <span className=\"text-[38px] font-black bg-gradient-to-r from-purple-300 via-cyan-300 to-purple-300 bg-clip-text text-transparent\" \n                          style={{\n                            textShadow: '0 0 40px rgba(96, 165, 250, 0.8), 0 0 80px rgba(168, 85, 247, 0.6), 0 0 120px rgba(236, 72, 153, 0.4)',\n                            filter: 'drop-shadow(0 0 25px rgba(96, 165, 250, 0.7)) drop-shadow(0 0 50px rgba(168, 85, 247, 0.5))',\n                            letterSpacing: '-0.01em'\n                          }}>\n                      в Cocktailo\n                    </span>\n                  </h1>\n                </div>\n                \n                <img \n                  src=\"/attached_assets/Flux_Dev_a_lush_3d_render_of_Stylized_futuristic_cocktail_glas_3 (1)-Photoroom_1752957568046.png\"\n                  alt=\"Футуристический коктейльный бокал с неоновыми оттенками\"\n                  className=\"w-80 h-auto object-contain mx-auto relative z-10 transition-all duration-700 group-hover:scale-105 pt-16 pb-8\"\n                  loading=\"eager\"\n                />\n                \n                {/* Спокойные динамические тени */}\n                <div className=\"absolute inset-0 -z-10\">\n                  {/* Основная мягкая тень */}\n                  <div \n                    className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-96 h-96 rounded-full blur-3xl animate-pulse opacity-30\"\n                    style={{\n                      background: 'radial-gradient(circle, rgba(192, 132, 252, 0.4) 0%, rgba(0, 255, 247, 0.3) 50%, rgba(255, 110, 199, 0.2) 100%)',\n                      animationDuration: '4s'\n                    }}\n                  ></div>\n                  \n                  {/* Вторичная тень */}\n                  <div \n                    className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-80 h-80 rounded-full blur-2xl animate-pulse opacity-20\"\n                    style={{\n                      background: 'radial-gradient(circle, rgba(0, 255, 247, 0.5) 0%, rgba(192, 132, 252, 0.4) 70%, transparent 100%)',\n                      animationDuration: '6s',\n                      animationDelay: '1s'\n                    }}\n                  ></div>\n                  \n                  {/* Третья мягкая тень */}\n                  <div \n                    className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-64 h-64 rounded-full blur-xl animate-pulse opacity-25\"\n                    style={{\n                      background: 'radial-gradient(circle, rgba(255, 110, 199, 0.4) 0%, rgba(179, 136, 235, 0.3) 60%, transparent 100%)',\n                      animationDuration: '8s',\n                      animationDelay: '2s'\n                    }}\n                  ></div>\n                  \n                  {/* Базовая тень под бокалом */}\n                  <div \n                    className=\"absolute bottom-8 left-1/2 transform -translate-x-1/2 w-32 h-8 rounded-full blur-lg opacity-40\"\n                    style={{\n                      background: 'radial-gradient(ellipse, rgba(0, 0, 0, 0.6) 0%, transparent 70%)'\n                    }}\n                  ></div>\n                </div>\n              </div>\n            </div>\n            \n            {/* Quote */}\n            <blockquote className=\"text-xl italic text-white/80 leading-relaxed -mt-4\" style={{ textShadow: '0 0 5px rgba(192, 132, 252, 0.3)' }}>\n              \"Каждый коктейль начинается с твоей идеи.\"\n            </blockquote>\n          </div>\n        </div>\n\n        {/* Right Side - Auth Form */}\n        <div className=\"w-full md:w-1/2 flex items-center justify-center p-6 md:p-12\">\n          <Card className=\"w-full max-w-md bg-black/20 backdrop-blur-lg border border-white/10 shadow-2xl\">\n            <CardContent className=\"p-8\">\n              {/* Toggle Tabs */}\n              <div className=\"flex mb-8 bg-white/5 rounded-lg p-1\">\n                <button\n                  type=\"button\"\n                  onClick={() => setIsLogin(true)}\n                  className={`flex-1 py-3 px-4 rounded-md font-semibold transition-all duration-300 ${\n                    isLogin\n                      ? 'bg-cyan-500/70 text-white shadow-lg shadow-cyan-500/20 border border-cyan-500/70'\n                      : 'text-white/70 hover:text-white hover:bg-white/5'\n                  }`}\n                >\n                  Вход\n                </button>\n                <button\n                  type=\"button\"\n                  onClick={() => setIsLogin(false)}\n                  className={`flex-1 py-3 px-4 rounded-md font-semibold transition-all duration-300 ${\n                    !isLogin\n                      ? 'bg-gradient-to-r from-neon-purple to-neon-pink text-black shadow-lg shadow-neon-purple/30 border border-neon-purple/50'\n                      : 'text-white/70 hover:text-white hover:bg-white/5'\n                  }`}\n                >\n                  Регистрация\n                </button>\n              </div>\n\n              {/* Auth Form */}\n              <form onSubmit={handleSubmit} className=\"space-y-6\">\n                {/* Email Field */}\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\" className=\"text-white/90 font-medium\">Email</Label>\n                  <div className=\"relative\">\n                    <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-white/50\" />\n                    <Input\n                      id=\"email\"\n                      type=\"email\"\n                      value={formData.email}\n                      onChange={(e) => handleInputChange('email', e.target.value)}\n                      placeholder=\"your@email.com\"\n                      className={`pl-12 bg-white/5 border-white/20 text-white placeholder:text-white/50 focus:border-neon-turquoise focus:ring-1 focus:ring-neon-turquoise transition-all duration-300 ${\n                        errors.email ? 'border-red-500 focus:border-red-400 focus:ring-red-400' : ''\n                      }`}\n                      style={{\n                        boxShadow: formData.email ? '0 0 5px rgba(0, 255, 247, 0.3)' : 'none'\n                      }}\n                    />\n                  </div>\n                  {errors.email && (\n                    <p className=\"text-red-400 text-sm\">{errors.email}</p>\n                  )}\n                </div>\n\n                {/* Nickname Field - Only for Registration */}\n                {!isLogin && (\n                  <div className=\"space-y-2\">\n                    <Label htmlFor=\"nickname\" className=\"text-white/90 font-medium\">Никнейм *</Label>\n                    <div className=\"relative\">\n                      <User className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-white/50\" />\n                      <Input\n                        id=\"nickname\"\n                        type=\"text\"\n                        value={formData.nickname}\n                        onChange={(e) => handleInputChange('nickname', e.target.value)}\n                        placeholder=\"Ваш никнейм\"\n                        className={`pl-12 bg-white/5 border-white/20 text-white placeholder:text-white/50 focus:border-neon-turquoise focus:ring-1 focus:ring-neon-turquoise transition-all duration-300 ${\n                          errors.nickname ? 'border-red-500 focus:border-red-400 focus:ring-red-400' : ''\n                        }`}\n                        style={{\n                          boxShadow: formData.nickname ? '0 0 5px rgba(0, 255, 247, 0.3)' : 'none'\n                        }}\n                      />\n                    </div>\n                    {errors.nickname && (\n                      <p className=\"text-red-400 text-sm\">{errors.nickname}</p>\n                    )}\n                  </div>\n                )}\n\n                {/* Password Field */}\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"password\" className=\"text-white/90 font-medium\">Пароль</Label>\n                  <div className=\"relative\">\n                    <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-white/50\" />\n                    <Input\n                      id=\"password\"\n                      type={showPassword ? \"text\" : \"password\"}\n                      value={formData.password}\n                      onChange={(e) => handleInputChange('password', e.target.value)}\n                      placeholder=\"••••••••\"\n                      className={`pl-12 pr-12 bg-white/5 border-white/20 text-white placeholder:text-white/50 focus:border-neon-turquoise focus:ring-1 focus:ring-neon-turquoise transition-all duration-300 font-mono ${\n                        errors.password ? 'border-red-500 focus:border-red-400 focus:ring-red-400' : ''\n                      }`}\n                    />\n                    <button\n                      type=\"button\"\n                      onClick={() => setShowPassword(!showPassword)}\n                      className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-white/50 hover:text-white transition-colors\"\n                    >\n                      {showPassword ? <EyeOff className=\"h-5 w-5\" /> : <Eye className=\"h-5 w-5\" />}\n                    </button>\n                  </div>\n                  {errors.password && (\n                    <p className=\"text-red-400 text-sm\">{errors.password}</p>\n                  )}\n                </div>\n\n                {/* Confirm Password Field (Registration Only) */}\n                {!isLogin && (\n                  <div className=\"space-y-2 animate-fade-in\">\n                    <Label htmlFor=\"confirmPassword\" className=\"text-white/90 font-medium\">Подтвердите пароль</Label>\n                    <div className=\"relative\">\n                      <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-5 w-5 text-white/50\" />\n                      <Input\n                        id=\"confirmPassword\"\n                        type={showConfirmPassword ? \"text\" : \"password\"}\n                        value={formData.confirmPassword}\n                        onChange={(e) => handleInputChange('confirmPassword', e.target.value)}\n                        placeholder=\"••••••••\"\n                        className={`pl-12 pr-12 bg-white/5 border-white/20 text-white placeholder:text-white/50 focus:border-neon-turquoise focus:ring-1 focus:ring-neon-turquoise transition-all duration-300 font-mono ${\n                          errors.confirmPassword ? 'border-red-500 focus:border-red-400 focus:ring-red-400' : ''\n                        }`}\n                      />\n                      <button\n                        type=\"button\"\n                        onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                        className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-white/50 hover:text-white transition-colors\"\n                      >\n                        {showConfirmPassword ? <EyeOff className=\"h-5 w-5\" /> : <Eye className=\"h-5 w-5\" />}\n                      </button>\n                    </div>\n                    {errors.confirmPassword && (\n                      <p className=\"text-red-400 text-sm\">{errors.confirmPassword}</p>\n                    )}\n                  </div>\n                )}\n\n                {/* Submit Button */}\n                <Button\n                  type=\"submit\"\n                  className=\"w-full bg-gradient-to-r from-neon-turquoise to-electric text-black font-semibold py-3 rounded-lg hover:scale-105 transition-all duration-300 shadow-lg shadow-neon-turquoise/30 hover:shadow-neon-turquoise/50\"\n                >\n                  <Martini className=\"mr-2 h-5 w-5\" />\n                  {isLogin ? 'Войти в Cocktailo' : 'Создать аккаунт'}\n                </Button>\n\n                {/* Forgot Password (Login Only) */}\n                {isLogin && (\n                  <div className=\"text-center\">\n                    <button\n                      type=\"button\"\n                      className=\"group relative text-sm font-medium text-cyan-400 hover:text-white transition-all duration-300 transform hover:scale-105\"\n                      style={{ \n                        textShadow: '0 0 8px rgba(34, 211, 238, 0.4)',\n                        transition: 'all 0.3s cubic-bezier(0.4, 0, 0.2, 1)'\n                      }}\n                      onMouseEnter={(e) => {\n                        (e.target as HTMLElement).style.textShadow = '0 0 15px rgba(34, 211, 238, 0.8), 0 0 25px rgba(34, 211, 238, 0.5)';\n                      }}\n                      onMouseLeave={(e) => {\n                        (e.target as HTMLElement).style.textShadow = '0 0 8px rgba(34, 211, 238, 0.4)';\n                      }}\n                    >\n                      <span className=\"relative z-10\">Забыли пароль?</span>\n                      <div className=\"absolute bottom-0 left-0 w-0 h-0.5 bg-gradient-to-r from-cyan-400 to-purple-400 group-hover:w-full transition-all duration-300\"></div>\n                    </button>\n                  </div>\n                )}\n\n                {/* Divider */}\n                <div className=\"relative my-6\">\n                  <div className=\"absolute inset-0 flex items-center\">\n                    <div className=\"w-full border-t border-white/20\"></div>\n                  </div>\n                  <div className=\"relative flex justify-center text-sm\">\n                    <span className=\"px-4 text-white/70\">или</span>\n                  </div>\n                </div>\n\n                {/* Alternative Login */}\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={handleGoogleLoginClick}\n                  className=\"w-full bg-transparent border border-white/30 text-white hover:bg-white/10 transition-all duration-300 shadow-md hover:shadow-lg\"\n                >\n                  <svg className=\"mr-2 h-5 w-5\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                    <path d=\"M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z\" fill=\"#4285F4\"/>\n                    <path d=\"M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z\" fill=\"#34A853\"/>\n                    <path d=\"M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z\" fill=\"#FBBC05\"/>\n                    <path d=\"M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z\" fill=\"#EA4335\"/>\n                  </svg>\n                  Войти через Google\n                </Button>\n\n                {/* Guest Login */}\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={handleGuestLoginClick}\n                  disabled={guestLoginMutation.isPending}\n                  className=\"w-full group relative bg-transparent border border-purple-400/30 text-purple-300 hover:bg-purple-500/10 hover:border-purple-400/60 hover:text-white transition-all duration-300 transform hover:scale-105 shadow-md hover:shadow-lg\"\n                  style={{ \n                    textShadow: '0 0 10px rgba(196, 181, 253, 0.4)',\n                    boxShadow: '0 0 15px rgba(196, 181, 253, 0.2)'\n                  }}\n                  onMouseEnter={(e) => {\n                    const target = e.target as HTMLElement;\n                    target.style.textShadow = '0 0 15px rgba(196, 181, 253, 0.8), 0 0 25px rgba(196, 181, 253, 0.5)';\n                    target.style.boxShadow = '0 0 25px rgba(196, 181, 253, 0.4), 0 0 40px rgba(196, 181, 253, 0.2)';\n                  }}\n                  onMouseLeave={(e) => {\n                    const target = e.target as HTMLElement;\n                    target.style.textShadow = '0 0 10px rgba(196, 181, 253, 0.4)';\n                    target.style.boxShadow = '0 0 15px rgba(196, 181, 253, 0.2)';\n                  }}\n                >\n                  <svg className=\"mr-2 h-4 w-4 opacity-70\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1\" />\n                  </svg>\n                  Войти как гость\n                  <div className=\"absolute inset-0 bg-gradient-to-r from-purple-500/0 via-purple-400/5 to-cyan-400/0 rounded-lg opacity-0 group-hover:opacity-100 transition-opacity duration-300\"></div>\n                </Button>\n              </form>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":26930},"client/src/pages/catalog.tsx":{"content":"import React, { useState, useEffect, useMemo, useCallback } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Search, Filter, Star, Heart, Clock, TrendingUp } from \"lucide-react\";\nimport { getCocktails, type CocktailData } from \"@/data/cocktails\";\nimport { Link } from \"wouter\";\n\n// Компонент карточки коктейля - мемоизирован для оптимизации\nconst CocktailCard = React.memo(({ \n  cocktail, \n  isFavorite, \n  onFavorite \n}: { \n  cocktail: CocktailData; \n  isFavorite: boolean;\n  onFavorite: (id: string, isFavorite: boolean) => void;\n}) => {\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case 'easy': return 'text-green-400';\n      case 'medium': return 'text-yellow-400';\n      case 'hard': return 'text-red-400';\n      default: return 'text-gray-400';\n    }\n  };\n\n  const getCategoryLabel = (category: string) => {\n    switch (category) {\n      case 'classic': return 'Классический';\n      case 'summer': return 'Летний';\n      case 'shot': return 'Шот';\n      case 'nonalcoholic': return 'Безалкогольный';\n      default: return category;\n    }\n  };\n\n  const getDifficultyLabel = (difficulty: string) => {\n    switch (difficulty) {\n      case 'easy': return 'Легкий';\n      case 'medium': return 'Средний';\n      case 'hard': return 'Сложный';\n      default: return difficulty;\n    }\n  };\n\n  return (\n    <Card className=\"cocktail-card group relative overflow-hidden glass-effect border-none shadow-xl transition-all duration-300 ease-out bg-gradient-to-b from-slate-800/50 to-slate-900/50 w-full max-w-sm mx-auto\">\n      {/* Фоновое изображение */}\n      <div className=\"absolute inset-0\">\n        <img \n          src={cocktail.image} \n          alt={cocktail.name}\n          className=\"cocktail-image w-full h-full object-cover transition-transform duration-300 ease-out\"\n          loading=\"lazy\"\n          decoding=\"async\"\n          style={{ contentVisibility: 'auto' }}\n        />\n        <div className=\"absolute inset-0 bg-gradient-to-t from-black/90 via-black/40 to-black/20 transition-all duration-300\" />\n      </div>\n\n      {/* Кнопка избранного */}\n      <Button\n        variant=\"ghost\"\n        size=\"sm\"\n        className=\"absolute top-3 right-3 z-10 h-8 w-8 p-0 bg-black/30 hover:bg-black/50 backdrop-blur-sm\"\n        onClick={() => onFavorite(cocktail.id, isFavorite)}\n      >\n        <Heart \n          className={`h-4 w-4 ${isFavorite ? 'fill-red-500 text-red-500' : 'text-white'}`} \n        />\n      </Button>\n\n      <CardContent className=\"relative z-10 p-0 h-[420px] sm:h-[400px] flex flex-col\">\n        {/* Заголовок и описание - более компактный */}\n        <div className=\"bg-black/60 backdrop-blur-sm p-3 text-center border-b border-white/10\">\n          <h3 className=\"text-white text-lg font-bold mb-1 drop-shadow-lg\">\n            {cocktail.name}\n          </h3>\n          <p className=\"text-white/90 text-xs italic line-clamp-1 drop-shadow-md\">\n            {cocktail.description}\n          </p>\n        </div>\n\n        {/* Теги */}\n        <div className=\"flex flex-wrap gap-2 p-2 min-h-[50px] items-start\">\n          <span className=\"px-3 py-1.5 rounded-full text-xs font-semibold bg-gray-800/90 text-neon-amber border border-neon-amber/60 shadow-lg backdrop-blur-sm\"\n            style={{\n              textShadow: '0 0 8px rgba(255, 193, 7, 0.8)',\n              boxShadow: '0 0 12px rgba(255, 193, 7, 0.3), inset 0 1px 0 rgba(255, 255, 255, 0.1)'\n            }}>\n            {getCategoryLabel(cocktail.category)}\n          </span>\n          <span className={`px-3 py-1.5 rounded-full text-xs font-semibold bg-gray-800/90 border border-white/30 shadow-lg backdrop-blur-sm ${getDifficultyColor(cocktail.difficulty)}`}\n            style={{\n              boxShadow: '0 0 12px rgba(255, 255, 255, 0.2), inset 0 1px 0 rgba(255, 255, 255, 0.1)'\n            }}>\n            {getDifficultyLabel(cocktail.difficulty)}\n          </span>\n        </div>\n\n        {/* Спейсер */}\n        <div className=\"flex-1\" />\n\n        {/* Статистика - без прозрачного фона и в новом формате */}\n        <div className=\"p-3 space-y-2\">\n          <div className=\"flex items-center text-sm\">\n            <span className=\"text-white/90 font-medium\">Крепость: <span className=\"text-neon-turquoise font-semibold\">{cocktail.abv}%</span></span>\n          </div>\n          <div className=\"flex items-center text-sm\">\n            <span className=\"text-white/90 font-medium\">Объем: <span className=\"text-neon-purple font-semibold\">{cocktail.volume}мл</span></span>\n          </div>\n          <div className=\"flex items-center text-sm\">\n            <span className=\"text-white/90 font-medium flex items-center\">\n              Рейтинг: <span className=\"text-white font-medium ml-1\">{cocktail.rating}</span>\n              <Star className=\"h-4 w-4 fill-yellow-400 text-yellow-400 mx-1\" />\n              <span className=\"text-white/60\">({cocktail.reviewCount})</span>\n            </span>\n          </div>\n          <div className=\"flex items-center text-sm\">\n            <span className=\"text-white/90 font-medium\">Стоимость: <span className=\"text-neon-amber font-semibold\">{cocktail.cost}₽</span></span>\n          </div>\n        </div>\n\n        {/* Кнопка просмотра */}\n        <div className=\"p-3 pt-2 flex justify-center\">\n          <Link href={`/recipe/${cocktail.id}`} className=\"w-3/5\">\n            <Button \n              className=\"recipe-button w-full text-white font-medium transition-all duration-500 text-sm py-2 rounded-lg shadow-lg relative overflow-hidden\"\n              style={{\n                background: 'linear-gradient(45deg, rgba(139, 69, 255, 0.9), rgba(0, 247, 239, 0.9), rgba(255, 20, 147, 0.9), rgba(139, 69, 255, 0.9))',\n                backgroundSize: '300% 300%',\n                animation: 'shimmer 3s ease-in-out infinite',\n                boxShadow: '0 4px 15px rgba(139, 69, 255, 0.4), 0 2px 8px rgba(0, 247, 239, 0.3)'\n              }}\n            >\n              <span className=\"relative z-10\">Открыть рецепт</span>\n              <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/20 to-transparent -skew-x-12 -translate-x-full group-hover:translate-x-full transition-transform duration-700\"></div>\n            </Button>\n          </Link>\n        </div>\n      </CardContent>\n    </Card>\n  );\n});\n\nexport default function Catalog() {\n  const { toast } = useToast();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const [selectedDifficulty, setSelectedDifficulty] = useState(\"all\");\n  const [displayedItems, setDisplayedItems] = useState(12);\n  const [userFavorites, setUserFavorites] = useState<Set<string>>(new Set());\n  const [filteredCocktails, setFilteredCocktails] = useState<CocktailData[]>([]);\n\n  const ITEMS_PER_LOAD = 12;\n\n  // Мемоизированные отфильтрованные коктейли для оптимизации\n  const filteredCocktailsData = useMemo(() => {\n    return getCocktails({\n      search: searchQuery,\n      category: selectedCategory === \"all\" ? undefined : selectedCategory,\n      difficulty: selectedDifficulty === \"all\" ? undefined : selectedDifficulty,\n    });\n  }, [searchQuery, selectedCategory, selectedDifficulty]);\n\n  // Обновляем состояние когда изменяются фильтры\n  useEffect(() => {\n    setFilteredCocktails(filteredCocktailsData);\n    setDisplayedItems(ITEMS_PER_LOAD);\n  }, [filteredCocktailsData]);\n\n  // Получаем отображаемые коктейли с учетом лимита - мемоизировано\n  const displayedCocktails = useMemo(() => {\n    return filteredCocktails.slice(0, displayedItems);\n  }, [filteredCocktails, displayedItems]);\n\n  const handleSearch = useCallback(() => {\n    // Поиск происходит автоматически через useMemo\n  }, []);\n\n  const handleLoadMore = useCallback(() => {\n    setDisplayedItems(prev => prev + ITEMS_PER_LOAD);\n  }, []);\n\n  const handleFavorite = useCallback((cocktailId: string, isFavorite: boolean) => {\n    const newFavorites = new Set(userFavorites);\n    if (isFavorite) {\n      newFavorites.delete(cocktailId);\n    } else {\n      newFavorites.add(cocktailId);\n    }\n    setUserFavorites(newFavorites);\n    \n    toast({\n      title: isFavorite ? \"Удалено из избранного\" : \"Добавлено в избранное\",\n      description: isFavorite ? \"Рецепт удален из избранного\" : \"Рецепт добавлен в избранное\",\n    });\n  }, [userFavorites, toast]);\n\n  return (\n    <div className=\"min-h-screen bg-night-blue text-ice-white\">\n      <Header />\n      \n      <section className=\"pt-32 pb-16 bg-gradient-to-b from-night-blue to-charcoal\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-4xl md:text-5xl font-bold mb-4 bg-gradient-to-r from-neon-amber via-yellow-400 to-neon-amber bg-clip-text text-transparent\" \n                style={{ textShadow: '0 0 20px rgba(255, 193, 7, 0.5), 0 0 40px rgba(255, 193, 7, 0.3)' }}>\n              Каталог Рецептов\n            </h2>\n            <p className=\"text-lg md:text-xl text-cream max-w-2xl mx-auto\">\n              Откройте для себя тысячи проверенных рецептов от профессиональных барменов\n            </p>\n          </div>\n\n          {/* Search and Filters */}\n          <Card className=\"glass-effect border-none mb-8\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex flex-col gap-4\">\n                <div className=\"w-full\">\n                  <div className=\"relative\">\n                    <Search className=\"absolute left-3 top-3 h-4 w-4 text-gray-400\" />\n                    <Input\n                      placeholder=\"Поиск коктейлей...\"\n                      value={searchQuery}\n                      onChange={(e) => setSearchQuery(e.target.value)}\n                      onKeyPress={(e) => e.key === 'Enter' && handleSearch()}\n                      className=\"pl-10 bg-night-blue border-gray-600 focus:border-neon-turquoise\"\n                    />\n                  </div>\n                </div>\n                \n                <div className=\"flex gap-2 sm:gap-3\">\n                  <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                    <SelectTrigger className=\"flex-1 min-w-0 bg-night-blue border-gray-600 focus:border-neon-turquoise\">\n                      <SelectValue placeholder=\"Все категории\" />\n                    </SelectTrigger>\n                    <SelectContent className=\"bg-night-blue border-gray-600\">\n                      <SelectItem value=\"all\">Все категории</SelectItem>\n                      <SelectItem value=\"classic\">Классические</SelectItem>\n                      <SelectItem value=\"summer\">Летние</SelectItem>\n                      <SelectItem value=\"shot\">Шоты</SelectItem>\n                      <SelectItem value=\"nonalcoholic\">Безалкогольные</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  \n                  <Select value={selectedDifficulty} onValueChange={setSelectedDifficulty}>\n                    <SelectTrigger className=\"flex-1 min-w-0 bg-night-blue border-gray-600 focus:border-neon-turquoise\">\n                      <SelectValue placeholder=\"Любая сложность\" />\n                    </SelectTrigger>\n                    <SelectContent className=\"bg-night-blue border-gray-600\">\n                      <SelectItem value=\"all\">Любая сложность</SelectItem>\n                      <SelectItem value=\"easy\">Легкая</SelectItem>\n                      <SelectItem value=\"medium\">Средняя</SelectItem>\n                      <SelectItem value=\"hard\">Сложная</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n                \n                <div className=\"flex justify-center\">\n                  <Button\n                    onClick={handleSearch}\n                    className=\"bg-neon-turquoise text-night-blue hover:bg-neon-turquoise/90 px-8 py-3 text-lg font-semibold rounded-xl shadow-lg\"\n                    style={{\n                      boxShadow: '0 0 15px rgba(0, 247, 239, 0.4), 0 0 30px rgba(0, 247, 239, 0.2), 0 8px 20px rgba(0, 0, 0, 0.3)'\n                    }}\n                  >\n                    <Filter className=\"mr-2 h-5 w-5\" />\n                    Поиск\n                  </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Cocktails Grid */}\n          {filteredCocktails.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <p className=\"text-gray-400 text-lg\">Рецепты не найдены</p>\n              <p className=\"text-gray-500 mt-2\">Попробуйте изменить параметры поиска</p>\n            </div>\n          ) : (\n            <>\n              {/* Адаптивная сетка: 1 на мобильных, 2 на планшетах, 3 на десктопе */}\n              <div \n                className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 sm:gap-6 justify-items-center\"\n                style={{ containIntrinsicSize: '300px 400px', contentVisibility: 'auto' }}\n              >\n                {displayedCocktails.map((cocktail) => (\n                  <CocktailCard\n                    key={cocktail.id}\n                    cocktail={cocktail}\n                    onFavorite={handleFavorite}\n                    isFavorite={userFavorites.has(cocktail.id)}\n                  />\n                ))}\n              </div>\n\n              {/* Load More Button */}\n              {displayedItems < filteredCocktails.length && (\n                <div className=\"text-center mt-12\">\n                  <Button\n                    onClick={handleLoadMore}\n                    className=\"glow-button bg-neon-purple text-night-blue px-8 py-3 hover:bg-neon-purple/90 font-semibold rounded-xl shadow-lg\"\n                    style={{\n                      boxShadow: '0 0 15px rgba(139, 69, 255, 0.4), 0 0 30px rgba(139, 69, 255, 0.2), 0 8px 20px rgba(0, 0, 0, 0.3)'\n                    }}\n                  >\n                    <TrendingUp className=\"mr-2 h-4 w-4\" />\n                    Показать еще ({filteredCocktails.length - displayedItems} осталось)\n                  </Button>\n                </div>\n              )}\n            </>\n          )}\n        </div>\n      </section>\n      \n      <Footer />\n    </div>\n  );\n}","size_bytes":15437},"client/src/pages/constructor.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { CompactGlassSelector } from \"@/components/cocktail/compact-glass-selector\";\nimport IngredientSelector from \"@/components/cocktail/ingredient-selector\";\nimport IngredientRecommendations from \"@/components/cocktail/ingredient-recommendations\";\nimport DrinkVisualizer from \"@/components/cocktail/drink-visualizer\";\nimport { CocktailMetrics } from \"@/components/cocktail/cocktail-metrics\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Save, RotateCcw, Share2, AlertCircle } from \"lucide-react\";\nimport { useCocktailStore } from \"@/store/cocktail-store\";\nimport { generateCocktailName, validateCocktailIngredients, calculateCocktailStats } from \"@/lib/cocktail-utils\";\nimport { useState } from \"react\";\n\nexport default function Constructor() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [showSaveDialog, setShowSaveDialog] = useState(false);\n  const [recipeName, setRecipeName] = useState(\"\");\n  const [recipeDescription, setRecipeDescription] = useState(\"\");\n\n  const {\n    selectedGlass,\n    ingredients,\n    cocktailStats,\n    clearIngredients,\n    recalculateStats\n  } = useCocktailStore();\n  \n  const currentStats = calculateCocktailStats(ingredients);\n\n  const saveRecipeMutation = useMutation({\n    mutationFn: async (recipeData: any) => {\n      return await apiRequest(\"POST\", \"/api/recipes\", recipeData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Рецепт сохранен\",\n        description: \"Ваш коктейль успешно сохранен в каталог\",\n      });\n      setShowSaveDialog(false);\n      queryClient.invalidateQueries({ queryKey: [\"/api/recipes\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Ошибка сохранения\",\n        description: \"Не удалось сохранить рецепт. Попробуйте еще раз.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSaveRecipe = () => {\n    const validationErrors = validateCocktailIngredients(ingredients);\n    if (validationErrors.length > 0) {\n      toast({\n        title: \"Ошибка валидации\",\n        description: validationErrors.join(\", \"),\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    if (!selectedGlass) {\n      toast({\n        title: \"Выберите стакан\",\n        description: \"Для сохранения рецепта необходимо выбрать тип стакана\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    const defaultName = recipeName || generateCocktailName();\n    setRecipeName(defaultName);\n    setShowSaveDialog(true);\n  };\n\n  const handleConfirmSave = () => {\n    const recipeData = {\n      name: recipeName,\n      description: recipeDescription,\n      glassTypeId: selectedGlass?.id,\n      totalVolume: currentStats.totalVolume,\n      totalAbv: currentStats.totalAbv,\n      totalCost: currentStats.totalCost,\n      tasteBalance: currentStats.tasteBalance,\n      category: \"custom\",\n      difficulty: \"easy\",\n      isPublic: true,\n      ingredients: ingredients.map((item, index) => ({\n        ingredientId: item.ingredient.id,\n        amount: parseFloat(item.amount.toString()),\n        unit: item.unit,\n        order: index + 1\n      }))\n    };\n\n    saveRecipeMutation.mutate(recipeData);\n  };\n\n  const handleReset = () => {\n    clearIngredients();\n    setRecipeName(\"\");\n    setRecipeDescription(\"\");\n    toast({\n      title: \"Конструктор очищен\",\n      description: \"Все ингредиенты удалены. Можете начать заново.\",\n    });\n  };\n\n  const handleShare = async () => {\n    const shareData = {\n      title: recipeName || \"Мой коктейль\",\n      text: `Попробуйте этот коктейль: ${currentStats.totalVolume}ml, ${currentStats.totalAbv}% ABV`,\n      url: window.location.href\n    };\n\n    if (navigator.share) {\n      try {\n        await navigator.share(shareData);\n      } catch (err) {\n        // User cancelled share\n      }\n    } else {\n      // Fallback - copy to clipboard\n      navigator.clipboard.writeText(window.location.href);\n      toast({\n        title: \"Ссылка скопирована\",\n        description: \"Ссылка на конструктор скопирована в буфер обмена\",\n      });\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      <Header />\n      \n      <section className=\"pt-32 pb-16 bg-gradient-to-br from-purple-950 via-purple-900 to-blue-950\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-16\">\n            <h2 \n              className=\"text-4xl font-bold mb-4 text-white drop-shadow-lg shadow-black\" \n              style={{textShadow: '0 6px 12px rgba(0, 0, 0, 0.8), 0 12px 24px rgba(0, 0, 0, 0.6), 0 0 40px rgba(255, 255, 255, 0.1)'}}\n            >\n              Конструктор Коктейлей\n            </h2>\n            <p className=\"text-xl text-zinc max-w-2xl mx-auto\">\n              Создавайте уникальные напитки слой за слоем с автоматическим расчетом параметров\n            </p>\n          </div>\n\n          <div className=\"grid lg:grid-cols-12 gap-6 min-h-[600px]\">\n            {/* Left Sidebar - Expanded by 15% */}\n            <div className=\"lg:col-span-3 flex flex-col\">\n              <div className=\"bg-card border border-border rounded-lg p-6 flex-1\">\n                <IngredientRecommendations />\n              </div>\n            </div>\n\n            {/* Center Content - Reduced by 15% */}\n            <div className=\"lg:col-span-6 flex flex-col space-y-6\">\n              {/* Glass Selector or Drink Visualizer */}\n              <div className=\"bg-card border border-border rounded-lg p-8 flex-1\">\n                {!selectedGlass ? (\n                  <CompactGlassSelector />\n                ) : (\n                  <DrinkVisualizer />\n                )}\n              </div>\n              \n              {/* Small Recommendations Container */}\n              <div className=\"bg-card border border-border rounded-lg p-4 h-32\">\n                <h4 className=\"text-sm font-semibold text-foreground mb-2\">Быстрые советы</h4>\n                <p className=\"text-xs text-muted-foreground\">\n                  {ingredients.length === 0 \n                    ? \"Добавьте ингредиенты из левого меню для получения советов\"\n                    : \"Рецепт выглядит сбалансированно! Попробуйте добавить лед для охлаждения.\"\n                  }\n                </p>\n              </div>\n            </div>\n\n            {/* Right Sidebar - Expanded by 15% */}\n            <div className=\"lg:col-span-3 flex flex-col space-y-6\">\n              {/* Cocktail Metrics */}\n              <div className=\"bg-card border border-border rounded-lg p-4 flex-1\">\n                <CocktailMetrics />\n              </div>\n              \n              {/* Added Ingredients */}\n              <div className=\"bg-card border border-border rounded-lg p-4 flex-1\">\n                <IngredientSelector />\n              </div>\n            </div>\n          </div>\n\n          {/* Validation Warnings */}\n          {ingredients.length > 0 && (\n            <div className=\"mt-8\">\n              <Card className=\"glass-effect border-none\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center space-x-2 mb-4\">\n                    <AlertCircle className=\"h-5 w-5 text-amber-500\" />\n                    <h3 className=\"text-lg font-semibold text-amber-500\">Анализ рецепта</h3>\n                  </div>\n                  <div className=\"space-y-2\">\n                    {validateCocktailIngredients(ingredients).map((error, index) => (\n                      <p key={index} className=\"text-yellow-400 text-sm\">• {error}</p>\n                    ))}\n                    {validateCocktailIngredients(ingredients).length === 0 && (\n                      <p className=\"text-green-400 text-sm\">✓ Рецепт готов к сохранению</p>\n                    )}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          )}\n\n          {/* Action Buttons */}\n          <div className=\"mt-8 text-center\">\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Button\n                onClick={handleSaveRecipe}\n                disabled={ingredients.length === 0 || !selectedGlass || saveRecipeMutation.isPending}\n                className=\"bg-primary text-primary-foreground px-8 py-3 hover:bg-primary/90\"\n              >\n                <Save className=\"mr-2 h-4 w-4\" />\n                {saveRecipeMutation.isPending ? \"Сохранение...\" : \"Сохранить рецепт\"}\n              </Button>\n              \n              <Button\n                onClick={handleReset}\n                variant=\"outline\"\n                className=\"px-8 py-3\"\n              >\n                <RotateCcw className=\"mr-2 h-4 w-4\" />\n                Начать заново\n              </Button>\n              \n              <Button\n                onClick={handleShare}\n                variant=\"outline\"\n                className=\"px-8 py-3\"\n              >\n                <Share2 className=\"mr-2 h-4 w-4\" />\n                Поделиться\n              </Button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Save Recipe Dialog */}\n      <Dialog open={showSaveDialog} onOpenChange={setShowSaveDialog}>\n        <DialogContent className=\"bg-card border-border\">\n          <DialogHeader>\n            <DialogTitle className=\"text-foreground\">Сохранить рецепт</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"recipe-name\" className=\"text-foreground\">Название коктейля</Label>\n              <Input\n                id=\"recipe-name\"\n                value={recipeName}\n                onChange={(e) => setRecipeName(e.target.value)}\n                placeholder=\"Введите название...\"\n                className=\"bg-input border-border\"\n              />\n            </div>\n            <div>\n              <Label htmlFor=\"recipe-description\" className=\"text-foreground\">Описание (необязательно)</Label>\n              <Textarea\n                id=\"recipe-description\"\n                value={recipeDescription}\n                onChange={(e) => setRecipeDescription(e.target.value)}\n                placeholder=\"Опишите вкус и особенности коктейля...\"\n                className=\"bg-input border-border\"\n                rows={3}\n              />\n            </div>\n            <div className=\"flex justify-end space-x-2\">\n              <Button\n                variant=\"outline\"\n                onClick={() => setShowSaveDialog(false)}\n                className=\"border-gray-600 text-cream hover:bg-gray-700\"\n              >\n                Отмена\n              </Button>\n              <Button\n                onClick={handleConfirmSave}\n                disabled={!recipeName.trim() || saveRecipeMutation.isPending}\n                className=\"bg-neon-turquoise text-night-blue hover:bg-neon-turquoise/90\"\n              >\n                {saveRecipeMutation.isPending ? \"Сохранение...\" : \"Сохранить\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n      \n      <Footer />\n    </div>\n  );\n}\n","size_bytes":12322},"client/src/pages/generator.tsx":{"content":"import { useState } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dice2, Crown, Bolt, Sun, Leaf, Flame, Save, Edit, Sparkles } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\ninterface GeneratedRecipe {\n  name: string;\n  description: string;\n  glass: {\n    name: string;\n    capacity: number;\n    shape: string;\n  };\n  ingredients: {\n    ingredient: {\n      id: number;\n      name: string;\n      color: string;\n      abv: number;\n      pricePerLiter: number;\n    };\n    amount: number;\n    unit: string;\n    order: number;\n  }[];\n  totalVolume: number;\n  category: string;\n}\n\nconst GENERATION_MODES = [\n  { \n    id: 'classic', \n    label: 'Классический', \n    icon: Crown, \n    color: 'bg-neon-purple',\n    description: 'Проверенные временем рецепты'\n  },\n  { \n    id: 'crazy', \n    label: 'Сумасшедший', \n    icon: Bolt, \n    color: 'bg-neon-pink',\n    description: 'Экспериментальные сочетания'\n  },\n  { \n    id: 'summer', \n    label: 'Летний', \n    icon: Sun, \n    color: 'bg-neon-amber',\n    description: 'Освежающие напитки'\n  },\n  { \n    id: 'nonalcoholic', \n    label: 'Безалкогольный', \n    icon: Leaf, \n    color: 'bg-green-500',\n    description: 'Для всех возрастов'\n  },\n  { \n    id: 'shot', \n    label: 'Шот', \n    icon: Flame, \n    color: 'bg-red-500',\n    description: 'Крепкие и быстрые'\n  }\n];\n\nexport default function Generator() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedMode, setSelectedMode] = useState('classic');\n  const [generatedRecipe, setGeneratedRecipe] = useState<GeneratedRecipe | null>(null);\n  const [isGenerating, setIsGenerating] = useState(false);\n\n  const generateRecipeMutation = useMutation({\n    mutationFn: async (mode: string) => {\n      const response = await apiRequest(\"POST\", \"/api/recipes/generate\", { mode });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setGeneratedRecipe(data);\n      setIsGenerating(false);\n      toast({\n        title: \"Рецепт создан!\",\n        description: `Попробуйте ${data.name}`,\n      });\n    },\n    onError: (error) => {\n      setIsGenerating(false);\n      toast({\n        title: \"Ошибка генерации\",\n        description: \"Не удалось создать рецепт. Попробуйте еще раз.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const saveRecipeMutation = useMutation({\n    mutationFn: async (recipeData: any) => {\n      return await apiRequest(\"POST\", \"/api/recipes\", recipeData);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Рецепт сохранен\",\n        description: \"Созданный коктейль добавлен в ваш профиль\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/recipes\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\", user?.id, \"recipes\"] });\n    },\n    onError: (error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Ошибка авторизации\",\n          description: \"Выполняется перенаправление на страницу входа...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Ошибка сохранения\",\n        description: \"Не удалось сохранить рецепт. Попробуйте еще раз.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleGenerate = () => {\n    setIsGenerating(true);\n    generateRecipeMutation.mutate(selectedMode);\n  };\n\n  const handleSaveGenerated = () => {\n    if (!generatedRecipe) return;\n\n    // Calculate stats\n    const totalVolume = generatedRecipe.ingredients.reduce((sum, item) => sum + item.amount, 0);\n    const totalAlcohol = generatedRecipe.ingredients.reduce((sum, item) => {\n      return sum + (item.amount * (item.ingredient.abv / 100));\n    }, 0);\n    const totalAbv = totalVolume > 0 ? (totalAlcohol / totalVolume) * 100 : 0;\n    const totalCost = generatedRecipe.ingredients.reduce((sum, item) => {\n      return sum + (item.amount / 1000) * item.ingredient.pricePerLiter;\n    }, 0);\n\n    const recipeData = {\n      name: generatedRecipe.name,\n      description: generatedRecipe.description,\n      glassTypeId: 1, // Default glass type\n      totalVolume,\n      totalAbv,\n      totalCost,\n      tasteBalance: { sweet: 5, sour: 5, bitter: 5, alcohol: Math.min(10, totalAbv / 5) },\n      category: generatedRecipe.category,\n      difficulty: \"easy\",\n      isPublic: true,\n      ingredients: generatedRecipe.ingredients.map((item) => ({\n        ingredientId: item.ingredient.id,\n        amount: item.amount,\n        unit: item.unit,\n        order: item.order\n      }))\n    };\n\n    saveRecipeMutation.mutate(recipeData);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-night-blue text-ice-white\">\n      <Header />\n      \n      <section className=\"pt-20 pb-16 bg-gradient-to-b from-graphite to-night-blue\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-4xl font-bold mb-4 text-neon-purple\">\n              <Dice2 className=\"inline mr-3 h-10 w-10\" />\n              Генератор Рецептов\n            </h2>\n            <p className=\"text-xl text-cream max-w-2xl mx-auto\">\n              Позвольте искусственному интеллекту создать для вас уникальный коктейль\n            </p>\n          </div>\n\n          <div className=\"max-w-4xl mx-auto\">\n            {/* Generation Modes */}\n            <Card className=\"glass-effect border-none mb-8\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"text-2xl font-semibold mb-4 text-neon-turquoise\">Режим генерации</h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n                  {GENERATION_MODES.map((mode) => {\n                    const IconComponent = mode.icon;\n                    return (\n                      <Button\n                        key={mode.id}\n                        variant={selectedMode === mode.id ? \"default\" : \"outline\"}\n                        className={`h-auto flex flex-col items-center space-y-2 p-4 ${\n                          selectedMode === mode.id \n                            ? `${mode.color} text-night-blue` \n                            : 'border-gray-600 hover:border-neon-turquoise'\n                        }`}\n                        onClick={() => setSelectedMode(mode.id)}\n                      >\n                        <IconComponent className=\"h-6 w-6\" />\n                        <div className=\"text-center\">\n                          <p className=\"font-semibold\">{mode.label}</p>\n                          <p className=\"text-xs opacity-80\">{mode.description}</p>\n                        </div>\n                      </Button>\n                    );\n                  })}\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Generate Button */}\n            <div className=\"text-center mb-8\">\n              <Button\n                onClick={handleGenerate}\n                disabled={isGenerating || generateRecipeMutation.isPending}\n                className=\"glow-button bg-gradient-to-r from-neon-purple to-neon-pink text-night-blue px-12 py-4 text-xl hover:scale-105 transition-all\"\n              >\n                <Sparkles className=\"mr-3 h-6 w-6\" />\n                {isGenerating ? \"Создание...\" : \"Создать напиток\"}\n              </Button>\n            </div>\n\n            {/* Generated Recipe */}\n            {generatedRecipe && (\n              <Card className=\"glass-effect border-none\">\n                <CardContent className=\"p-8\">\n                  <div className=\"text-center mb-6\">\n                    <h3 className=\"text-3xl font-bold text-neon-amber mb-2\">\n                      {generatedRecipe.name}\n                    </h3>\n                    <p className=\"text-cream\">{generatedRecipe.description}</p>\n                    <div className=\"mt-4\">\n                      <Badge className=\"bg-neon-turquoise text-night-blue\">\n                        {generatedRecipe.category}\n                      </Badge>\n                    </div>\n                  </div>\n\n                  <div className=\"grid md:grid-cols-2 gap-8\">\n                    {/* Recipe Visual */}\n                    <div className=\"text-center\">\n                      <div className=\"flex justify-center mb-4\">\n                        <div className=\"relative w-32 h-48 bg-gradient-to-b from-transparent to-gray-800 rounded-t-lg border-2 border-neon-amber overflow-hidden\"\n                             style={{ clipPath: 'polygon(20% 0%, 80% 0%, 85% 100%, 15% 100%)' }}>\n                          {generatedRecipe.ingredients.map((item, index) => {\n                            const totalVolume = generatedRecipe.ingredients.reduce((sum, i) => sum + i.amount, 0);\n                            const layerHeight = (item.amount / totalVolume) * 150; // 150px max height\n                            const bottom = generatedRecipe.ingredients.slice(0, index).reduce((sum, i) => {\n                              return sum + (i.amount / totalVolume) * 150;\n                            }, 0);\n                            \n                            return (\n                              <div\n                                key={index}\n                                className=\"absolute left-0 right-0 liquid-layer opacity-90\"\n                                style={{\n                                  height: `${layerHeight}px`,\n                                  bottom: `${bottom}px`,\n                                  background: `linear-gradient(to top, ${item.ingredient.color}, ${item.ingredient.color}dd)`,\n                                }}\n                              />\n                            );\n                          })}\n                        </div>\n                      </div>\n                      \n                      <div className=\"grid grid-cols-3 gap-4 text-center\">\n                        <div>\n                          <div className=\"text-lg font-bold text-neon-turquoise\">\n                            {generatedRecipe.totalVolume}ml\n                          </div>\n                          <div className=\"text-sm text-cream\">Объем</div>\n                        </div>\n                        <div>\n                          <div className=\"text-lg font-bold text-neon-amber\">\n                            {generatedRecipe.glass.name}\n                          </div>\n                          <div className=\"text-sm text-cream\">Стакан</div>\n                        </div>\n                        <div>\n                          <div className=\"text-lg font-bold text-neon-pink\">\n                            {generatedRecipe.ingredients.reduce((sum, item) => {\n                              return sum + (item.amount / 1000) * item.ingredient.pricePerLiter;\n                            }, 0).toFixed(0)}₽\n                          </div>\n                          <div className=\"text-sm text-cream\">Стоимость</div>\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Recipe Details */}\n                    <div>\n                      <h4 className=\"text-xl font-semibold mb-4 text-neon-turquoise\">Ингредиенты:</h4>\n                      <div className=\"space-y-3 mb-6\">\n                        {generatedRecipe.ingredients.map((item, index) => (\n                          <div key={index} className=\"flex justify-between items-center\">\n                            <div className=\"flex items-center space-x-2\">\n                              <div \n                                className=\"w-3 h-3 rounded-full\"\n                                style={{ backgroundColor: item.ingredient.color }}\n                              />\n                              <span className=\"text-cream\">{item.ingredient.name}</span>\n                            </div>\n                            <span className=\"text-neon-amber font-semibold\">\n                              {item.amount}{item.unit}\n                            </span>\n                          </div>\n                        ))}\n                      </div>\n                      \n                      <div className=\"flex gap-4\">\n                        <Button\n                          onClick={handleSaveGenerated}\n                          disabled={saveRecipeMutation.isPending}\n                          className=\"glow-button bg-neon-turquoise text-night-blue px-6 py-2 flex-1 hover:bg-neon-turquoise/90\"\n                        >\n                          <Save className=\"mr-2 h-4 w-4\" />\n                          {saveRecipeMutation.isPending ? \"Сохранение...\" : \"Сохранить\"}\n                        </Button>\n                        <Link href=\"/constructor\">\n                          <Button\n                            variant=\"outline\"\n                            className=\"neon-border bg-transparent text-neon-purple px-6 py-2 flex-1 hover:bg-neon-purple hover:text-night-blue\"\n                          >\n                            <Edit className=\"mr-2 h-4 w-4\" />\n                            Редактировать\n                          </Button>\n                        </Link>\n                      </div>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </div>\n      </section>\n      \n      <Footer />\n    </div>\n  );\n}\n","size_bytes":14281},"client/src/pages/home.tsx":{"content":"import { useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Martini, WandSparkles, Dice2, BookOpen, TrendingUp, Star, Clock } from \"lucide-react\";\nimport { Link } from \"wouter\";\n\nexport default function Home() {\n  const { toast } = useToast();\n  const { isAuthenticated, isLoading } = useAuth();\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      toast({\n        title: \"Необходима авторизация\",\n        description: \"Выполняется перенаправление на страницу входа...\",\n        variant: \"destructive\",\n      });\n      setTimeout(() => {\n        window.location.href = \"/api/login\";\n      }, 500);\n      return;\n    }\n  }, [isAuthenticated, isLoading, toast]);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-night-blue flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-neon-turquoise\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-night-blue text-ice-white\">\n      <Header />\n      \n      {/* Hero Section */}\n      <section className=\"pt-20 pb-12 relative overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-night-blue via-graphite to-charcoal\"></div>\n        <div className=\"absolute inset-0 opacity-30\">\n          <div className=\"absolute top-20 left-10 w-64 h-64 bg-neon-purple rounded-full blur-3xl animate-pulse-slow\"></div>\n          <div className=\"absolute bottom-20 right-10 w-80 h-80 bg-neon-turquoise rounded-full blur-3xl animate-pulse-slow\"></div>\n        </div>\n        \n        <div className=\"container mx-auto px-4 relative z-10\">\n          <div className=\"text-center py-20\">\n            <h1 className=\"text-5xl md:text-7xl font-bold mb-6 bg-gradient-to-r from-neon-turquoise to-neon-purple bg-clip-text text-transparent animate-float\">\n              Создай свой идеальный коктейль\n            </h1>\n            <p className=\"text-xl md:text-2xl text-cream mb-8 max-w-3xl mx-auto\">\n              Интерактивный конструктор напитков с реалистичной визуализацией, расчетом крепости и стоимости\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n              <Link href=\"/constructor\">\n                <Button className=\"glow-button bg-neon-turquoise text-night-blue px-8 py-4 text-lg hover:bg-neon-turquoise/90\">\n                  <WandSparkles className=\"mr-2 h-5 w-5\" />\n                  Начать создание\n                </Button>\n              </Link>\n              <Link href=\"/generator\">\n                <Button \n                  variant=\"outline\"\n                  className=\"neon-border bg-transparent text-neon-turquoise px-8 py-4 text-lg hover:bg-neon-turquoise hover:text-night-blue\"\n                >\n                  <Dice2 className=\"mr-2 h-5 w-5\" />\n                  Случайный рецепт\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Quick Actions */}\n      <section className=\"py-16 bg-gradient-to-b from-charcoal to-graphite\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-4xl font-bold mb-4 text-neon-amber\">Быстрые действия</h2>\n            <p className=\"text-xl text-cream max-w-2xl mx-auto\">\n              Выберите, что вы хотите сделать прямо сейчас\n            </p>\n          </div>\n          \n          <div className=\"grid md:grid-cols-4 gap-6\">\n            <Link href=\"/constructor\">\n              <Card className=\"glass-effect border-none hover:scale-105 transition-transform cursor-pointer\">\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"w-16 h-16 bg-neon-turquoise rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <Martini className=\"text-night-blue text-2xl\" />\n                  </div>\n                  <h3 className=\"text-xl font-bold text-neon-turquoise mb-2\">Конструктор</h3>\n                  <p className=\"text-cream text-sm\">\n                    Создайте коктейль с нуля\n                  </p>\n                </CardContent>\n              </Card>\n            </Link>\n            \n            <Link href=\"/generator\">\n              <Card className=\"glass-effect border-none hover:scale-105 transition-transform cursor-pointer\">\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"w-16 h-16 bg-neon-purple rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <Dice2 className=\"text-night-blue text-2xl\" />\n                  </div>\n                  <h3 className=\"text-xl font-bold text-neon-purple mb-2\">Генератор</h3>\n                  <p className=\"text-cream text-sm\">\n                    Случайный рецепт\n                  </p>\n                </CardContent>\n              </Card>\n            </Link>\n            \n            <Link href=\"/catalog\">\n              <Card className=\"glass-effect border-none hover:scale-105 transition-transform cursor-pointer\">\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"w-16 h-16 bg-neon-amber rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <BookOpen className=\"text-night-blue text-2xl\" />\n                  </div>\n                  <h3 className=\"text-xl font-bold text-neon-amber mb-2\">Каталог</h3>\n                  <p className=\"text-cream text-sm\">\n                    Просмотреть рецепты\n                  </p>\n                </CardContent>\n              </Card>\n            </Link>\n            \n            <Link href=\"/profile\">\n              <Card className=\"glass-effect border-none hover:scale-105 transition-transform cursor-pointer\">\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"w-16 h-16 bg-neon-pink rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <Star className=\"text-night-blue text-2xl\" />\n                  </div>\n                  <h3 className=\"text-xl font-bold text-neon-pink mb-2\">Профиль</h3>\n                  <p className=\"text-cream text-sm\">\n                    Мои рецепты\n                  </p>\n                </CardContent>\n              </Card>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      {/* Stats Section */}\n      <section className=\"py-16 bg-gradient-to-b from-graphite to-night-blue\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"grid md:grid-cols-3 gap-8\">\n            <Card className=\"glass-effect border-none\">\n              <CardContent className=\"p-6 text-center\">\n                <TrendingUp className=\"text-neon-turquoise text-4xl mx-auto mb-4\" />\n                <h3 className=\"text-3xl font-bold text-neon-turquoise mb-2\">1000+</h3>\n                <p className=\"text-cream\">Рецептов в каталоге</p>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"glass-effect border-none\">\n              <CardContent className=\"p-6 text-center\">\n                <Star className=\"text-neon-amber text-4xl mx-auto mb-4\" />\n                <h3 className=\"text-3xl font-bold text-neon-amber mb-2\">5000+</h3>\n                <p className=\"text-cream\">Созданных коктейлей</p>\n              </CardContent>\n            </Card>\n            \n            <Card className=\"glass-effect border-none\">\n              <CardContent className=\"p-6 text-center\">\n                <Clock className=\"text-neon-pink text-4xl mx-auto mb-4\" />\n                <h3 className=\"text-3xl font-bold text-neon-pink mb-2\">24/7</h3>\n                <p className=\"text-cream\">Доступность платформы</p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n      \n      <Footer />\n    </div>\n  );\n}\n","size_bytes":8557},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Martini, WandSparkles, Dice2, BookOpen, GraduationCap, ShoppingCart, Users, LogIn, UserPlus, User } from \"lucide-react\";\nimport CoursesSection from \"@/components/landing/courses-section\";\nimport PopularRecipesSection from \"@/components/PopularRecipesSection\";\nimport { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { motion } from \"framer-motion\";\n\nexport default function Landing() {\n  const [email, setEmail] = useState(\"\");\n  const [emailError, setEmailError] = useState(\"\");\n  const [heroEmail, setHeroEmail] = useState(\"\");\n  const [heroEmailError, setHeroEmailError] = useState(\"\");\n  const { user, isAuthenticated, isLoading } = useAuth();\n  \n  const handleGetStarted = () => {\n    window.location.href = \"/constructor\";\n  };\n\n  const validateEmail = (email: string) => {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  };\n\n  const handleEmailSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    setEmailError(\"\");\n    \n    if (!email.trim()) {\n      setEmailError(\"Введите email адрес\");\n      return;\n    }\n    \n    if (!validateEmail(email)) {\n      setEmailError(\"Введите корректный email адрес\");\n      return;\n    }\n    \n    // Здесь будет логика отправки email\n    console.log(\"Подписка на email:\", email);\n    alert(\"Спасибо за подписку!\");\n    setEmail(\"\");\n  };\n\n  const handleHeroEmailSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    setHeroEmailError(\"\");\n    \n    if (!heroEmail.trim()) {\n      setHeroEmailError(\"Введите email адрес\");\n      return;\n    }\n    \n    if (!validateEmail(heroEmail)) {\n      setHeroEmailError(\"Введите корректный email адрес\");\n      return;\n    }\n    \n    // Здесь будет логика отправки email\n    console.log(\"Подписка на email из hero:\", heroEmail);\n    alert(\"Спасибо за подписку!\");\n    setHeroEmail(\"\");\n  };\n\n\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      {/* Header */}\n      <header className=\"fixed top-0 left-0 right-0 z-50 glass-effect\">\n        <nav className=\"container mx-auto px-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <Martini className=\"text-electric text-2xl max-[480px]:text-xl\" />\n              <h1 className=\"text-xl font-bold text-platinum max-[480px]:text-lg\">Cocktailo Maker</h1>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <Button \n                onClick={handleGetStarted}\n                className=\"bg-gradient-to-r from-neon-turquoise to-electric text-night-blue px-5 py-1.5 rounded-lg font-semibold hover:scale-105 transition-all duration-300 shadow-lg shadow-neon-turquoise/30 max-[560px]:hidden\"\n              >\n                <WandSparkles className=\"mr-2 h-3 w-3\" />\n                Начать\n              </Button>\n              \n              {/* Auth Section - показывает либо кнопку входа, либо профиль пользователя */}\n              {!isLoading && !isAuthenticated ? (\n                <Button \n                  variant=\"outline\"\n                  className=\"bg-transparent border border-neon-purple text-neon-purple px-6 py-2 rounded-lg font-semibold hover:bg-neon-purple hover:text-night-blue transition-all duration-300 shadow-md shadow-neon-purple/20 max-[480px]:px-4 max-[480px]:py-1.5 max-[480px]:text-sm\"\n                  onClick={() => window.location.href = \"/auth\"}\n                >\n                  <LogIn className=\"mr-2 h-4 w-4 max-[480px]:h-3 max-[480px]:w-3\" />\n                  Вход\n                </Button>\n              ) : isAuthenticated && user ? (\n                <Button \n                  variant=\"ghost\" \n                  className=\"flex items-center space-x-2 hover:bg-white/10 p-2 rounded-lg transition-all duration-300 hover:scale-105 md:justify-start justify-end\"\n                  onClick={() => window.location.href = \"/profile\"}\n                >\n                  <Avatar className=\"h-8 w-8 shadow-sm shadow-black/30 ring-1 ring-white/10\">\n                    <AvatarImage \n                      src={(user as any)?.profileImageUrl} \n                      alt={(user as any)?.nickname || \"User\"} \n                    />\n                    <AvatarFallback className=\"bg-gradient-to-r from-neon-turquoise to-neon-purple text-black font-semibold text-sm\">\n                      {(user as any)?.nickname?.charAt(0)?.toUpperCase() || (user as any)?.email?.charAt(0)?.toUpperCase() || 'U'}\n                    </AvatarFallback>\n                  </Avatar>\n                  <span className=\"text-white font-medium hidden md:inline\">\n                    {(user as any)?.nickname || 'Пользователь'}\n                  </span>\n                </Button>\n              ) : null}\n            </div>\n          </div>\n        </nav>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"pt-20 pb-8 relative overflow-hidden min-h-[75vh] max-[480px]:min-h-[auto] max-[480px]:pb-4\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-night-blue via-graphite to-charcoal\"></div>\n        <div className=\"absolute inset-0 opacity-30\">\n          <div className=\"absolute top-20 left-10 w-64 h-64 bg-neon-purple rounded-full blur-3xl animate-pulse-slow\"></div>\n          <div className=\"absolute bottom-20 right-10 w-80 h-80 bg-neon-turquoise rounded-full blur-3xl animate-pulse-slow\"></div>\n        </div>\n        \n        <div className=\"container mx-auto px-8 relative z-10\">\n          <div className=\"grid md:grid-cols-2 gap-12 items-center py-24 max-[480px]:py-12 max-[480px]:gap-6\">\n            {/* Left side - Text content */}\n            <div className=\"space-y-4 md:pl-8 flex flex-col justify-center animate-fade-in max-[480px]:text-center max-[480px]:space-y-3\">\n              <h1 className=\"text-2xl md:text-3xl lg:text-4xl font-bold text-platinum leading-tight max-[480px]:text-2xl\">\n                Создай свой идеальный коктейль\n              </h1>\n              <p className=\"text-sm md:text-base lg:text-lg text-zinc max-w-2xl leading-relaxed max-[480px]:text-xs max-[480px]:px-2\">\n                Интерактивный конструктор напитков с реалистичной визуализацией, расчетом крепости и стоимости\n              </p>\n            </div>\n            \n            {/* Right side - Interactive cocktail creation image */}\n            <div className=\"flex justify-center md:justify-end items-center animate-slide-up max-[480px]:mt-2\">\n              <div className=\"relative w-full max-w-sm md:max-w-md lg:max-w-lg\">\n                <img \n                  src=\"/attached_assets/Leonardo_Phoenix_10_A_futuristic_interactive_cocktail_creation_0 (1)_1752851226590.png\"\n                  alt=\"Interactive cocktail creation with layered colors\"\n                  className=\"hero-image relative z-10\"\n                  loading=\"eager\"\n                  decoding=\"async\"\n                  draggable=\"false\"\n                />\n                {/* Subtle glow effect behind the image */}\n                <div className=\"absolute inset-0 bg-gradient-to-br from-cyan-400/20 to-purple-400/20 rounded-full blur-2xl transform scale-75\"></div>\n              </div>\n            </div>\n          </div>\n          \n          {/* Buttons at the bottom */}\n          <div className=\"flex flex-col gap-4 justify-center items-center mt-12 max-[480px]:mt-6 max-[480px]:gap-3 w-full\">\n            <Button \n              onClick={handleGetStarted}\n              className=\"hero-primary-button bg-gradient-to-r from-neon-purple to-electric text-white py-5 text-lg font-semibold rounded-xl shadow-lg hover:shadow-xl transform hover:scale-105 transition-all duration-300 relative overflow-hidden w-4/5 max-w-md max-[480px]:py-3 max-[480px]:text-base\"\n              style={{\n                boxShadow: '0 0 15px rgba(179, 136, 235, 0.25), 0 0 30px rgba(179, 136, 235, 0.15), 0 8px 20px rgba(0, 0, 0, 0.2)'\n              }}\n            >\n              <WandSparkles className=\"mr-2 h-6 w-6 max-[480px]:h-4 max-[480px]:w-4\" />\n              Начать создание\n              <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/15 to-transparent transform skew-x-12 translate-x-[-200%] hover:translate-x-[200%] transition-transform duration-1000\"></div>\n            </Button>\n            <Button \n              variant=\"outline\"\n              className=\"hero-secondary-button bg-transparent border-2 border-neon-turquoise text-neon-turquoise py-5 text-lg font-semibold rounded-xl hover:bg-neon-turquoise hover:text-night-blue transform hover:scale-105 transition-all duration-300 shadow-lg shadow-neon-turquoise/20 hover:shadow-xl hover:shadow-neon-turquoise/40 w-4/5 max-w-md max-[480px]:py-3 max-[480px]:text-base\"\n              onClick={() => window.location.href = \"/catalog\"}\n            >\n              <BookOpen className=\"mr-2 h-6 w-6 max-[480px]:h-4 max-[480px]:w-4\" />\n              Каталог рецептов\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-16 bg-gradient-to-br from-purple-900 to-night-blue relative overflow-hidden\">\n        {/* Background decoration */}\n        <div className=\"absolute inset-0 opacity-20\">\n          <div className=\"absolute top-10 right-20 w-96 h-96 bg-neon-purple rounded-full blur-3xl\"></div>\n          <div className=\"absolute bottom-20 left-20 w-80 h-80 bg-neon-turquoise rounded-full blur-3xl\"></div>\n        </div>\n        <div className=\"container mx-auto px-4 relative z-10\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl font-bold mb-4 text-platinum\">Возможности платформы</h2>\n            <p className=\"text-lg text-zinc max-w-2xl mx-auto\">\n              Все инструменты для создания идеальных коктейлей в одном месте\n            </p>\n          </div>\n          \n          <motion.div \n            className=\"grid md:grid-cols-3 gap-8\"\n            initial=\"hidden\"\n            whileInView=\"visible\"\n            viewport={{ once: true, margin: \"-100px\" }}\n            variants={{\n              hidden: {},\n              visible: {\n                transition: {\n                  staggerChildren: 0.1,\n                  delayChildren: 0.2\n                }\n              }\n            }}\n          >\n            {[\n              {\n                icon: Martini,\n                title: \"Конструктор\",\n                description: \"Создавайте коктейли слой за слоем с визуализацией в реальном времени\",\n                bgColor: \"bg-neon-turquoise\"\n              },\n              {\n                icon: Dice2,\n                title: \"Генератор\",\n                description: \"Автоматическое создание уникальных рецептов на основе ваших предпочтений\",\n                bgColor: \"bg-neon-purple\"\n              },\n              {\n                icon: BookOpen,\n                title: \"Каталог\",\n                description: \"Тысячи проверенных рецептов от профессиональных барменов\",\n                bgColor: \"bg-neon-amber\"\n              },\n              {\n                icon: Users,\n                title: \"Сообщество\",\n                description: \"Присоединяйтесь к сообществу барменов, делитесь опытом и находите единомышленников\",\n                bgColor: \"bg-red-500\"\n              },\n              {\n                icon: ShoppingCart,\n                title: \"Магазин барного инвентаря\",\n                description: \"Профессиональное барное оборудование и ингредиенты для создания идеальных коктейлей\",\n                bgColor: \"bg-orange-500\"\n              },\n              {\n                icon: GraduationCap,\n                title: \"Специальные курсы\",\n                description: \"Обучение от профессиональных барменов: от основ миксологии до авторских техник\",\n                bgColor: \"bg-green-500\"\n              }\n            ].map((feature, index) => {\n              const IconComponent = feature.icon;\n              return (\n                <motion.div\n                  key={index}\n                  variants={{\n                    hidden: { \n                      opacity: 0, \n                      y: 50,\n                      filter: \"blur(10px)\"\n                    },\n                    visible: { \n                      opacity: 1, \n                      y: 0,\n                      filter: \"blur(0px)\",\n                      transition: {\n                        duration: 0.8,\n                        ease: [0.25, 0.46, 0.45, 0.94],\n                        opacity: { duration: 0.6 },\n                        y: { duration: 0.8 },\n                        filter: { duration: 0.6 }\n                      }\n                    }\n                  }}\n\n                >\n                  <Card className=\"bg-white/5 backdrop-blur-md border border-white/10 hover:bg-white/10 transition-all duration-300 h-full\">\n                    <CardContent className=\"p-6 text-center\">\n                      <motion.div \n                        className={`w-16 h-16 ${feature.bgColor} rounded-full flex items-center justify-center mx-auto mb-4`}\n                        whileHover={{ \n                          scale: 1.1,\n                          rotate: 5,\n                          transition: { duration: 0.2 }\n                        }}\n                      >\n                        <IconComponent className=\"text-night-blue text-2xl\" />\n                      </motion.div>\n                      <h3 className=\"text-xl font-bold text-platinum mb-2\">{feature.title}</h3>\n                      <p className=\"text-zinc\">\n                        {feature.description}\n                      </p>\n                    </CardContent>\n                  </Card>\n                </motion.div>\n              );\n            })}\n          </motion.div>\n        </div>\n      </section>\n\n      {/* Popular Recipes Section */}\n      <PopularRecipesSection />\n\n\n\n      {/* Courses Section */}\n      <CoursesSection />\n\n      {/* Newsletter Section */}\n      <section className=\"py-16 bg-[#101013] relative overflow-hidden\">\n        {/* Background gradient */}\n        <div className=\"absolute inset-0 opacity-10\">\n          <div className=\"absolute top-0 left-0 w-full h-full bg-gradient-to-r from-purple-500/20 to-cyan-400/20 blur-xl\"></div>\n          <div className=\"absolute top-20 left-20 w-96 h-96 bg-purple-500/10 rounded-full blur-3xl animate-pulse-slow\"></div>\n          <div className=\"absolute bottom-20 right-20 w-80 h-80 bg-cyan-400/10 rounded-full blur-3xl animate-pulse-slow\"></div>\n        </div>\n        \n        <div className=\"container mx-auto px-6 max-w-6xl relative z-10\">\n          <div className=\"flex flex-col md:flex-row items-center justify-between gap-12\">\n            {/* Left side - Newsletter content */}\n            <div className=\"flex-1 text-center md:text-left\">\n              <h2 className=\"text-3xl md:text-4xl font-bold text-[#F1F1F1] mb-2\" style={{ textShadow: '0 0 5px #00f7ef33' }}>\n                Будь в курсе новых рецептов и фишек\n              </h2>\n              <p className=\"text-sm md:text-base text-zinc-400 mt-2 mb-8\">\n                Мы не спамим. Только крафтовые новости.\n              </p>\n              \n              <form onSubmit={handleHeroEmailSubmit} className=\"flex flex-col gap-4 justify-center md:justify-start max-[480px]:items-center max-[480px]:w-full\">\n                <div className=\"flex flex-col md:flex-row gap-4 max-[767px]:w-full max-[767px]:items-center\">\n                  <div className=\"flex flex-col w-full md:w-auto min-w-[280px] max-[767px]:w-full\">\n                    <input\n                      type=\"email\"\n                      value={heroEmail}\n                      onChange={(e) => setHeroEmail(e.target.value)}\n                      placeholder=\"Введи свой email\"\n                      className={`rounded-full px-6 py-3 text-sm bg-[#1A1A1E] text-white border focus:outline-none transition-all duration-300 w-full ${\n                        heroEmailError \n                          ? 'border-red-500 focus:border-red-400' \n                          : 'border-zinc-700 focus:border-cyan-500'\n                      }`}\n                    />\n                    {heroEmailError && (\n                      <p className=\"text-red-400 text-xs mt-1 pl-4\">{heroEmailError}</p>\n                    )}\n                  </div>\n                  <Button \n                    type=\"submit\"\n                    className=\"rounded-full px-6 py-3 ml-0 md:ml-2 bg-gradient-to-r from-purple-500 to-cyan-400 text-black font-semibold hover:scale-105 transition-all duration-300 shadow-md shadow-cyan-500/30 max-[767px]:w-1/2 max-[767px]:ml-0 max-[767px]:mt-2\"\n                  >\n                    Подписаться\n                  </Button>\n                </div>\n              </form>\n            </div>\n            \n            {/* Right side - Cocktail image with elegant shadows */}\n            <div className=\"flex-1 flex justify-center md:justify-end\">\n              <div className=\"relative hover:scale-105 transition-all duration-300\">\n                <img \n                  src=\"/attached_assets/Flux_Dev_a_lush_3d_render_of_A_stylized_artistic_illustration__3-Photoroom_1752879813613.png\"\n                  alt=\"Стилизованный коктейль с градиентными эффектами\"\n                  className=\"w-80 h-auto object-contain relative z-10\"\n                  style={{\n                    filter: 'drop-shadow(0 25px 50px rgba(138, 43, 226, 0.3)) drop-shadow(0 15px 30px rgba(0, 255, 255, 0.2))',\n                  }}\n                  loading=\"lazy\"\n                />\n                \n                {/* Elegant glow effects behind the cocktail */}\n                <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-96 h-96 bg-gradient-to-r from-purple-500/20 to-cyan-400/20 rounded-full blur-3xl -z-10 animate-pulse\"></div>\n                <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-80 h-80 bg-gradient-to-br from-pink-400/15 to-blue-400/15 rounded-full blur-2xl -z-20\"></div>\n                <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-64 h-64 bg-gradient-to-t from-violet-400/25 to-cyan-300/25 rounded-full blur-xl -z-30\"></div>\n                \n                {/* Soft base shadow */}\n                <div className=\"absolute bottom-0 left-1/2 transform -translate-x-1/2 w-32 h-6 bg-black/20 rounded-full blur-lg -z-40\"></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Mobile App Section */}\n      <section className=\"py-20 bg-[#0C0C0F] relative overflow-hidden\">\n        {/* Background glow */}\n        <div className=\"absolute inset-0 opacity-20\">\n          <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-96 h-96 bg-gradient-to-r from-cyan-400 to-purple-500 rounded-full blur-3xl\"></div>\n        </div>\n        \n        <div className=\"container mx-auto px-6 max-w-6xl relative z-10\">\n          <div className=\"flex flex-col md:flex-row items-center justify-between gap-12\">\n            {/* Mobile layout: Title first */}\n            <div className=\"w-full text-center md:hidden mb-4\">\n              <h2 className=\"text-3xl font-bold text-white mb-4\" style={{ textShadow: '0 0 4px #8F00FF88' }}>\n                Cocktailo — теперь в твоём кармане\n              </h2>\n              <p className=\"text-zinc-400 text-base\">\n                Создавай, сохраняй, делись на ходу\n              </p>\n            </div>\n\n            {/* Mobile layout: Phone image second */}\n            <div className=\"w-full flex justify-center md:hidden mb-4\">\n              <div className=\"relative\">\n                <img \n                  src=\"/attached_assets/ChatGPT Image 18 июл. 2025 г., 23_50_01-Photoroom_1752872369395.png\"\n                  alt=\"Cocktailo mobile app with pineapple daiquiri\"\n                  className=\"w-96 h-auto object-contain hover:scale-105 transition-all duration-300 relative z-10\"\n                  loading=\"lazy\"\n                />\n                {/* Soft glow effects behind the image */}\n                <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-80 h-80 bg-gradient-to-r from-cyan-400/15 to-purple-500/15 rounded-full blur-3xl -z-10\"></div>\n                <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-96 h-96 bg-gradient-to-br from-purple-400/8 to-cyan-400/8 rounded-full blur-[100px] -z-20\"></div>\n              </div>\n            </div>\n\n            {/* Mobile layout: Buttons third */}\n            <div className=\"w-full flex justify-center md:hidden\">\n              <div className=\"flex flex-col gap-4 w-full max-w-sm\">\n                <Button className=\"inline-flex items-center justify-center px-5 py-3 rounded-xl bg-white text-black font-semibold hover:scale-105 transition-all duration-300\">\n                  <svg className=\"w-6 h-6 mr-2\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                    <path d=\"M18.71 19.5c-.83 1.24-1.71 2.45-3.05 2.47-1.34.03-1.77-.79-3.29-.79-1.53 0-2 .77-3.27.82-1.31.05-2.3-1.32-3.14-2.53C4.25 17 2.94 12.45 4.7 9.39c.87-1.52 2.43-2.48 4.12-2.51 1.28-.02 2.5.87 3.29.87.78 0 2.26-1.07 3.81-.91.65.03 2.47.26 3.64 1.98-.09.06-2.17 1.28-2.15 3.81.03 3.02 2.65 4.03 2.68 4.04-.03.07-.42 1.44-1.38 2.83M13 3.5c.73-.83 1.94-1.46 2.94-1.5.13 1.17-.34 2.35-1.04 3.19-.69.85-1.83 1.51-2.95 1.42-.15-1.15.41-2.35 1.05-3.11z\"/>\n                  </svg>\n                  App Store\n                </Button>\n                <Button className=\"inline-flex items-center justify-center px-5 py-3 rounded-xl bg-white text-black font-semibold hover:scale-105 transition-all duration-300\">\n                  <svg className=\"w-6 h-6 mr-2\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                    <path d=\"M3,20.5V3.5C3,2.91 3.34,2.39 3.84,2.15L13.69,12L3.84,21.85C3.34,21.6 3,21.09 3,20.5M16.81,15.12L6.05,21.34L14.54,12.85L16.81,15.12M20.16,10.81C20.5,11.08 20.75,11.5 20.75,12C20.75,12.5 20.53,12.9 20.18,13.18L17.89,14.5L15.39,12L17.89,9.5L20.16,10.81M6.05,2.66L16.81,8.88L14.54,11.15L6.05,2.66Z\"/>\n                  </svg>\n                  Google Play\n                </Button>\n              </div>\n            </div>\n\n            {/* Desktop layout: Left side - Content */}\n            <div className=\"hidden md:flex flex-1 text-left\">\n              <div>\n                <h2 className=\"text-4xl font-bold text-white mb-4\" style={{ textShadow: '0 0 4px #8F00FF88' }}>\n                  Cocktailo — теперь в твоём кармане\n                </h2>\n                <p className=\"text-zinc-400 text-base mt-2 mb-8\">\n                  Создавай, сохраняй, делись на ходу\n                </p>\n                \n                {/* Download buttons */}\n                <div className=\"flex flex-row gap-4\">\n                  <Button className=\"inline-flex items-center px-5 py-3 rounded-xl bg-white text-black font-semibold hover:scale-105 transition-all duration-300\">\n                    <svg className=\"w-6 h-6 mr-2\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                      <path d=\"M18.71 19.5c-.83 1.24-1.71 2.45-3.05 2.47-1.34.03-1.77-.79-3.29-.79-1.53 0-2 .77-3.27.82-1.31.05-2.3-1.32-3.14-2.53C4.25 17 2.94 12.45 4.7 9.39c.87-1.52 2.43-2.48 4.12-2.51 1.28-.02 2.5.87 3.29.87.78 0 2.26-1.07 3.81-.91.65.03 2.47.26 3.64 1.98-.09.06-2.17 1.28-2.15 3.81.03 3.02 2.65 4.03 2.68 4.04-.03.07-.42 1.44-1.38 2.83M13 3.5c.73-.83 1.94-1.46 2.94-1.5.13 1.17-.34 2.35-1.04 3.19-.69.85-1.83 1.51-2.95 1.42-.15-1.15.41-2.35 1.05-3.11z\"/>\n                    </svg>\n                    App Store\n                  </Button>\n                  <Button className=\"inline-flex items-center px-5 py-3 rounded-xl bg-white text-black font-semibold hover:scale-105 transition-all duration-300\">\n                    <svg className=\"w-6 h-6 mr-2\" viewBox=\"0 0 24 24\" fill=\"currentColor\">\n                      <path d=\"M3,20.5V3.5C3,2.91 3.34,2.39 3.84,2.15L13.69,12L3.84,21.85C3.34,21.6 3,21.09 3,20.5M16.81,15.12L6.05,21.34L14.54,12.85L16.81,15.12M20.16,10.81C20.5,11.08 20.75,11.5 20.75,12C20.75,12.5 20.53,12.9 20.18,13.18L17.89,14.5L15.39,12L17.89,9.5L20.16,10.81M6.05,2.66L16.81,8.88L14.54,11.15L6.05,2.66Z\"/>\n                    </svg>\n                    Google Play\n                  </Button>\n                </div>\n              </div>\n            </div>\n            \n            {/* Desktop layout: Right side - Phone image */}\n            <div className=\"hidden md:flex flex-1 justify-end mr-16\">\n              <div className=\"relative\">\n                <img \n                  src=\"/attached_assets/ChatGPT Image 18 июл. 2025 г., 23_50_01-Photoroom_1752872369395.png\"\n                  alt=\"Cocktailo mobile app with pineapple daiquiri\"\n                  className=\"w-96 h-auto object-contain hover:scale-105 transition-all duration-300 relative z-10\"\n                  loading=\"lazy\"\n                />\n                {/* Soft glow effects behind the image */}\n                <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-80 h-80 bg-gradient-to-r from-cyan-400/15 to-purple-500/15 rounded-full blur-3xl -z-10\"></div>\n                <div className=\"absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2 w-96 h-96 bg-gradient-to-br from-purple-400/8 to-cyan-400/8 rounded-full blur-[100px] -z-20\"></div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer with liquid wave effect */}\n      <footer className=\"relative bg-gradient-to-b from-slate-950 to-black overflow-hidden\">\n        {/* Static neon wave at top - full width */}\n        <div className=\"absolute top-0 left-0 w-full h-20 overflow-hidden\">\n          <svg \n            className=\"absolute w-full h-full\" \n            viewBox=\"0 0 1200 120\" \n            preserveAspectRatio=\"none\"\n            style={{ width: '100%' }}\n          >\n            <defs>\n              <linearGradient id=\"waveGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n                <stop offset=\"0%\" stopColor=\"#00ffff\" stopOpacity=\"0.8\">\n                  <animate attributeName=\"stop-color\" values=\"#00ffff;#8f00ff;#ff00ff;#00ffff\" dur=\"4s\" repeatCount=\"indefinite\" />\n                </stop>\n                <stop offset=\"50%\" stopColor=\"#8f00ff\" stopOpacity=\"0.9\">\n                  <animate attributeName=\"stop-color\" values=\"#8f00ff;#ff00ff;#00ffff;#8f00ff\" dur=\"4s\" repeatCount=\"indefinite\" />\n                </stop>\n                <stop offset=\"100%\" stopColor=\"#ff00ff\" stopOpacity=\"0.8\">\n                  <animate attributeName=\"stop-color\" values=\"#ff00ff;#00ffff;#8f00ff;#ff00ff\" dur=\"4s\" repeatCount=\"indefinite\" />\n                </stop>\n              </linearGradient>\n              <filter id=\"glow\">\n                <feGaussianBlur stdDeviation=\"3\" result=\"coloredBlur\"/>\n                <feMerge> \n                  <feMergeNode in=\"coloredBlur\"/>\n                  <feMergeNode in=\"SourceGraphic\"/>\n                </feMerge>\n              </filter>\n            </defs>\n            <path \n              d=\"M0,50 C100,30 200,70 300,50 C400,30 500,70 600,50 C700,30 800,70 900,50 C1000,30 1100,70 1200,50 L1200,0 L0,0 Z\" \n              fill=\"url(#waveGradient)\" \n              filter=\"url(#glow)\"\n            />\n          </svg>\n        </div>\n\n        {/* Glass texture overlay */}\n        <div className=\"absolute inset-0 bg-gradient-to-t from-black/90 to-transparent opacity-50\"></div>\n        <div className=\"absolute inset-0 bg-[radial-gradient(circle_at_50%_50%,rgba(255,255,255,0.03)_0%,transparent_50%)]\"></div>\n\n        <div className=\"relative z-10 pt-24 pb-12\">\n          <div className=\"container mx-auto px-6 max-w-7xl\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-12\">\n              \n              {/* Block 1 - Logo and Quote */}\n              <div className=\"space-y-6\">\n                <div className=\"flex items-center space-x-3 mb-6\">\n                  <div className=\"flex items-center justify-center w-10 h-10 rounded-lg bg-gradient-to-r from-cyan-400 to-purple-500 shadow-lg\">\n                    <Martini className=\"w-6 h-6 text-white\" />\n                  </div>\n                  <h3 className=\"text-2xl font-bold text-white\" style={{ textShadow: '0 0 8px #00ffff88' }}>\n                    Cocktailo\n                  </h3>\n                </div>\n                \n                <blockquote className=\"text-zinc-300 italic text-lg leading-relaxed\">\n                  «Коктейли — это искусство, а ты — художник.»\n                </blockquote>\n                \n                <div className=\"flex items-center space-x-2 text-sm text-zinc-400\">\n                  <svg className=\"w-4 h-4 text-cyan-400\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n                    <path d=\"M3 4a1 1 0 011-1h12a1 1 0 011 1v2a1 1 0 01-1 1H4a1 1 0 01-1-1V4zM3 10a1 1 0 011-1h6a1 1 0 011 1v6a1 1 0 01-1 1H4a1 1 0 01-1-1v-6zM14 9a1 1 0 00-1 1v6a1 1 0 001 1h2a1 1 0 001-1v-6a1 1 0 00-1-1h-2z\"/>\n                  </svg>\n                  <span>Cocktailo создан с любовью барменами для барменов</span>\n                </div>\n              </div>\n\n              {/* Block 2 - Quick Links */}\n              <div className=\"space-y-6\">\n                <h4 className=\"text-lg font-semibold text-white mb-4\">Быстрые ссылки</h4>\n                <nav className=\"space-y-3\">\n                  {[\n                    { label: 'О проекте', href: '/about' },\n                    { label: 'Курсы', href: '/courses' },\n                    { label: 'Мобильное приложение', href: '/mobile' },\n                    { label: 'Контакты', href: '/contact' }\n                  ].map((link) => (\n                    <a\n                      key={link.label}\n                      href={link.href}\n                      className=\"block text-zinc-400 hover:text-cyan-300 transition-all duration-300 hover:translate-x-2 hover:shadow-lg\"\n                      style={{ \n                        textShadow: 'none',\n                        transition: 'all 0.3s ease'\n                      }}\n                      onMouseEnter={(e) => {\n                        (e.target as HTMLElement).style.textShadow = '0 0 8px #00ffff88';\n                      }}\n                      onMouseLeave={(e) => {\n                        (e.target as HTMLElement).style.textShadow = 'none';\n                      }}\n                    >\n                      {link.label}\n                    </a>\n                  ))}\n                </nav>\n              </div>\n\n              {/* Block 3 - Newsletter Subscription */}\n              <div className=\"space-y-6\">\n                <h4 className=\"text-lg font-semibold text-white mb-4\">Будь в курсе новых рецептов и фишек</h4>\n                \n                <form className=\"space-y-4\" onSubmit={handleEmailSubmit}>\n                  <div className=\"space-y-2\">\n                    <input\n                      type=\"email\"\n                      value={email}\n                      onChange={(e) => setEmail(e.target.value)}\n                      placeholder=\"Введи свой email\"\n                      className={`w-full px-4 py-3 bg-slate-900/50 border rounded-lg text-white placeholder-zinc-500 focus:ring-1 focus:outline-none transition-all duration-300 ${\n                        emailError \n                          ? 'border-red-500 focus:border-red-400 focus:ring-red-400' \n                          : 'border-slate-700 focus:border-cyan-400 focus:ring-cyan-400'\n                      }`}\n                      style={{\n                        backdropFilter: 'blur(10px)',\n                      }}\n                    />\n                    {emailError && (\n                      <p className=\"text-red-400 text-xs pl-1\">{emailError}</p>\n                    )}\n                  </div>\n                  \n                  <button\n                    type=\"submit\"\n                    className=\"w-full px-6 py-3 bg-gradient-to-r from-cyan-500 to-purple-600 text-white font-semibold rounded-lg hover:from-cyan-400 hover:to-purple-500 transition-all duration-300 transform hover:scale-105\"\n                    style={{\n                      boxShadow: '0 4px 15px rgba(0, 255, 255, 0.3)',\n                    }}\n                    onMouseEnter={(e) => {\n                      (e.target as HTMLElement).style.boxShadow = '0 6px 20px rgba(0, 255, 255, 0.5)';\n                    }}\n                    onMouseLeave={(e) => {\n                      (e.target as HTMLElement).style.boxShadow = '0 4px 15px rgba(0, 255, 255, 0.3)';\n                    }}\n                  >\n                    Подписаться\n                  </button>\n                </form>\n                \n                <p className=\"text-xs text-zinc-500\">\n                  Мы не спамим. Только крафтовые новости.\n                </p>\n              </div>\n            </div>\n\n            {/* Bottom section */}\n            <div className=\"mt-12 pt-8 border-t border-slate-800\">\n              <div className=\"flex flex-col md:flex-row justify-between items-center space-y-4 md:space-y-0\">\n                <p className=\"text-zinc-500 text-sm\">\n                  &copy; 2025 Cocktailo. Все права защищены.\n                </p>\n                \n                {/* Social icons */}\n                <div className=\"flex space-x-6\">\n                  <a\n                    href=\"https://t.me/cocktailo\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"w-10 h-10 flex items-center justify-center rounded-full border border-slate-700 text-zinc-400 hover:text-cyan-300 hover:border-cyan-400 transition-all duration-300 hover:scale-110\"\n                    style={{\n                      backdropFilter: 'blur(10px)',\n                      backgroundColor: 'rgba(15, 23, 42, 0.5)'\n                    }}\n                    onMouseEnter={(e) => {\n                      (e.currentTarget as HTMLElement).style.boxShadow = '0 0 15px rgba(0, 255, 255, 0.4)';\n                    }}\n                    onMouseLeave={(e) => {\n                      (e.currentTarget as HTMLElement).style.boxShadow = 'none';\n                    }}\n                  >\n                    <svg fill=\"currentColor\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\n                      <path d=\"M19.2,4.4L2.9,10.7c-1.1,0.4-1.1,1.1-0.2,1.3l4.1,1.3l1.6,4.8c0.2,0.5,0.1,0.7,0.6,0.7c0.4,0,0.6-0.2,0.8-0.4 c0.1-0.1,1-1,2-2l4.2,3.1c0.8,0.4,1.3,0.2,1.5-0.7l2.8-13.1C20.6,4.6,19.9,4,19.2,4.4z M17.1,7.4l-7.8,7.1L9,17.8L7.4,13l9.2-5.8 C17,6.9,17.4,7.1,17.1,7.4z\"/>\n                    </svg>\n                  </a>\n                  \n                  <a\n                    href=\"https://vk.com/cocktailo\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"w-10 h-10 flex items-center justify-center rounded-full border border-slate-700 text-zinc-400 hover:text-cyan-300 hover:border-cyan-400 transition-all duration-300 hover:scale-110\"\n                    style={{\n                      backdropFilter: 'blur(10px)',\n                      backgroundColor: 'rgba(15, 23, 42, 0.5)'\n                    }}\n                    onMouseEnter={(e) => {\n                      (e.currentTarget as HTMLElement).style.boxShadow = '0 0 15px rgba(0, 255, 255, 0.4)';\n                    }}\n                    onMouseLeave={(e) => {\n                      (e.currentTarget as HTMLElement).style.boxShadow = 'none';\n                    }}\n                  >\n                    <svg fill=\"none\" stroke=\"currentColor\" width=\"16\" height=\"16\" viewBox=\"0 0 48 48\">\n                      <path strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M27.55,35.19V28.55c4.46.68,5.87,4.19,8.71,6.64H43.5a29.36,29.36,0,0,0-7.9-10.47c2.6-3.58,5.36-6.95,6.71-12.06H35.73c-2.58,3.91-3.94,8.49-8.18,11.51V12.66H18l2.28,2.82,0,10.05c-3.7-.43-6.2-7.2-8.91-12.87H4.5C7,20.32,12.26,37.13,27.55,35.19Z\"/>\n                    </svg>\n                  </a>\n                  \n                  <a\n                    href=\"https://instagram.com/cocktailo\"\n                    target=\"_blank\"\n                    rel=\"noopener noreferrer\"\n                    className=\"w-10 h-10 flex items-center justify-center rounded-full border border-slate-700 text-zinc-400 hover:text-cyan-300 hover:border-cyan-400 transition-all duration-300 hover:scale-110\"\n                    style={{\n                      backdropFilter: 'blur(10px)',\n                      backgroundColor: 'rgba(15, 23, 42, 0.5)'\n                    }}\n                    onMouseEnter={(e) => {\n                      (e.currentTarget as HTMLElement).style.boxShadow = '0 0 15px rgba(0, 255, 255, 0.4)';\n                    }}\n                    onMouseLeave={(e) => {\n                      (e.currentTarget as HTMLElement).style.boxShadow = 'none';\n                    }}\n                  >\n                    <svg fill=\"currentColor\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\n                      <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M12 18C15.3137 18 18 15.3137 18 12C18 8.68629 15.3137 6 12 6C8.68629 6 6 8.68629 6 12C6 15.3137 8.68629 18 12 18ZM12 16C14.2091 16 16 14.2091 16 12C16 9.79086 14.2091 8 12 8C9.79086 8 8 9.79086 8 12C8 14.2091 9.79086 16 12 16Z\"/>\n                      <path d=\"M18 5C18.5523 5 19 5.44772 19 6C19 6.55228 18.5523 7 18 7C17.4477 7 17 6.55228 17 6C17 5.44772 17.4477 5 18 5Z\"/>\n                      <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M1.65396 4.27606C1 5.55953 1 7.23969 1 10.6V13.4C1 16.7603 1 18.4405 1.65396 19.7239C2.2292 20.8529 3.14708 21.7708 4.27606 22.346C5.55953 23 7.23969 23 10.6 23H13.4C16.7603 23 18.4405 23 19.7239 22.346C20.8529 21.7708 21.7708 20.8529 22.346 19.7239C23 18.4405 23 16.7603 23 13.4V10.6C23 7.23969 23 5.55953 22.346 4.27606C21.7708 3.14708 20.8529 2.2292 19.7239 1.65396C18.4405 1 16.7603 1 13.4 1H10.6C7.23969 1 5.55953 1 4.27606 1.65396C3.14708 2.2292 2.2292 3.14708 1.65396 4.27606ZM13.4 3H10.6C8.88684 3 7.72225 3.00156 6.82208 3.0751C5.94524 3.14674 5.49684 3.27659 5.18404 3.43597C4.43139 3.81947 3.81947 4.43139 3.43597 5.18404C3.27659 5.49684 3.14674 5.94524 3.0751 6.82208C3.00156 7.72225 3 8.88684 3 10.6V13.4C3 15.1132 3.00156 16.2777 3.0751 17.1779C3.14674 18.0548 3.27659 18.5032 3.43597 18.816C3.81947 19.5686 4.43139 20.1805 5.18404 20.564C5.49684 20.7234 5.94524 20.8533 6.82208 20.9249C7.72225 20.9984 8.88684 21 10.6 21H13.4C15.1132 21 16.2777 20.9984 17.1779 20.9249C18.0548 20.8533 18.5032 20.7234 18.816 20.564C19.5686 20.1805 20.1805 19.5686 20.564 18.816C20.7234 18.5032 20.8533 18.0548 20.9249 17.1779C20.9984 16.2777 21 15.1132 21 13.4V10.6C21 8.88684 20.9984 7.72225 20.9249 6.82208C20.8533 5.94524 20.7234 5.49684 20.564 5.18404C20.1805 4.43139 19.5686 3.81947 18.816 3.43597C18.5032 3.27659 18.0548 3.14674 17.1779 3.0751C16.2777 3.00156 15.1132 3 13.4 3Z\"/>\n                    </svg>\n                  </a>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":40687},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/profile.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Header from \"@/components/layout/header\";\nimport Footer from \"@/components/layout/footer\";\nimport RecipeCard from \"@/components/recipe/recipe-card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { \n  User as UserIcon, \n  Martini, \n  Heart, \n  Trophy, \n  Clock, \n  TrendingUp,\n  Edit,\n  Trash2,\n  Camera,\n  Save,\n  LogOut\n} from \"lucide-react\";\nimport type { Recipe, User } from \"@shared/schema\";\nimport { useLocation } from \"wouter\";\n\nexport default function Profile() {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [userFavorites, setUserFavorites] = useState<Set<string>>(new Set());\n  const [editingProfile, setEditingProfile] = useState(false);\n  const [nickname, setNickname] = useState(\"\");\n  const [profileImage, setProfileImage] = useState<string | null>(null);\n  const [, setLocation] = useLocation();\n  const { user, isAuthenticated, isLoading } = useAuth();\n\n  useEffect(() => {\n    if (!isLoading && !isAuthenticated) {\n      setLocation('/auth');\n    }\n  }, [isAuthenticated, isLoading, setLocation]);\n\n  useEffect(() => {\n    if (user && (user as any)?.nickname) {\n      setNickname((user as any).nickname);\n    }\n  }, [user]);\n\n  // Fetch user recipes\n  const { data: userRecipes = [], isLoading: recipesLoading } = useQuery<Recipe[]>({\n    queryKey: [\"/api/recipes/user\"],\n    enabled: isAuthenticated\n  });\n\n  // Fetch user favorites\n  const { data: favoriteRecipes = [], isLoading: favoritesLoading } = useQuery<Recipe[]>({\n    queryKey: [\"/api/favorites\"],\n    enabled: isAuthenticated\n  });\n\n  useEffect(() => {\n    if (favoriteRecipes?.length > 0) {\n      setUserFavorites(new Set(favoriteRecipes.map((recipe: Recipe) => recipe.id)));\n    }\n  }, [favoriteRecipes]);\n\n  const updateProfileMutation = useMutation({\n    mutationFn: async (data: { nickname: string; profileImageUrl?: string }) => {\n      const response = await fetch('/api/auth/profile', {\n        method: 'PATCH',\n        body: JSON.stringify(data),\n        headers: { 'Content-Type': 'application/json' }\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || 'Ошибка обновления профиля');\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Профиль обновлен\",\n        description: \"Ваш никнейм успешно изменен\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/user'] });\n      setEditingProfile(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Ошибка\",\n        description: error.message || \"Не удалось обновить профиль\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch('/api/auth/logout', { method: 'POST' });\n      if (!response.ok) throw new Error('Logout failed');\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Выход выполнен\",\n        description: \"До встречи!\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/auth/user'] });\n      setLocation('/');\n    },\n    onError: () => {\n      toast({\n        title: \"Ошибка\",\n        description: \"Не удалось выйти из аккаунта\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handlePhotoUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const file = event.target.files?.[0];\n    if (file) {\n      // Проверка размера файла (макс 2MB)\n      if (file.size > 2 * 1024 * 1024) {\n        toast({\n          title: \"Ошибка\",\n          description: \"Размер файла не должен превышать 2MB\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      // Проверка типа файла\n      if (!file.type.startsWith('image/')) {\n        toast({\n          title: \"Ошибка\",\n          description: \"Можно загружать только изображения\",\n          variant: \"destructive\",\n        });\n        return;\n      }\n\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        const result = e.target?.result as string;\n        setProfileImage(result);\n        toast({\n          title: \"Фото загружено\",\n          description: \"Не забудьте сохранить изменения\",\n        });\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const handleSaveProfile = () => {\n    if (nickname.trim().length < 2) {\n      toast({\n        title: \"Ошибка\",\n        description: \"Никнейм должен содержать минимум 2 символа\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    updateProfileMutation.mutate({ \n      nickname: nickname.trim(),\n      profileImageUrl: profileImage || (user as User)?.profileImageUrl || undefined\n    });\n  };\n\n  const deleteRecipeMutation = useMutation({\n    mutationFn: async (recipeId: string) => {\n      await apiRequest(\"DELETE\", `/api/recipes/${recipeId}`);\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Рецепт удален\",\n        description: \"Рецепт успешно удален из вашего профиля\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/recipes\"] });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Демо режим\",\n        description: \"В демо режиме нельзя удалять рецепты\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const favoriteMutation = useMutation({\n    mutationFn: async ({ recipeId, isFavorite }: { recipeId: string; isFavorite: boolean }) => {\n      // Demo mode - just show toast\n      return Promise.resolve();\n    },\n    onSuccess: (_, { recipeId, isFavorite }) => {\n      const newFavorites = new Set(userFavorites);\n      if (isFavorite) {\n        newFavorites.delete(recipeId);\n      } else {\n        newFavorites.add(recipeId);\n      }\n      setUserFavorites(newFavorites);\n      \n      queryClient.invalidateQueries({ queryKey: [\"/api/recipes\"] });\n      \n      toast({\n        title: isFavorite ? \"Удалено из избранного\" : \"Добавлено в избранное\",\n        description: isFavorite ? \"Рецепт удален из избранного\" : \"Рецепт добавлен в избранное\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Ошибка\",\n        description: \"Не удалось обновить избранное. Попробуйте еще раз.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFavorite = (recipeId: string) => {\n    const isFavorite = userFavorites.has(recipeId);\n    favoriteMutation.mutate({ recipeId, isFavorite });\n  };\n\n  const handleViewRecipe = (recipeId: string) => {\n    // In a real app, this would navigate to recipe detail page\n    toast({\n      title: \"Функция в разработке\",\n      description: \"Просмотр детальной информации о рецепте будет доступен в следующих версиях\",\n    });\n  };\n\n  const handleDeleteRecipe = (recipeId: string) => {\n    if (window.confirm(\"Вы уверены, что хотите удалить этот рецепт?\")) {\n      deleteRecipeMutation.mutate(recipeId);\n    }\n  };\n\n  const getUserLevel = (recipeCount: number) => {\n    if (recipeCount < 5) return \"Новичок\";\n    if (recipeCount < 15) return \"Любитель\";\n    if (recipeCount < 30) return \"Мастер\";\n    return \"Профессионал\";\n  };\n\n  if (!isAuthenticated || !user) {\n    return (\n      <div className=\"min-h-screen bg-graphite text-white\">\n        <Header />\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <div className=\"text-center\">\n            <h2 className=\"text-2xl font-bold mb-4\">Загрузка...</h2>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  const getLevelColor = (level: string) => {\n    switch (level) {\n      case \"Новичок\": return \"text-green-400\";\n      case \"Любитель\": return \"text-blue-400\";\n      case \"Мастер\": return \"text-purple-400\";\n      case \"Профессионал\": return \"text-yellow-400\";\n      default: return \"text-gray-400\";\n    }\n  };\n\n  const userLevel = getUserLevel(userRecipes.length);\n\n  return (\n    <div className=\"min-h-screen bg-night-blue text-ice-white\">\n      <Header />\n      <section className=\"pt-32 pb-16 bg-gradient-to-b from-night-blue to-charcoal\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"max-w-6xl mx-auto\">\n            <div className=\"text-center mb-12\">\n              <div className=\"flex items-center justify-center mb-4\">\n                <UserIcon className=\"mr-3 h-8 w-8 text-neon-pink\" />\n                <h2 className=\"font-bold text-neon-pink text-[28px]\">\n                  Мой Профиль\n                </h2>\n              </div>\n              <p className=\"text-cream text-[16px]\">Отслеживайте свои рецепты и достижения</p>\n            </div>\n\n            <div className=\"grid lg:grid-cols-4 gap-8 mb-8\">\n              {/* User Profile Card */}\n              <Card className=\"glass-effect border-none shadow-xl shadow-slate-500/15 hover:shadow-lg hover:shadow-slate-400/10 transition-shadow duration-300\">\n                <CardHeader>\n                  <CardTitle className=\"text-center\">\n                    <div className=\"flex justify-between items-center\">\n                      <span>Профиль</span>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => setEditingProfile(!editingProfile)}\n                        className=\"text-neon-turquoise hover:bg-white/10\"\n                      >\n                        <Edit className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"p-6 pt-2\">\n                  <div className=\"text-center mb-6\">\n                    <Avatar className=\"w-24 h-24 mx-auto mb-4\">\n                      <AvatarImage src={profileImage || (user as any)?.profileImageUrl} alt={(user as any)?.nickname} />\n                      <AvatarFallback className=\"bg-gradient-to-br from-neon-turquoise to-neon-purple text-black text-2xl font-bold\">\n                        {(user as any)?.nickname?.charAt(0)?.toUpperCase() || (user as any)?.email?.charAt(0)?.toUpperCase() || 'U'}\n                      </AvatarFallback>\n                    </Avatar>\n                    \n                    {editingProfile ? (\n                      <div className=\"space-y-3\">\n                        <div>\n                          <Label htmlFor=\"nickname\" className=\"text-white/90 font-medium\">Никнейм</Label>\n                          <Input\n                            id=\"nickname\"\n                            value={nickname}\n                            onChange={(e) => setNickname(e.target.value)}\n                            className=\"bg-white/5 border-white/20 text-white placeholder:text-white/50 focus:border-neon-turquoise\"\n                            placeholder=\"Ваш никнейм\"\n                          />\n                        </div>\n                        <div>\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => document.getElementById('photo-upload')?.click()}\n                            className=\"w-full border-neon-purple text-neon-purple hover:bg-neon-purple hover:text-black transition-all duration-300\"\n                          >\n                            <Camera className=\"h-4 w-4 mr-2\" />\n                            Установить фото\n                          </Button>\n                          <input\n                            id=\"photo-upload\"\n                            type=\"file\"\n                            accept=\"image/*\"\n                            className=\"hidden\"\n                            onChange={handlePhotoUpload}\n                          />\n                        </div>\n                        <div className=\"flex gap-2 mt-6\">\n                          <Button\n                            size=\"sm\"\n                            onClick={handleSaveProfile}\n                            disabled={updateProfileMutation.isPending}\n                            className=\"flex-1 bg-gradient-to-r from-neon-turquoise to-electric text-black\"\n                          >\n                            <Save className=\"h-4 w-4 mr-1\" />\n                            Сохранить\n                          </Button>\n                          <Button\n                            size=\"sm\"\n                            variant=\"outline\"\n                            onClick={() => {\n                              setEditingProfile(false);\n                              setNickname((user as any)?.nickname || '');\n                            }}\n                            className=\"flex-1 border-white/20 text-white hover:bg-white/10\"\n                          >\n                            Отмена\n                          </Button>\n                        </div>\n                      </div>\n                    ) : (\n                      <>\n                        <h3 className=\"text-xl font-bold text-neon-turquoise mb-1\">\n                          {(user as any)?.nickname || 'Пользователь'}\n                        </h3>\n                        <p className=\"text-sm text-white/70 mb-2\">{(user as any)?.email || ''}</p>\n                        <Badge className=\"text-neon-amber border-neon-amber\" variant=\"outline\">\n                          {getUserLevel(userRecipes.length)}\n                        </Badge>\n\n                      </>\n                    )}\n                  </div>\n                  \n                  {!editingProfile && (\n                    <div className=\"space-y-4\">\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-cream\">Рецептов создано:</span>\n                        <span className=\"text-neon-amber font-semibold\">\n                          {userRecipes.length}\n                        </span>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-cream\">Любимых рецептов:</span>\n                        <span className=\"text-neon-pink font-semibold\">\n                          {favoriteRecipes?.length || 0}\n                        </span>\n                      </div>\n                      <Button\n                        onClick={() => logoutMutation.mutate()}\n                        disabled={logoutMutation.isPending}\n                        variant=\"outline\"\n                        className=\"w-full border-red-500/50 text-red-400 hover:bg-red-500 hover:text-white transition-all duration-300\"\n                      >\n                        <LogOut className=\"h-4 w-4 mr-2\" />\n                        Выйти\n                      </Button>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n\n              {/* Stats Cards */}\n              <Card className=\"relative overflow-hidden bg-gradient-to-br from-neon-turquoise/10 to-electric/5 border border-neon-turquoise/20 backdrop-blur-md shadow-md shadow-cyan-500/10 hover:shadow-lg hover:shadow-cyan-500/15 transition-all duration-300\">\n                <div className=\"absolute inset-0 bg-gradient-to-br from-neon-turquoise/5 to-transparent\"></div>\n                <CardContent className=\"relative p-6 text-center\">\n                  <div className=\"bg-gradient-to-br from-neon-turquoise/20 to-electric/20 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <TrendingUp className=\"text-neon-turquoise text-2xl\" />\n                  </div>\n                  <h3 className=\"text-3xl font-bold bg-gradient-to-r from-neon-turquoise to-electric bg-clip-text text-transparent mb-2\">\n                    {userRecipes.reduce((sum, recipe) => sum + (recipe.ratingCount || 0), 0)}\n                  </h3>\n                  <p className=\"text-white/80 font-medium\">Общих оценок</p>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"relative overflow-hidden bg-gradient-to-br from-neon-amber/10 to-yellow-500/5 border border-neon-amber/20 backdrop-blur-md shadow-md shadow-yellow-500/10 hover:shadow-lg hover:shadow-yellow-500/15 transition-all duration-300\">\n                <div className=\"absolute inset-0 bg-gradient-to-br from-neon-amber/5 to-transparent\"></div>\n                <CardContent className=\"relative p-6 text-center\">\n                  <div className=\"bg-gradient-to-br from-neon-amber/20 to-yellow-500/20 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <Trophy className=\"text-neon-amber text-2xl\" />\n                  </div>\n                  <h3 className=\"text-3xl font-bold bg-gradient-to-r from-neon-amber to-yellow-400 bg-clip-text text-transparent mb-2\">\n                    {userRecipes.filter(recipe => parseFloat(recipe.rating?.toString() || '0') >= 4.5).length}\n                  </h3>\n                  <p className=\"text-white/80 font-medium\">Топ рецептов</p>\n                </CardContent>\n              </Card>\n              \n              <Card className=\"relative overflow-hidden bg-gradient-to-br from-neon-pink/10 to-purple-500/5 border border-neon-pink/20 backdrop-blur-md shadow-md shadow-pink-500/10 hover:shadow-lg hover:shadow-pink-500/15 transition-all duration-300\">\n                <div className=\"absolute inset-0 bg-gradient-to-br from-neon-pink/5 to-transparent\"></div>\n                <CardContent className=\"relative p-6 text-center\">\n                  <div className=\"bg-gradient-to-br from-neon-pink/20 to-purple-500/20 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <Clock className=\"text-neon-pink text-2xl\" />\n                  </div>\n                  <h3 className=\"text-3xl font-bold bg-gradient-to-r from-neon-pink to-purple-400 bg-clip-text text-transparent mb-2\">\n                    {userRecipes.filter(recipe => {\n                      const createdAt = new Date(recipe.createdAt!);\n                      const weekAgo = new Date(Date.now() - 7 * 24 * 60 * 60 * 1000);\n                      return createdAt > weekAgo;\n                    }).length}\n                  </h3>\n                  <p className=\"text-white/80 font-medium\">За эту неделю</p>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Recipes Tabs */}\n            <Tabs defaultValue=\"my-recipes\" className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-2 bg-graphite\">\n                <TabsTrigger \n                  value=\"my-recipes\" \n                  className=\"data-[state=active]:bg-neon-turquoise data-[state=active]:text-night-blue\"\n                >\n                  <Martini className=\"mr-2 h-4 w-4\" />\n                  Мои Рецепты ({userRecipes.length})\n                </TabsTrigger>\n                <TabsTrigger \n                  value=\"favorites\"\n                  className=\"data-[state=active]:bg-neon-pink data-[state=active]:text-night-blue\"\n                >\n                  <Heart className=\"mr-2 h-4 w-4\" />\n                  Избранное ({favoriteRecipes.length})\n                </TabsTrigger>\n              </TabsList>\n              \n              <TabsContent value=\"my-recipes\" className=\"mt-6\">\n                {recipesLoading ? (\n                  <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                    {[...Array(6)].map((_, index) => (\n                      <Card key={index} className=\"glass-effect border-none animate-pulse\">\n                        <div className=\"w-full h-48 bg-gray-700 rounded-t-lg\"></div>\n                        <CardContent className=\"p-4\">\n                          <div className=\"h-6 bg-gray-700 rounded mb-2\"></div>\n                          <div className=\"h-4 bg-gray-700 rounded mb-3\"></div>\n                          <div className=\"flex justify-between\">\n                            <div className=\"h-4 bg-gray-700 rounded w-16\"></div>\n                            <div className=\"h-4 bg-gray-700 rounded w-12\"></div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                ) : userRecipes.length === 0 ? (\n                  <div className=\"text-center py-12\">\n                    <Martini className=\"text-gray-400 text-6xl mx-auto mb-4\" />\n                    <p className=\"text-gray-400 text-lg\">Вы еще не создали ни одного рецепта</p>\n                    <p className=\"text-gray-500 mt-2\">Перейдите в конструктор, чтобы создать свой первый коктейль!</p>\n                  </div>\n                ) : (\n                  <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                    {userRecipes.map((recipe) => (\n                      <div key={recipe.id} className=\"relative group\">\n                        <RecipeCard\n                          recipe={recipe}\n                          onFavorite={handleFavorite}\n                          onView={handleViewRecipe}\n                          isFavorite={userFavorites.has(recipe.id)}\n                        />\n                        <div className=\"absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity\">\n                          <div className=\"flex space-x-1\">\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              className=\"h-8 w-8 p-0 bg-neon-turquoise/20 hover:bg-neon-turquoise/40\"\n                              onClick={() => handleViewRecipe(recipe.id)}\n                            >\n                              <Edit className=\"h-4 w-4 text-neon-turquoise\" />\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              className=\"h-8 w-8 p-0 bg-red-500/20 hover:bg-red-500/40\"\n                              onClick={() => handleDeleteRecipe(recipe.id)}\n                              disabled={deleteRecipeMutation.isPending}\n                            >\n                              <Trash2 className=\"h-4 w-4 text-red-400\" />\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </TabsContent>\n              \n              <TabsContent value=\"favorites\" className=\"mt-6\">\n                {favoritesLoading ? (\n                  <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                    {[...Array(6)].map((_, index) => (\n                      <Card key={index} className=\"glass-effect border-none animate-pulse\">\n                        <div className=\"w-full h-48 bg-gray-700 rounded-t-lg\"></div>\n                        <CardContent className=\"p-4\">\n                          <div className=\"h-6 bg-gray-700 rounded mb-2\"></div>\n                          <div className=\"h-4 bg-gray-700 rounded mb-3\"></div>\n                          <div className=\"flex justify-between\">\n                            <div className=\"h-4 bg-gray-700 rounded w-16\"></div>\n                            <div className=\"h-4 bg-gray-700 rounded w-12\"></div>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    ))}\n                  </div>\n                ) : favoriteRecipes.length === 0 ? (\n                  <div className=\"text-center py-12\">\n                    <Heart className=\"text-gray-400 text-6xl mx-auto mb-4\" />\n                    <p className=\"text-gray-400 text-lg\">У вас нет избранных рецептов</p>\n                    <p className=\"text-gray-500 mt-2\">Добавьте понравившиеся рецепты в избранное из каталога</p>\n                  </div>\n                ) : (\n                  <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                    {favoriteRecipes.map((recipe: Recipe) => (\n                      <RecipeCard\n                        key={recipe.id}\n                        recipe={recipe}\n                        onFavorite={handleFavorite}\n                        onView={handleViewRecipe}\n                        isFavorite={true}\n                      />\n                    ))}\n                  </div>\n                )}\n              </TabsContent>\n            </Tabs>\n          </div>\n        </div>\n      </section>\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":26213},"client/src/store/cocktail-store.ts":{"content":"import { create } from 'zustand';\nimport type { Ingredient, GlassType, RecipeIngredient } from '@shared/schema';\nimport { calculateCocktailStats, type CocktailCalculation } from '@/lib/cocktail-utils';\n\ninterface CocktailIngredient extends RecipeIngredient {\n  ingredient: Ingredient;\n}\n\ninterface CocktailStore {\n  // State\n  selectedGlass: GlassType | null;\n  ingredients: CocktailIngredient[];\n  cocktailStats: CocktailCalculation;\n  \n  // Actions\n  setSelectedGlass: (glass: GlassType | null) => void;\n  addIngredient: (ingredient: Ingredient, amount: number) => void;\n  updateIngredient: (index: number, amount: number) => void;\n  removeIngredient: (index: number) => void;\n  clearIngredients: () => void;\n  reorderIngredients: (startIndex: number, endIndex: number) => void;\n  \n  // Computed\n  recalculateStats: () => void;\n}\n\nexport const useCocktailStore = create<CocktailStore>((set, get) => ({\n  selectedGlass: null,\n  ingredients: [],\n  cocktailStats: {\n    totalVolume: 0,\n    totalAbv: 0,\n    totalCost: 0,\n    tasteBalance: { sweet: 0, sour: 0, bitter: 0, alcohol: 0 }\n  },\n  \n  setSelectedGlass: (glass) => set({ selectedGlass: glass }),\n  \n  addIngredient: (ingredient, amount) => {\n    const newIngredient: CocktailIngredient = {\n      id: Date.now(), // temporary ID\n      recipeId: '',\n      ingredientId: ingredient.id!,\n      amount: amount.toString(),\n      unit: ingredient.unit,\n      order: get().ingredients.length + 1,\n      ingredient,\n      createdAt: new Date()\n    };\n    \n    set((state) => ({\n      ingredients: [...state.ingredients, newIngredient]\n    }));\n    \n    get().recalculateStats();\n  },\n  \n  updateIngredient: (index, amount) => {\n    set((state) => ({\n      ingredients: state.ingredients.map((ingredient, i) => \n        i === index ? { ...ingredient, amount: amount.toString() } : ingredient\n      )\n    }));\n    \n    get().recalculateStats();\n  },\n  \n  removeIngredient: (index) => {\n    set((state) => ({\n      ingredients: state.ingredients.filter((_, i) => i !== index)\n    }));\n    \n    get().recalculateStats();\n  },\n  \n  clearIngredients: () => {\n    set({ \n      ingredients: [],\n      cocktailStats: {\n        totalVolume: 0,\n        totalAbv: 0,\n        totalCost: 0,\n        tasteBalance: { sweet: 0, sour: 0, bitter: 0, alcohol: 0 }\n      }\n    });\n  },\n  \n  reorderIngredients: (startIndex, endIndex) => {\n    set((state) => {\n      const newIngredients = [...state.ingredients];\n      const [reorderedItem] = newIngredients.splice(startIndex, 1);\n      newIngredients.splice(endIndex, 0, reorderedItem);\n      \n      // Update order property\n      return {\n        ingredients: newIngredients.map((ingredient, index) => ({\n          ...ingredient,\n          order: index + 1\n        }))\n      };\n    });\n    \n    get().recalculateStats();\n  },\n  \n  recalculateStats: () => {\n    const stats = calculateCocktailStats(get().ingredients);\n    set({ cocktailStats: stats });\n  }\n}));\n","size_bytes":2941},"client/src/components/cocktail/cocktail-metrics.tsx":{"content":"import { useCocktailStore } from '@/store/cocktail-store';\nimport { calculateCocktailStats } from '@/lib/cocktail-utils';\nimport { Zap, DollarSign, Droplets, Star, AlertTriangle } from 'lucide-react';\n\nexport function CocktailMetrics() {\n  const { selectedGlass, ingredients } = useCocktailStore();\n  const stats = calculateCocktailStats(ingredients);\n\n  const getVolumeColor = () => {\n    if (!selectedGlass) return 'text-muted-foreground';\n    const percentage = (stats.totalVolume / selectedGlass.capacity) * 100;\n    if (percentage < 50) return 'text-yellow-500';\n    if (percentage < 80) return 'text-green-500';\n    if (percentage < 100) return 'text-blue-500';\n    return 'text-red-500';\n  };\n\n  const getAbvColor = () => {\n    if (stats.totalAbv < 5) return 'text-green-500';\n    if (stats.totalAbv < 15) return 'text-yellow-500';\n    if (stats.totalAbv < 25) return 'text-orange-500';\n    return 'text-red-500';\n  };\n\n  const getCostColor = () => {\n    if (stats.totalCost < 100) return 'text-green-500';\n    if (stats.totalCost < 300) return 'text-yellow-500';\n    if (stats.totalCost < 500) return 'text-orange-500';\n    return 'text-red-500';\n  };\n\n  const getTasteRecommendations = () => {\n    const recommendations = [];\n    \n    if (stats.tasteBalance?.sweet > 7) {\n      recommendations.push({\n        icon: <AlertTriangle className=\"h-4 w-4\" />,\n        text: \"Слишком сладко - добавьте кислоты\",\n        color: \"text-yellow-400\"\n      });\n    }\n    \n    if (stats.tasteBalance?.sour > 7) {\n      recommendations.push({\n        icon: <AlertTriangle className=\"h-4 w-4\" />,\n        text: \"Слишком кисло - добавьте сладости\",\n        color: \"text-yellow-400\"\n      });\n    }\n    \n    if (stats.tasteBalance?.bitter > 6) {\n      recommendations.push({\n        icon: <AlertTriangle className=\"h-4 w-4\" />,\n        text: \"Горьковато - добавьте сладкий сироп\",\n        color: \"text-orange-400\"\n      });\n    }\n    \n    if (stats.totalAbv > 30) {\n      recommendations.push({\n        icon: <AlertTriangle className=\"h-4 w-4\" />,\n        text: \"Высокая крепость - добавьте разбавитель\",\n        color: \"text-red-400\"\n      });\n    }\n    \n    if (stats.totalVolume > 0 && selectedGlass && stats.totalVolume < selectedGlass.capacity * 0.3) {\n      recommendations.push({\n        icon: <Droplets className=\"h-4 w-4\" />,\n        text: \"Мало жидкости - добавьте ингредиенты\",\n        color: \"text-blue-400\"\n      });\n    }\n    \n    if (recommendations.length === 0 && stats.totalVolume > 0) {\n      recommendations.push({\n        icon: <Star className=\"h-4 w-4\" />,\n        text: \"Отличный баланс!\",\n        color: \"text-green-400\"\n      });\n    }\n    \n    return recommendations;\n  };\n\n  return (\n    <div className=\"flex flex-col h-full\">\n      <h3 className=\"text-lg font-semibold mb-4 text-foreground\">Характеристики</h3>\n      \n      <div className=\"space-y-4 flex-1\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <Droplets className=\"h-5 w-5 text-blue-500\" />\n            <span className=\"text-foreground\">Объем:</span>\n          </div>\n          <span className={`font-mono text-lg ${getVolumeColor()}`}>\n            {stats.totalVolume}ml\n          </span>\n        </div>\n        \n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <Zap className=\"h-5 w-5 text-yellow-500\" />\n            <span className=\"text-foreground\">Крепость:</span>\n          </div>\n          <span className={`font-mono text-lg ${getAbvColor()}`}>\n            {stats.totalAbv.toFixed(1)}%\n          </span>\n        </div>\n        \n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2\">\n            <DollarSign className=\"h-5 w-5 text-green-500\" />\n            <span className=\"text-foreground\">Стоимость:</span>\n          </div>\n          <span className={`font-mono text-lg ${getCostColor()}`}>\n            ₽{stats.totalCost.toFixed(0)}\n          </span>\n        </div>\n\n        {/* Capacity indicator */}\n        {selectedGlass && (\n          <div className=\"mt-4 pt-4 border-t border-border\">\n            <div className=\"flex justify-between text-sm text-muted-foreground mb-1\">\n              <span>Заполнение стакана</span>\n              <span>{((stats.totalVolume / selectedGlass.capacity) * 100).toFixed(0)}%</span>\n            </div>\n            <div className=\"w-full bg-muted rounded-full h-2\">\n              <div \n                className=\"bg-gradient-to-r from-blue-500 to-cyan-500 h-2 rounded-full transition-all duration-300\"\n                style={{ width: `${Math.min((stats.totalVolume / selectedGlass.capacity) * 100, 100)}%` }}\n              />\n            </div>\n          </div>\n        )}\n\n\n      </div>\n    </div>\n  );\n}","size_bytes":5069},"client/src/components/cocktail/compact-glass-selector.tsx":{"content":"import { useState } from 'react';\nimport { ChevronLeft, ChevronRight, Check } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { useCocktailStore } from '@/store/cocktail-store';\n\n// Import glass images\nimport martiniGlass from '@/assets/glass-images/martini.svg';\nimport highballGlass from '@/assets/glass-images/highball.svg';\nimport shotGlass from '@/assets/glass-images/shot.svg';\nimport rocksGlass from '@/assets/glass-images/rocks.svg';\nimport wineGlass from '@/assets/glass-images/wine.svg';\n\nconst glassTypes = [\n  { id: 'martini', name: 'Мартини', capacity: 150, image: martiniGlass },\n  { id: 'highball', name: 'Хайбол', capacity: 350, image: highballGlass },\n  { id: 'shot', name: 'Шот', capacity: 50, image: shotGlass },\n  { id: 'rocks', name: 'Рокс', capacity: 200, image: rocksGlass },\n  { id: 'wine', name: 'Вино', capacity: 180, image: wineGlass },\n];\n\nexport function CompactGlassSelector() {\n  const { selectedGlass, setSelectedGlass } = useCocktailStore();\n  const [currentIndex, setCurrentIndex] = useState(0);\n\n  const nextGlass = () => {\n    setCurrentIndex((prev) => (prev + 1) % glassTypes.length);\n  };\n\n  const prevGlass = () => {\n    setCurrentIndex((prev) => (prev - 1 + glassTypes.length) % glassTypes.length);\n  };\n\n  const selectCurrentGlass = () => {\n    const glass = glassTypes[currentIndex];\n    setSelectedGlass({\n      id: glass.id,\n      name: glass.name,\n      capacity: glass.capacity,\n    });\n  };\n\n  const currentGlass = glassTypes[currentIndex];\n  const isSelected = selectedGlass?.id === currentGlass.id;\n\n  return (\n    <div className=\"relative flex flex-col items-center h-full justify-between\">\n      {/* Navigation buttons positioned at main container edges */}\n      <Button\n        variant=\"ghost\"\n        size=\"icon\"\n        onClick={prevGlass}\n        className=\"absolute left-4 top-1/2 -translate-y-1/2 text-primary hover:text-primary/80 hover:bg-primary/10 w-16 h-16 z-10\"\n      >\n        <ChevronLeft className=\"h-24 w-24\" />\n      </Button>\n      \n      <Button\n        variant=\"ghost\"\n        size=\"icon\"\n        onClick={nextGlass}\n        className=\"absolute right-4 top-1/2 -translate-y-1/2 text-primary hover:text-primary/80 hover:bg-primary/10 w-16 h-16 z-10\"\n      >\n        <ChevronRight className=\"h-24 w-24\" />\n      </Button>\n\n      <div className=\"flex flex-col items-center space-y-6\">\n        <h3 className=\"text-lg font-semibold text-foreground mb-4\">Выберите стакан</h3>\n        \n        {/* Glass Image - centered without navigation interference */}\n        <div className=\"flex items-center justify-center w-full\">          \n          <div className=\"flex flex-col items-center space-y-2\">\n            {/* Enlarged glass image */}\n            <div className=\"w-48 h-56 flex items-center justify-center\">\n              <img\n                src={currentGlass.image}\n                alt={currentGlass.name}\n                className=\"w-full h-full object-contain filter drop-shadow-lg\"\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* Glass name closer to button */}\n        <div className=\"text-center\">\n          <h4 className=\"text-foreground font-medium text-lg\">{currentGlass.name}</h4>\n          <p className=\"text-muted-foreground text-sm\">{currentGlass.capacity}ml</p>\n        </div>\n\n        {/* Selection Button - smaller width with glowing shadow */}\n        <Button\n          onClick={selectCurrentGlass}\n          className={`w-[70%] mt-4 transition-all duration-300 ${\n            isSelected\n              ? 'bg-green-600 hover:bg-green-700 text-white shadow-lg shadow-green-500/50'\n              : 'bg-primary hover:bg-primary/90 text-primary-foreground shadow-lg shadow-primary/50 hover:shadow-primary/70'\n          }`}\n        >\n          {isSelected ? (\n            <>\n              <Check className=\"h-4 w-4 mr-2\" />\n              Выбран\n            </>\n          ) : (\n            'Выбрать'\n          )}\n        </Button>\n\n        {/* Dots Indicator - moved below button */}\n        <div className=\"flex space-x-2 mt-4\">\n          {glassTypes.map((_, index) => (\n            <button\n              key={index}\n              onClick={() => setCurrentIndex(index)}\n              className={`w-2 h-2 rounded-full transition-colors ${\n                index === currentIndex\n                  ? 'bg-primary'\n                  : 'bg-muted-foreground hover:bg-muted-foreground/80'\n              }`}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":4567},"client/src/components/cocktail/drink-visualizer.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { useCocktailStore } from \"@/store/cocktail-store\";\nimport { getIngredientColor } from \"@/lib/cocktail-utils\";\n\nexport default function DrinkVisualizer() {\n  const { selectedGlass, ingredients, cocktailStats } = useCocktailStore();\n\n  const renderGlass = () => {\n    if (!selectedGlass) {\n      return (\n        <div className=\"w-32 h-48 bg-gray-800 rounded-lg border-2 border-gray-600 flex items-center justify-center\">\n          <p className=\"text-gray-400 text-sm\">Выберите стакан</p>\n        </div>\n      );\n    }\n\n    const totalVolume = ingredients.reduce((sum, item) => sum + parseFloat(item.amount.toString()), 0);\n    const glassHeight = 192; // 48 * 4 = 192px\n    const filledHeight = Math.min(glassHeight * 0.8, (totalVolume / selectedGlass.capacity) * glassHeight);\n\n    let currentHeight = 0;\n    const layers = ingredients.map((item, index) => {\n      const itemVolume = parseFloat(item.amount.toString());\n      const layerHeight = (itemVolume / totalVolume) * filledHeight;\n      const layer = {\n        height: layerHeight,\n        bottom: currentHeight,\n        color: getIngredientColor(item.ingredient),\n        name: item.ingredient.name\n      };\n      currentHeight += layerHeight;\n      return layer;\n    });\n\n    const getGlassShape = () => {\n      switch (selectedGlass.shape) {\n        case 'martini':\n          return 'polygon(30% 0%, 70% 0%, 90% 100%, 10% 100%)';\n        case 'shot':\n          return 'polygon(25% 0%, 75% 0%, 80% 100%, 20% 100%)';\n        case 'highball':\n          return 'polygon(20% 0%, 80% 0%, 85% 100%, 15% 100%)';\n        default: // old-fashioned, rocks\n          return 'polygon(15% 0%, 85% 0%, 90% 100%, 10% 100%)';\n      }\n    };\n\n    return (\n      <div className=\"flex justify-center\">\n        <div \n          className=\"relative w-32 h-48 bg-gradient-to-b from-transparent to-gray-800 border-2 border-gray-400 overflow-hidden\"\n          style={{ clipPath: getGlassShape() }}\n        >\n          {/* Liquid layers */}\n          {layers.map((layer, index) => (\n            <div\n              key={index}\n              className=\"absolute left-0 right-0 liquid-layer opacity-90\"\n              style={{\n                height: `${layer.height}px`,\n                bottom: `${layer.bottom}px`,\n                background: `linear-gradient(to top, ${layer.color}, ${layer.color}dd)`,\n                transition: 'all 0.8s cubic-bezier(0.4, 0, 0.2, 1)'\n              }}\n            />\n          ))}\n          \n          {/* Ice cubes effect */}\n          {ingredients.some(item => item.ingredient.category === 'ice') && (\n            <>\n              <div className=\"absolute top-4 left-4 w-4 h-4 bg-blue-200 rounded opacity-80 animate-pulse\"></div>\n              <div className=\"absolute top-8 right-6 w-3 h-3 bg-blue-200 rounded opacity-80 animate-pulse\"></div>\n              <div className=\"absolute top-12 left-6 w-2 h-2 bg-blue-200 rounded opacity-80 animate-pulse\"></div>\n            </>\n          )}\n          \n          {/* Glass shine effect */}\n          <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white to-transparent opacity-10 w-2 animate-pulse\"></div>\n        </div>\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"flex flex-col h-full\">\n      <h3 className=\"text-2xl font-semibold mb-4 text-foreground\">\n        Визуализация\n      </h3>\n      \n      <div className=\"mb-6 flex-1 flex items-center justify-center\">\n        {renderGlass()}\n      </div>\n      \n      {/* Drink Stats */}\n      <div className=\"space-y-3\">\n        <div className=\"flex justify-between items-center\">\n          <span className=\"text-muted-foreground\">Объем:</span>\n          <span className=\"text-foreground font-semibold\">\n            {cocktailStats.totalVolume}ml\n          </span>\n        </div>\n        <div className=\"flex justify-between items-center\">\n          <span className=\"text-muted-foreground\">Крепость:</span>\n          <span className=\"text-foreground font-semibold\">\n            {cocktailStats.totalAbv}%\n          </span>\n        </div>\n        <div className=\"flex justify-between items-center\">\n          <span className=\"text-muted-foreground\">Стоимость:</span>\n          <span className=\"text-foreground font-semibold\">\n            ₽{cocktailStats.totalCost}\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4441},"client/src/components/cocktail/glass-selector.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Wine, GlassWater, Circle } from \"lucide-react\";\nimport { useCocktailStore } from \"@/store/cocktail-store\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport type { GlassType } from \"@shared/schema\";\n\nconst GlassIcon = ({ shape }: { shape: string }) => {\n  switch (shape) {\n    case 'martini':\n      return <Wine className=\"text-3xl\" />;\n    case 'highball':\n      return <GlassWater className=\"text-3xl\" />;\n    case 'shot':\n      return <Circle className=\"text-3xl\" />;\n    default:\n      return <GlassWater className=\"text-3xl\" />;\n  }\n};\n\nexport default function GlassSelector() {\n  const { selectedGlass, setSelectedGlass } = useCocktailStore();\n  \n  const { data: glassTypes = [], isLoading } = useQuery<GlassType[]>({\n    queryKey: ['/api/glass-types'],\n  });\n\n  if (isLoading) {\n    return (\n      <Card className=\"glass-effect border-none\">\n        <CardContent className=\"p-6\">\n          <h3 className=\"text-2xl font-semibold mb-4 text-neon-turquoise\">\n            Выбор стакана\n          </h3>\n          <div className=\"grid grid-cols-2 gap-4\">\n            {[...Array(4)].map((_, i) => (\n              <div key={i} className=\"border-2 border-gray-600 rounded-lg p-4 text-center animate-pulse\">\n                <div className=\"h-12 w-12 bg-gray-600 rounded mx-auto mb-2\"></div>\n                <div className=\"h-4 bg-gray-600 rounded mb-1\"></div>\n                <div className=\"h-3 bg-gray-600 rounded\"></div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"glass-effect border-none\">\n      <CardContent className=\"p-6\">\n        <h3 className=\"text-2xl font-semibold mb-4 text-neon-turquoise\">\n          Выбор стакана\n        </h3>\n        <div className=\"grid grid-cols-2 gap-4\">\n          {glassTypes.map((glass) => (\n            <Button\n              key={glass.id}\n              variant=\"outline\"\n              className={`p-4 h-auto flex flex-col items-center space-y-2 ${\n                selectedGlass?.id === glass.id \n                  ? 'neon-border bg-neon-turquoise/20 text-neon-turquoise' \n                  : 'border-gray-600 hover:border-neon-turquoise'\n              }`}\n              onClick={() => setSelectedGlass(glass)}\n            >\n              <GlassIcon shape={glass.shape} />\n              <div className=\"text-center\">\n                <p className=\"font-semibold\">{glass.name}</p>\n                <p className=\"text-sm text-cream\">{glass.capacity}ml</p>\n              </div>\n            </Button>\n          ))}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2737},"client/src/components/cocktail/ingredient-recommendations.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Input } from \"@/components/ui/input\";\nimport { Plus, Search } from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useCocktailStore } from \"@/store/cocktail-store\";\nimport type { Ingredient } from \"@shared/schema\";\n\nconst CATEGORIES = [\n  { id: 'alcohol', label: 'Алкоголь', color: 'bg-neon-turquoise' },\n  { id: 'juice', label: 'Соки', color: 'bg-neon-amber' },\n  { id: 'syrup', label: 'Сиропы', color: 'bg-neon-pink' },\n  { id: 'fruit', label: 'Фрукты', color: 'bg-neon-purple' },\n  { id: 'ice', label: 'Лёд', color: 'bg-gray-500' },\n];\n\nexport default function IngredientRecommendations() {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedCategory, setSelectedCategory] = useState('alcohol');\n  const { addIngredient } = useCocktailStore();\n\n  // Fetch all categories to enable search across all ingredients\n  const { data: alcoholIngredients = [] } = useQuery<Ingredient[]>({\n    queryKey: ['/api/ingredients', 'alcohol'],\n  });\n  const { data: juiceIngredients = [] } = useQuery<Ingredient[]>({\n    queryKey: ['/api/ingredients', 'juice'],\n  });\n  const { data: syrupIngredients = [] } = useQuery<Ingredient[]>({\n    queryKey: ['/api/ingredients', 'syrup'],\n  });\n  const { data: fruitIngredients = [] } = useQuery<Ingredient[]>({\n    queryKey: ['/api/ingredients', 'fruit'],\n  });\n  const { data: iceIngredients = [] } = useQuery<Ingredient[]>({\n    queryKey: ['/api/ingredients', 'ice'],\n  });\n\n  const { data: categoryIngredients = [], isLoading } = useQuery<Ingredient[]>({\n    queryKey: ['/api/ingredients', selectedCategory],\n  });\n\n  // Combine all ingredients for search\n  const allIngredients = useMemo(() => [\n    ...alcoholIngredients,\n    ...juiceIngredients,\n    ...syrupIngredients,\n    ...fruitIngredients,\n    ...iceIngredients,\n  ], [alcoholIngredients, juiceIngredients, syrupIngredients, fruitIngredients, iceIngredients]);\n\n  // Filter ingredients based on search query\n  const filteredIngredients = useMemo(() => {\n    if (searchQuery.trim()) {\n      return allIngredients.filter(ingredient =>\n        ingredient.name.toLowerCase().includes(searchQuery.toLowerCase())\n      );\n    }\n    return categoryIngredients;\n  }, [searchQuery, allIngredients, categoryIngredients]);\n\n  const handleAddIngredient = (ingredient: Ingredient) => {\n    const defaultAmount = ingredient.unit === 'ml' ? 30 : 1;\n    addIngredient(ingredient, defaultAmount);\n  };\n\n  return (\n    <div className=\"flex flex-col h-full\">\n      <h3 className=\"text-lg font-semibold mb-4 text-foreground\">\n        Рекомендации\n      </h3>\n      \n      {/* Search Input */}\n      <div className=\"relative mb-4\">\n        <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n        <Input\n          placeholder=\"Поиск ингредиентов...\"\n          value={searchQuery}\n          onChange={(e) => setSearchQuery(e.target.value)}\n          className=\"pl-10\"\n        />\n      </div>\n      \n      {/* Category Tabs - hide when searching */}\n      {!searchQuery.trim() && (\n        <div className=\"flex flex-wrap gap-2 mb-4\">\n          {CATEGORIES.map((category) => (\n            <Button\n              key={category.id}\n              variant={selectedCategory === category.id ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setSelectedCategory(category.id)}\n            >\n              {category.label}\n            </Button>\n          ))}\n        </div>\n      )}\n\n      {/* Available Ingredients */}\n      <div className=\"flex-1\">\n        <ScrollArea className=\"h-80\">\n          {isLoading && !searchQuery.trim() ? (\n            <div className=\"space-y-2\">\n              {[...Array(3)].map((_, i) => (\n                <div key={i} className=\"flex items-center justify-between p-3 bg-muted rounded-lg animate-pulse\">\n                  <div className=\"flex items-center space-x-3\">\n                    <div className=\"w-4 h-4 bg-muted-foreground rounded-full\"></div>\n                    <div className=\"h-4 bg-muted-foreground rounded w-24\"></div>\n                  </div>\n                  <div className=\"h-8 bg-muted-foreground rounded w-16\"></div>\n                </div>\n              ))}\n            </div>\n          ) : filteredIngredients.length === 0 ? (\n            <p className=\"text-center text-muted-foreground py-4\">\n              {searchQuery.trim() ? 'Ингредиенты не найдены' : 'Нет доступных ингредиентов'}\n            </p>\n          ) : (\n            <div className=\"space-y-2\">\n              {filteredIngredients.map((ingredient) => (\n                <div\n                  key={ingredient.id}\n                  className=\"flex items-center justify-between p-3 bg-muted rounded-lg hover:bg-muted/80 transition-colors\"\n                >\n                  <div className=\"flex items-center space-x-3\">\n                    <div \n                      className=\"w-4 h-4 rounded-full\"\n                      style={{ backgroundColor: ingredient.color }}\n                    ></div>\n                    <div>\n                      <p className=\"font-semibold text-foreground\">{ingredient.name}</p>\n                      <p className=\"text-sm text-muted-foreground\">\n                        {ingredient.abv}% ABV • ₽{ingredient.pricePerLiter}/л\n                      </p>\n                    </div>\n                  </div>\n                  <Button\n                    size=\"sm\"\n                    onClick={() => handleAddIngredient(ingredient)}\n                    className=\"h-8 w-8 p-0\"\n                  >\n                    <Plus className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              ))}\n            </div>\n          )}\n        </ScrollArea>\n      </div>\n    </div>\n  );\n}","size_bytes":5994},"client/src/components/cocktail/ingredient-selector.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Minus } from \"lucide-react\";\nimport { useCocktailStore } from \"@/store/cocktail-store\";\n\nexport default function IngredientSelector() {\n  const { ingredients, updateIngredient, removeIngredient } = useCocktailStore();\n\n  const handleUpdateAmount = (index: number, value: string) => {\n    const amount = parseFloat(value) || 0;\n    updateIngredient(index, amount);\n  };\n\n  return (\n    <div className=\"flex flex-col h-full\">\n      <h3 className=\"text-lg font-semibold mb-4 text-foreground\">\n        Добавленные ингредиенты\n      </h3>\n      \n      <div className=\"flex-1\">\n        {ingredients.length === 0 ? (\n          <p className=\"text-center text-muted-foreground py-4\">Пока нет добавленных ингредиентов</p>\n        ) : (\n          <div className=\"space-y-2\">\n            {ingredients.map((item, index) => (\n              <div\n                key={index}\n                className=\"flex items-center justify-between p-3 bg-muted rounded-lg\"\n              >\n                <div className=\"flex items-center space-x-3\">\n                  <div \n                    className=\"w-4 h-4 rounded-full\"\n                    style={{ backgroundColor: item.ingredient.color }}\n                  ></div>\n                  <div>\n                    <p className=\"font-semibold text-foreground\">{item.ingredient.name}</p>\n                    <Badge variant=\"outline\" className=\"text-xs\">\n                      {item.ingredient.category}\n                    </Badge>\n                  </div>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Input\n                    type=\"number\"\n                    value={item.amount}\n                    onChange={(e) => handleUpdateAmount(index, e.target.value)}\n                    className=\"w-16 h-8 text-center\"\n                    min=\"0\"\n                    step=\"0.1\"\n                  />\n                  <span className=\"text-sm text-muted-foreground\">{item.unit}</span>\n                  <Button\n                    size=\"sm\"\n                    variant=\"destructive\"\n                    onClick={() => removeIngredient(index)}\n                    className=\"h-8 w-8 p-0\"\n                  >\n                    <Minus className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}","size_bytes":2586},"client/src/components/cocktail/taste-balance.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { useCocktailStore } from \"@/store/cocktail-store\";\n\nexport default function TasteBalance() {\n  const { cocktailStats } = useCocktailStore();\n\n  const tasteMetrics = [\n    { \n      name: 'Сладость', \n      value: cocktailStats.tasteBalance.sweet, \n      color: 'bg-pink-500',\n      textColor: 'text-pink-400' \n    },\n    { \n      name: 'Кислота', \n      value: cocktailStats.tasteBalance.sour, \n      color: 'bg-yellow-500',\n      textColor: 'text-yellow-400' \n    },\n    { \n      name: 'Горечь', \n      value: cocktailStats.tasteBalance.bitter, \n      color: 'bg-orange-500',\n      textColor: 'text-orange-400' \n    },\n    { \n      name: 'Алкоголь', \n      value: cocktailStats.tasteBalance.alcohol, \n      color: 'bg-red-500',\n      textColor: 'text-red-400' \n    },\n  ];\n\n  return (\n    <Card className=\"glass-effect border-none\">\n      <CardContent className=\"p-6\">\n        <h3 className=\"text-2xl font-semibold mb-6 text-neon-amber\">\n          Баланс вкуса\n        </h3>\n        \n        <div className=\"grid md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {tasteMetrics.map((metric) => (\n            <div key={metric.name} className=\"text-center\">\n              <div className={`text-lg font-semibold ${metric.textColor} mb-2`}>\n                {metric.name}\n              </div>\n              <div className=\"w-full bg-gray-600 rounded-full h-3 mb-2\">\n                <div \n                  className={`h-3 rounded-full transition-all duration-500 ${metric.color}`}\n                  style={{ width: `${(metric.value / 10) * 100}%` }}\n                />\n              </div>\n              <span className=\"text-cream font-semibold\">\n                {metric.value.toFixed(1)}/10\n              </span>\n            </div>\n          ))}\n        </div>\n        \n        {/* Recommendations */}\n        <div className=\"mt-6 p-4 bg-charcoal rounded-lg\">\n          <h4 className=\"text-lg font-semibold text-neon-turquoise mb-2\">Рекомендации</h4>\n          <div className=\"space-y-1 text-sm text-cream\">\n            {cocktailStats.tasteBalance.sweet > 7 && (\n              <p className=\"text-yellow-400\">• Слишком сладко - добавьте кислоты</p>\n            )}\n            {cocktailStats.tasteBalance.sour > 7 && (\n              <p className=\"text-pink-400\">• Слишком кисло - добавьте сладости</p>\n            )}\n            {cocktailStats.tasteBalance.bitter > 6 && (\n              <p className=\"text-orange-400\">• Много горечи - разбавьте соком</p>\n            )}\n            {cocktailStats.tasteBalance.alcohol > 8 && (\n              <p className=\"text-red-400\">• Очень крепко - добавьте безалкогольные ингредиенты</p>\n            )}\n            {cocktailStats.totalVolume < 50 && (\n              <p className=\"text-gray-400\">• Маленький объем - добавьте больше ингредиентов</p>\n            )}\n            {cocktailStats.totalVolume > 400 && (\n              <p className=\"text-gray-400\">• Большой объем - уменьшите количество</p>\n            )}\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3395},"client/src/components/landing/courses-section.tsx":{"content":"import { BookOpen, Video, Beaker, Award } from \"lucide-react\";\n\nconst CoursesSection = () => {\n  const courses = [\n    {\n      title: \"Основы миксологии\",\n      level: \"Новичок\",\n      image: \"/attached_assets/7b2e9f21-5799-4ec1-94a8-77404805e855_1752844481467.jpg\",\n      levelColor: \"text-emerald-400\",\n      bgGradient: \"from-emerald-500/20 to-cyan-500/20\"\n    },\n    {\n      title: \"Креативный декор\", \n      level: \"Средний\",\n      image: \"/attached_assets/6d059335-5b16-412d-b1e0-9d4fdec2fabd_1752844498127.jpg\",\n      levelColor: \"text-amber-400\",\n      bgGradient: \"from-amber-500/20 to-orange-500/20\"\n    },\n    {\n      title: \"Продвинутые техники\",\n      level: \"Профи\", \n      image: \"/attached_assets/Leonardo_Phoenix_10_A_modern_elegant_cocktail_in_a_coupe_glass_3_1752844509292.jpg\",\n      levelColor: \"text-purple-400\",\n      bgGradient: \"from-purple-500/20 to-pink-500/20\"\n    }\n  ];\n\n  const features = [\n    {\n      icon: BookOpen,\n      text: \"10+ курсов\",\n      accent: \"text-pink-400\",\n      description: \"от базовых до авторских техник\"\n    },\n    {\n      icon: Video,\n      text: \"Видео и инфографика\", \n      accent: \"text-cyan-400\",\n      description: \"учись в любое время\"\n    },\n    {\n      icon: Beaker,\n      text: \"Практика и рецепты\",\n      accent: \"text-amber-300\", \n      description: \"собирай напитки в конструкторе\"\n    },\n    {\n      icon: Award,\n      text: \"Сертификат\",\n      accent: \"text-violet-300\",\n      description: \"подтверждай свои навыки\"\n    }\n  ];\n\n  return (\n    <section className=\"py-16 bg-[#0C0C1C] relative overflow-hidden\">\n      {/* Background glow effects */}\n      <div className=\"absolute inset-0\">\n        <div className=\"absolute top-1/4 left-1/4 w-96 h-96 bg-cyan-500/10 rounded-full blur-3xl\"></div>\n        <div className=\"absolute bottom-1/4 right-1/4 w-96 h-96 bg-purple-500/10 rounded-full blur-3xl\"></div>\n      </div>\n      \n      <div className=\"container mx-auto px-4 relative z-10 max-w-6xl\">\n        {/* Two-column layout: Content left, Image right */}\n        <div className=\"grid lg:grid-cols-2 gap-12 items-center mb-16 max-[1024px]:grid-cols-1 max-[1024px]:gap-6\">\n          {/* Left Column - Content (Desktop) */}\n          <div className=\"space-y-8 max-[1024px]:hidden\">\n            <div>\n              <h2 className=\"text-4xl font-bold text-[#00FFF0] mb-4 leading-tight\">\n                Стань мастером коктейлей\n              </h2>\n              <p className=\"text-lg text-gray-300 leading-relaxed\">\n                Интерактивные мини-курсы по миксологии, техникам и креативу для барменов и ценителей напитков.\n              </p>\n            </div>\n\n            {/* Features List */}\n            <ul className=\"space-y-4 text-left\">\n              {features.map((feature, index) => (\n                <li key={index} className=\"flex items-start space-x-3 text-base text-gray-300\">\n                  <feature.icon className={`w-5 h-5 mt-1 ${feature.accent}`} />\n                  <span>\n                    <span className={`${feature.accent} font-medium`}>{feature.text}</span>\n                    {\" — \"}\n                    <span>{feature.description}</span>\n                  </span>\n                </li>\n              ))}\n            </ul>\n\n            {/* CTA Button */}\n            <div className=\"pt-4\">\n              <button className=\"inline-block px-8 py-4 rounded-xl text-white bg-gradient-to-r from-[#FF4D9D] to-[#B388EB] hover:from-[#FF4D9D]/90 hover:to-[#B388EB]/90 shadow-lg shadow-pink-500/25 hover:shadow-pink-500/40 transition-all duration-300 font-medium text-lg\">\n                Изучить курсы\n              </button>\n            </div>\n          </div>\n\n          {/* Right Column - Bartender Image (Desktop) */}\n          <div className=\"relative flex justify-center max-[1024px]:hidden\">\n            <div className=\"relative\">\n              {/* Bartender Image */}\n              <div className=\"relative w-80 h-96 rounded-2xl overflow-hidden border border-slate-700/50 animate-shimmer-shadow\">\n                <img \n                  src=\"/attached_assets/Leonardo_Phoenix_10_A_stylish_male_bartender_with_rolledup_sle_2 (1)_1752845021301.jpg\"\n                  alt=\"Professional bartender creating cocktails\"\n                  className=\"w-full h-full object-cover\"\n                />\n                {/* Dynamic glow overlay */}\n                <div className=\"absolute inset-0 bg-gradient-to-br from-cyan-400/10 to-pink-400/10 rounded-2xl\"></div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Mobile Layout - Custom Order */}\n        <div className=\"hidden max-[1024px]:block space-y-8\">\n          {/* 1. Main Text */}\n          <div className=\"text-center\">\n            <h2 className=\"text-4xl font-bold text-[#00FFF0] mb-6 leading-tight max-[480px]:text-3xl max-[1024px]:mt-0\">\n              Стань мастером коктейлей\n            </h2>\n            <p className=\"text-lg text-gray-300 leading-relaxed max-[480px]:text-base px-4\">\n              Интерактивные мини-курсы по миксологии, техникам и креативу для барменов и ценителей напитков.\n            </p>\n          </div>\n\n          {/* 2. Bartender Image */}\n          <div className=\"relative flex justify-center\">\n            <div className=\"relative\">\n              <div className=\"relative w-80 h-96 rounded-2xl overflow-hidden border border-slate-700/50 animate-shimmer-shadow max-[480px]:w-72 max-[480px]:h-80\">\n                <img \n                  src=\"/attached_assets/Leonardo_Phoenix_10_A_stylish_male_bartender_with_rolledup_sle_2 (1)_1752845021301.jpg\"\n                  alt=\"Professional bartender creating cocktails\"\n                  className=\"w-full h-full object-cover\"\n                />\n                <div className=\"absolute inset-0 bg-gradient-to-br from-cyan-400/10 to-pink-400/10 rounded-2xl\"></div>\n              </div>\n            </div>\n          </div>\n\n          {/* 3. Features List */}\n          <div className=\"px-4\">\n            <ul className=\"space-y-4 text-left\">\n              {features.map((feature, index) => (\n                <li key={index} className=\"flex items-start space-x-3 text-base text-gray-300 max-[480px]:text-sm\">\n                  <feature.icon className={`w-5 h-5 mt-1 ${feature.accent} max-[480px]:w-4 max-[480px]:h-4`} />\n                  <span>\n                    <span className={`${feature.accent} font-medium`}>{feature.text}</span>\n                    {\" — \"}\n                    <span>{feature.description}</span>\n                  </span>\n                </li>\n              ))}\n            </ul>\n          </div>\n\n          {/* 4. CTA Button - Centered and Smaller */}\n          <div className=\"pt-4 text-center\">\n            <button className=\"inline-block px-7 py-3 rounded-xl text-white bg-gradient-to-r from-[#FF4D9D] to-[#B388EB] hover:from-[#FF4D9D]/90 hover:to-[#B388EB]/90 shadow-lg shadow-pink-500/25 hover:shadow-pink-500/40 transition-all duration-300 font-medium text-lg max-[480px]:px-6 max-[480px]:py-3 max-[480px]:text-base\">\n              Изучить курсы\n            </button>\n          </div>\n        </div>\n\n        {/* Course Cards Section */}\n        <div className=\"mt-16\">\n          <h3 className=\"text-2xl font-bold text-white text-center mb-8\">Популярные курсы</h3>\n          \n          <div className=\"grid md:grid-cols-3 gap-6 w-[90%] mx-auto\">\n            {courses.map((course, index) => (\n              <div key={index} className=\"group bg-gradient-to-br from-slate-800/50 to-slate-900/50 rounded-xl p-6 border border-slate-700/50 hover:border-slate-600/50 transition-all duration-300 hover:scale-105 hover:shadow-xl hover:shadow-slate-900/20 flex flex-col\">\n                {/* Course Image */}\n                <div className=\"w-full h-64 rounded-lg mb-4 overflow-hidden\">\n                  <img \n                    src={course.image} \n                    alt={course.title}\n                    className=\"w-full h-full object-cover group-hover:scale-110 transition-transform duration-300\"\n                  />\n                </div>\n                \n                {/* Course Content */}\n                <div className=\"flex flex-col flex-1\">\n                  <h4 className=\"text-white text-xl font-semibold group-hover:text-cyan-300 transition-colors whitespace-nowrap overflow-hidden text-ellipsis mb-2\">\n                    {course.title}\n                  </h4>\n                  <span className={`text-sm font-medium ${course.levelColor} mb-4`}>\n                    {course.level}\n                  </span>\n                  \n                  <button className=\"w-full mt-auto px-4 py-2 bg-gradient-to-r from-pink-500 to-purple-500 hover:from-pink-400 hover:to-purple-400 text-white rounded-lg transition-all duration-300 font-medium hover:shadow-lg hover:shadow-pink-500/25 max-[480px]:mx-auto max-[480px]:w-auto max-[480px]:px-6\">\n                    Записаться\n                  </button>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default CoursesSection;","size_bytes":9520},"client/src/components/layout/footer.tsx":{"content":"export default function Footer() {\n  return (\n    <footer \n      className=\"relative py-24 text-white\"\n      style={{\n        background: 'linear-gradient(135deg, #0f172a 0%, #1e293b 50%, #334155 100%)',\n      }}\n    >\n      {/* Grid overlay */}\n      <div \n        className=\"absolute inset-0 opacity-20\"\n        style={{\n          backgroundImage: `\n            linear-gradient(rgba(0, 255, 255, 0.1) 1px, transparent 1px),\n            linear-gradient(90deg, rgba(0, 255, 255, 0.1) 1px, transparent 1px)\n          `,\n          backgroundSize: '50px 50px'\n        }}\n      />\n      \n      <div className=\"container mx-auto px-6 relative\">\n        {/* Top section with links */}\n        <div className=\"grid md:grid-cols-4 gap-12 mb-16\">\n          <div>\n            <h3 className=\"text-2xl font-bold mb-6 bg-gradient-to-r from-neon-pink to-neon-turquoise bg-clip-text text-transparent\">\n              Cocktailo\n            </h3>\n            <p className=\"text-zinc-400 leading-relaxed\">\n              Современная платформа для создания уникальных коктейлей с AI-ассистентом и реалистичной 3D визуализацией\n            </p>\n          </div>\n          \n          <div>\n            <h4 className=\"text-lg font-semibold mb-6 text-neon-turquoise\">Продукт</h4>\n            <ul className=\"space-y-3 text-zinc-400\">\n              <li><a href=\"/constructor\" className=\"hover:text-neon-turquoise transition-colors\">Конструктор</a></li>\n              <li><a href=\"/generator\" className=\"hover:text-neon-turquoise transition-colors\">Генератор</a></li>\n              <li><a href=\"/catalog\" className=\"hover:text-neon-turquoise transition-colors\">Каталог</a></li>\n              <li><a href=\"/profile\" className=\"hover:text-neon-turquoise transition-colors\">Профиль</a></li>\n            </ul>\n          </div>\n          \n          <div>\n            <h4 className=\"text-lg font-semibold mb-6 text-neon-turquoise\">Поддержка</h4>\n            <ul className=\"space-y-3 text-zinc-400\">\n              <li><a href=\"#\" className=\"hover:text-neon-turquoise transition-colors\">Помощь</a></li>\n              <li><a href=\"#\" className=\"hover:text-neon-turquoise transition-colors\">Контакты</a></li>\n              <li><a href=\"#\" className=\"hover:text-neon-turquoise transition-colors\">FAQ</a></li>\n              <li><a href=\"#\" className=\"hover:text-neon-turquoise transition-colors\">Обратная связь</a></li>\n            </ul>\n          </div>\n          \n          <div>\n            <h4 className=\"text-lg font-semibold mb-6 text-neon-turquoise\">Компания</h4>\n            <ul className=\"space-y-3 text-zinc-400\">\n              <li><a href=\"#\" className=\"hover:text-neon-turquoise transition-colors\">О нас</a></li>\n              <li><a href=\"#\" className=\"hover:text-neon-turquoise transition-colors\">Блог</a></li>\n              <li><a href=\"#\" className=\"hover:text-neon-turquoise transition-colors\">Карьера</a></li>\n              <li><a href=\"#\" className=\"hover:text-neon-turquoise transition-colors\">Пресс-кит</a></li>\n            </ul>\n          </div>\n        </div>\n\n        {/* Bottom section */}\n        <div className=\"mt-12 pt-8 border-t border-slate-800\">\n          <div className=\"flex flex-col md:flex-row justify-between items-center space-y-4 md:space-y-0\">\n            <p className=\"text-zinc-500 text-sm\">\n              &copy; 2025 Cocktailo. Все права защищены.\n            </p>\n            \n            {/* Social icons */}\n            <div className=\"flex space-x-6\">\n              <a\n                href=\"https://t.me/cocktailo\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"w-10 h-10 flex items-center justify-center rounded-full border border-slate-700 text-zinc-400 hover:text-cyan-300 hover:border-cyan-400 transition-all duration-300 hover:scale-110\"\n                style={{\n                  backdropFilter: 'blur(10px)',\n                  backgroundColor: 'rgba(15, 23, 42, 0.5)'\n                }}\n                onMouseEnter={(e) => {\n                  (e.currentTarget as HTMLElement).style.boxShadow = '0 0 15px rgba(0, 255, 255, 0.4)';\n                }}\n                onMouseLeave={(e) => {\n                  (e.currentTarget as HTMLElement).style.boxShadow = 'none';\n                }}\n              >\n                <svg fill=\"currentColor\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\n                  <path d=\"M19.2,4.4L2.9,10.7c-1.1,0.4-1.1,1.1-0.2,1.3l4.1,1.3l1.6,4.8c0.2,0.5,0.1,0.7,0.6,0.7c0.4,0,0.6-0.2,0.8-0.4 c0.1-0.1,1-1,2-2l4.2,3.1c0.8,0.4,1.3,0.2,1.5-0.7l2.8-13.1C20.6,4.6,19.9,4,19.2,4.4z M17.1,7.4l-7.8,7.1L9,17.8L7.4,13l9.2-5.8 C17,6.9,17.4,7.1,17.1,7.4z\"/>\n                </svg>\n              </a>\n              \n              <a\n                href=\"https://vk.com/cocktailo\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"w-10 h-10 flex items-center justify-center rounded-full border border-slate-700 text-zinc-400 hover:text-cyan-300 hover:border-cyan-400 transition-all duration-300 hover:scale-110\"\n                style={{\n                  backdropFilter: 'blur(10px)',\n                  backgroundColor: 'rgba(15, 23, 42, 0.5)'\n                }}\n                onMouseEnter={(e) => {\n                  (e.currentTarget as HTMLElement).style.boxShadow = '0 0 15px rgba(0, 255, 255, 0.4)';\n                }}\n                onMouseLeave={(e) => {\n                  (e.currentTarget as HTMLElement).style.boxShadow = 'none';\n                }}\n              >\n                <svg fill=\"none\" stroke=\"currentColor\" width=\"16\" height=\"16\" viewBox=\"0 0 48 48\">\n                  <path strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\" d=\"M27.55,35.19V28.55c4.46.68,5.87,4.19,8.71,6.64H43.5a29.36,29.36,0,0,0-7.9-10.47c2.6-3.58,5.36-6.95,6.71-12.06H35.73c-2.58,3.91-3.94,8.49-8.18,11.51V12.66H18l2.28,2.82,0,10.05c-3.7-.43-6.2-7.2-8.91-12.87H4.5C7,20.32,12.26,37.13,27.55,35.19Z\"/>\n                </svg>\n              </a>\n              \n              <a\n                href=\"https://instagram.com/cocktailo\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"w-10 h-10 flex items-center justify-center rounded-full border border-slate-700 text-zinc-400 hover:text-cyan-300 hover:border-cyan-400 transition-all duration-300 hover:scale-110\"\n                style={{\n                  backdropFilter: 'blur(10px)',\n                  backgroundColor: 'rgba(15, 23, 42, 0.5)'\n                }}\n                onMouseEnter={(e) => {\n                  (e.currentTarget as HTMLElement).style.boxShadow = '0 0 15px rgba(0, 255, 255, 0.4)';\n                }}\n                onMouseLeave={(e) => {\n                  (e.currentTarget as HTMLElement).style.boxShadow = 'none';\n                }}\n              >\n                <svg fill=\"currentColor\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\">\n                  <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M12 18C15.3137 18 18 15.3137 18 12C18 8.68629 15.3137 6 12 6C8.68629 6 6 8.68629 6 12C6 15.3137 8.68629 18 12 18ZM12 16C14.2091 16 16 14.2091 16 12C16 9.79086 14.2091 8 12 8C9.79086 8 8 9.79086 8 12C8 14.2091 9.79086 16 12 16Z\"/>\n                  <path d=\"M18 5C18.5523 5 19 5.44772 19 6C19 6.55228 18.5523 7 18 7C17.4477 7 17 6.55228 17 6C17 5.44772 17.4477 5 18 5Z\"/>\n                  <path fillRule=\"evenodd\" clipRule=\"evenodd\" d=\"M1.65396 4.27606C1 5.55953 1 7.23969 1 10.6V13.4C1 16.7603 1 18.4405 1.65396 19.7239C2.2292 20.8529 3.14708 21.7708 4.27606 22.346C5.55953 23 7.23969 23 10.6 23H13.4C16.7603 23 18.4405 23 19.7239 22.346C20.8529 21.7708 21.7708 20.8529 22.346 19.7239C23 18.4405 23 16.7603 23 13.4V10.6C23 7.23969 23 5.55953 22.346 4.27606C21.7708 3.14708 20.8529 2.2292 19.7239 1.65396C18.4405 1 16.7603 1 13.4 1H10.6C7.23969 1 5.55953 1 4.27606 1.65396C3.14708 2.2292 2.2292 3.14708 1.65396 4.27606ZM13.4 3H10.6C8.88684 3 7.72225 3.00156 6.82208 3.0751C5.94524 3.14674 5.49684 3.27659 5.18404 3.43597C4.43139 3.81947 3.81947 4.43139 3.43597 5.18404C3.27659 5.49684 3.14674 5.94524 3.0751 6.82208C3.00156 7.72225 3 8.88684 3 10.6V13.4C3 15.1132 3.00156 16.2777 3.0751 17.1779C3.14674 18.0548 3.27659 18.5032 3.43597 18.816C3.81947 19.5686 4.43139 20.1805 5.18404 20.564C5.49684 20.7234 5.94524 20.8533 6.82208 20.9249C7.72225 20.9984 8.88684 21 10.6 21H13.4C15.1132 21 16.2777 20.9984 17.1779 20.9249C18.0548 20.8533 18.5032 20.7234 18.816 20.564C19.5686 20.1805 20.1805 19.5686 20.564 18.816C20.7234 18.5032 20.8533 18.0548 20.9249 17.1779C20.9984 16.2777 21 15.1132 21 13.4V10.6C21 8.88684 20.9984 7.72225 20.9249 6.82208C20.8533 5.94524 20.7234 5.49684 20.564 5.18404C20.1805 4.43139 19.5686 3.81947 18.816 3.43597C18.5032 3.27659 18.0548 3.14674 17.1779 3.0751C16.2777 3.00156 15.1132 3 13.4 3Z\"/>\n                </svg>\n              </a>\n            </div>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":9124},"client/src/components/layout/header.tsx":{"content":"import { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Sheet, SheetContent, SheetTrigger } from \"@/components/ui/sheet\";\nimport { Martini, Menu, WandSparkles, LogOut, User } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { handleLogout } from \"@/lib/authUtils\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { useCallback, useMemo } from \"react\";\n\nexport default function Header() {\n  const { user, isAuthenticated, isLoading } = useAuth();\n  const { toast } = useToast();\n\n  const userDisplayData = useMemo(() => {\n    if (!user) return null;\n    return {\n      nickname: (user as any)?.nickname || 'Пользователь',\n      email: (user as any)?.email || '',\n      profileImageUrl: (user as any)?.profileImageUrl,\n      avatar: (user as any)?.nickname?.charAt(0) || (user as any)?.email?.charAt(0) || 'U'\n    };\n  }, [user]);\n\n  const logoutMutation = useMutation({\n    mutationFn: handleLogout,\n    onSuccess: () => {\n      toast({\n        title: \"До свидания!\",\n        description: \"Вы успешно вышли из системы.\",\n      });\n      window.location.href = '/';\n    },\n    onError: () => {\n      toast({\n        title: \"Ошибка\",\n        description: \"Не удалось выйти из системы.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleLogoutClick = useCallback(() => {\n    logoutMutation.mutate();\n  }, [logoutMutation]);\n\n  const NavItems = () => (\n    <>\n      <Link href=\"/constructor\">\n        <Button variant=\"ghost\" className=\"text-white/70 hover:text-white hover:bg-white/5 transition-all duration-200 rounded-lg\">\n          Конструктор\n        </Button>\n      </Link>\n      <Link href=\"/generator\">\n        <Button variant=\"ghost\" className=\"text-white/70 hover:text-white hover:bg-white/5 transition-all duration-200 rounded-lg\">\n          Генератор\n        </Button>\n      </Link>\n      <Link href=\"/catalog\">\n        <Button variant=\"ghost\" className=\"text-white/70 hover:text-white hover:bg-white/5 transition-all duration-200 rounded-lg\">\n          Каталог\n        </Button>\n      </Link>\n\n    </>\n  );\n\n  return (\n    <header className=\"fixed top-0 left-0 right-0 z-50 bg-graphite border-b border-border\">\n      <nav className=\"container mx-auto px-4 py-4\">\n        <div className=\"flex items-center justify-between\">\n          <Link href=\"/\">\n            <div className=\"flex items-center space-x-3 cursor-pointer\">\n              <Martini className=\"text-electric text-2xl\" />\n              <h1 className=\"text-xl font-bold text-platinum\">Cocktailo Maker</h1>\n            </div>\n          </Link>\n          \n          <div className=\"hidden md:flex items-center space-x-6\">\n            <NavItems />\n          </div>\n          \n          <div className=\"flex items-center space-x-4\">\n            {/* Desktop Auth Buttons */}\n            <div className=\"hidden md:flex items-center space-x-3\">\n              {!isLoading && !isAuthenticated ? (\n                <>\n                  <Link href=\"/constructor\">\n                    <Button \n                      className=\"bg-gradient-to-r from-neon-turquoise to-electric text-black font-semibold hover:scale-105 transition-all duration-300 shadow-lg shadow-neon-turquoise/30\"\n                    >\n                      <WandSparkles className=\"mr-2 h-4 w-4\" />\n                      Начать\n                    </Button>\n                  </Link>\n                  <Link href=\"/auth\">\n                    <Button \n                      variant=\"outline\"\n                      className=\"border-neon-purple text-neon-purple hover:bg-neon-purple/10 hover:text-white transition-all duration-300 hover:scale-105\"\n                    >\n                      Вход\n                    </Button>\n                  </Link>\n                </>\n              ) : isAuthenticated && user ? (\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button variant=\"ghost\" className=\"flex items-center space-x-2 hover:bg-white/10 md:justify-start justify-end\">\n                      <Avatar className=\"h-8 w-8 shadow-sm shadow-black/30 ring-1 ring-white/10\">\n                        <AvatarImage src={userDisplayData?.profileImageUrl || undefined} alt={userDisplayData?.nickname || \"User\"} />\n                        <AvatarFallback className=\"bg-gradient-to-r from-neon-turquoise to-neon-purple text-black font-semibold\">\n                          {userDisplayData?.avatar}\n                        </AvatarFallback>\n                      </Avatar>\n                      <span className=\"text-white font-medium hidden md:inline\">\n                        {userDisplayData?.nickname}\n                      </span>\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\" className=\"bg-black/90 backdrop-blur-lg border-white/20\">\n                    <DropdownMenuItem asChild>\n                      <Link href=\"/profile\" className=\"flex items-center cursor-pointer\">\n                        <User className=\"mr-2 h-4 w-4\" />\n                        Профиль\n                      </Link>\n                    </DropdownMenuItem>\n                    <DropdownMenuItem \n                      onClick={handleLogoutClick}\n                      disabled={logoutMutation.isPending}\n                      className=\"flex items-center cursor-pointer\"\n                    >\n                      <LogOut className=\"mr-2 h-4 w-4\" />\n                      Выйти\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              ) : null}\n            </div>\n\n            {/* Mobile Menu */}\n            <Sheet>\n              <SheetTrigger asChild>\n                <Button variant=\"ghost\" size=\"icon\" className=\"md:hidden text-electric\">\n                  <Menu className=\"h-5 w-5\" />\n                </Button>\n              </SheetTrigger>\n              <SheetContent side=\"right\" className=\"glass-effect border-none\">\n                <div className=\"flex flex-col space-y-4 mt-8\">\n                  <NavItems />\n                  {/* Mobile Auth Buttons */}\n                  <div className=\"pt-4 border-t border-white/20\">\n                    {!isLoading && !isAuthenticated ? (\n                      <>\n                        <Link href=\"/constructor\">\n                          <Button className=\"w-full mb-2 bg-gradient-to-r from-neon-turquoise to-electric text-black font-semibold\">\n                            <WandSparkles className=\"mr-2 h-4 w-4\" />\n                            Начать\n                          </Button>\n                        </Link>\n                        <Link href=\"/auth\">\n                          <Button variant=\"outline\" className=\"w-full border-neon-purple text-neon-purple\">\n                            Вход\n                          </Button>\n                        </Link>\n                      </>\n                    ) : isAuthenticated && user ? (\n                      <>\n                        <div className=\"flex items-center space-x-3 p-3 bg-white/5 rounded-lg mb-3\">\n                          <Avatar className=\"h-10 w-10 shadow-sm shadow-black/30 ring-1 ring-white/10\">\n                            <AvatarImage src={(user as any)?.profileImageUrl || undefined} alt={(user as any)?.nickname || \"User\"} />\n                            <AvatarFallback className=\"bg-gradient-to-r from-neon-turquoise to-neon-purple text-black font-semibold\">\n                              {(user as any)?.nickname?.charAt(0) || (user as any)?.email?.charAt(0) || 'U'}\n                            </AvatarFallback>\n                          </Avatar>\n                          <div>\n                            <p className=\"text-white font-medium\">\n                              {(user as any)?.nickname || (user as any)?.email?.split('@')[0] || 'Пользователь'}\n                            </p>\n                            <p className=\"text-white/70 text-sm\">{(user as any)?.email}</p>\n                          </div>\n                        </div>\n                        <Button \n                          onClick={handleLogoutClick}\n                          disabled={logoutMutation.isPending}\n                          variant=\"outline\" \n                          className=\"w-full border-red-500/50 text-red-400 hover:bg-red-500/10\"\n                        >\n                          <LogOut className=\"mr-2 h-4 w-4\" />\n                          Выйти\n                        </Button>\n                      </>\n                    ) : null}\n                  </div>\n                </div>\n              </SheetContent>\n            </Sheet>\n          </div>\n        </div>\n      </nav>\n    </header>\n  );\n}\n","size_bytes":9131},"client/src/components/recipe/recipe-card.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Star, Heart, Clock, DollarSign } from \"lucide-react\";\nimport { useState } from \"react\";\nimport type { Recipe } from \"@shared/schema\";\n\ninterface RecipeCardProps {\n  recipe: Recipe;\n  onFavorite?: (recipeId: string) => void;\n  onView?: (recipeId: string) => void;\n  isFavorite?: boolean;\n}\n\nexport default function RecipeCard({ recipe, onFavorite, onView, isFavorite = false }: RecipeCardProps) {\n  const [isHovered, setIsHovered] = useState(false);\n\n  const handleFavoriteClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    onFavorite?.(recipe.id);\n  };\n\n  const handleViewClick = () => {\n    onView?.(recipe.id);\n  };\n\n  const getDifficultyColor = (difficulty: string) => {\n    switch (difficulty) {\n      case 'easy': return 'bg-green-500';\n      case 'medium': return 'bg-yellow-500';\n      case 'hard': return 'bg-red-500';\n      default: return 'bg-gray-500';\n    }\n  };\n\n  const getCategoryColor = (category: string) => {\n    switch (category) {\n      case 'classic': return 'bg-neon-amber';\n      case 'summer': return 'bg-neon-turquoise';\n      case 'shot': return 'bg-neon-pink';\n      case 'nonalcoholic': return 'bg-green-500';\n      default: return 'bg-neon-purple';\n    }\n  };\n\n  return (\n    <Card \n      className=\"glass-effect border-none hover:scale-105 transition-transform cursor-pointer overflow-hidden\"\n      onMouseEnter={() => setIsHovered(true)}\n      onMouseLeave={() => setIsHovered(false)}\n      onClick={handleViewClick}\n    >\n      {/* Recipe Image Placeholder */}\n      <div className=\"w-full h-48 bg-gradient-to-br from-neon-purple/20 to-neon-turquoise/20 relative overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-transparent via-white/5 to-transparent\"></div>\n        <div className=\"absolute bottom-4 left-4 right-4\">\n          <div className=\"flex items-center justify-between\">\n            <Badge className={`${getCategoryColor(recipe.category)} text-night-blue`}>\n              {recipe.category}\n            </Badge>\n            <Badge className={`${getDifficultyColor(recipe.difficulty)} text-white`}>\n              {recipe.difficulty}\n            </Badge>\n          </div>\n        </div>\n      </div>\n      \n      <CardContent className=\"p-4\">\n        <div className=\"mb-3\">\n          <h3 className=\"text-xl font-bold text-neon-turquoise mb-2 line-clamp-1\">\n            {recipe.name}\n          </h3>\n          <p className=\"text-cream text-sm mb-3 line-clamp-2\">\n            {recipe.description || 'Описание не указано'}\n          </p>\n        </div>\n        \n        {/* Stats */}\n        <div className=\"flex justify-between items-center mb-3\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"flex items-center space-x-1\">\n              <Clock className=\"h-4 w-4 text-neon-amber\" />\n              <span className=\"text-neon-amber font-semibold text-sm\">\n                {recipe.totalAbv}%\n              </span>\n            </div>\n            <div className=\"flex items-center space-x-1\">\n              <DollarSign className=\"h-4 w-4 text-neon-pink\" />\n              <span className=\"text-neon-pink font-semibold text-sm\">\n                ₽{recipe.totalCost}\n              </span>\n            </div>\n          </div>\n          <div className=\"text-right\">\n            <div className=\"text-sm text-cream\">\n              {recipe.totalVolume}ml\n            </div>\n          </div>\n        </div>\n        \n        {/* Rating and Favorite */}\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-1\">\n            <div className=\"flex items-center text-yellow-400\">\n              {[...Array(5)].map((_, i) => (\n                <Star \n                  key={i}\n                  className={`h-4 w-4 ${\n                    i < Math.floor(parseFloat(recipe.rating?.toString() || '0')) \n                      ? 'fill-current' \n                      : 'stroke-current'\n                  }`}\n                />\n              ))}\n            </div>\n            <span className=\"ml-2 text-cream text-sm\">\n              {recipe.rating || '0'} ({recipe.ratingCount || 0})\n            </span>\n          </div>\n          \n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={handleFavoriteClick}\n            className={`${\n              isFavorite \n                ? 'text-neon-pink' \n                : 'text-neon-turquoise hover:text-neon-pink'\n            } transition-colors`}\n          >\n            <Heart className={`h-5 w-5 ${isFavorite ? 'fill-current' : ''}`} />\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4825},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"cocktail-management.md":{"content":"# Управление коктейлями - Инструкция по добавлению контента\n\n## Обзор системы\n\nСистема хранения коктейлей построена на PostgreSQL базе данных с использованием Drizzle ORM. Все коктейли хранятся в таблице `recipes` со следующими основными полями:\n\n- **name** - название коктейля\n- **description** - описание\n- **category** - категория (classic, summer, shot, nonalcoholic)\n- **difficulty** - сложность (easy, medium, hard)\n- **image** - URL изображения\n- **ingredients** - массив ингредиентов\n- **instructions** - инструкция по приготовлению\n- **tags** - теги для фильтрации\n- **abv** - крепость алкоголя\n- **volume** - объем\n- **rating** - рейтинг\n- **cost** - стоимость\n\n## Категории коктейлей\n\n### Доступные категории:\n- `classic` - Классические коктейли\n- `summer` - Летние коктейли  \n- `shot` - Шоты\n- `nonalcoholic` - Безалкогольные\n\n### Уровни сложности:\n- `easy` - Легкая\n- `medium` - Средняя\n- `hard` - Сложная\n\n## Способы добавления коктейлей\n\n### 1. Через SQL (рекомендуется для массового добавления)\n\n```sql\nINSERT INTO recipes (\n  name, description, category, difficulty, image, \n  ingredients, instructions, tags, abv, volume, rating, cost\n) VALUES (\n  'Мохито',\n  'Освежающий кубинский коктейль с мятой и лаймом',\n  'summer',\n  'easy',\n  '/attached_assets/Flux_Dev_a_lush_3d_render_of_A_refreshing_Mojito_in_a_tall_hig_0_1753377591761.jpg',\n  ARRAY['белый ром - 60мл', 'лайм - 1/2 шт', 'мята - 10 листьев', 'сахар - 2 ч.л.', 'содовая - 100мл', 'лед'],\n  'Разомните мяту с сахаром в стакане. Добавьте сок лайма и ром. Заполните льдом и долейте содовой.',\n  ARRAY['освежающий', 'мята', 'лайм', 'ром'],\n  12.5,\n  200,\n  4.5,\n  350\n);\n```\n\n### 2. Через веб-интерфейс (планируется)\nВ будущем будет добавлена админ-панель для удобного добавления коктейлей через браузер.\n\n## Структура файлов изображений\n\nИзображения коктейлей должны храниться в папке `attached_assets/` и следовать соглашению об именовании:\n- Используйте описательные имена\n- Предпочтительный формат: JPG или PNG\n- Размер: рекомендуется 800x800px или больше\n- Пример: `mojito_cocktail_summer.jpg`\n\n## Добавление изображений коктейлей\n\n1. Разместите изображение в папке `attached_assets/`\n2. Используйте относительный путь в поле `image`: `/attached_assets/имя_файла.jpg`\n3. Убедитесь что изображение соответствует стилю приложения (желательно 3D рендеры)\n\n## Пример полного коктейля\n\n```sql\nINSERT INTO recipes (\n  name, description, category, difficulty, image,\n  ingredients, instructions, tags, abv, volume, rating, cost\n) VALUES (\n  'Негрони',\n  'Классический итальянский коктейль с горьким вкусом',\n  'classic',\n  'medium',\n  '/attached_assets/negroni_classic.jpg',\n  ARRAY[\n    'джин - 30мл',\n    'кампари - 30мл', \n    'сладкий вермут - 30мл',\n    'апельсиновая цедра - для украшения',\n    'лед'\n  ],\n  'Смешайте джин, кампари и вермут в стакане со льдом. Украсьте апельсиновой цедрой.',\n  ARRAY['горький', 'классика', 'джин', 'кампари'],\n  25.0,\n  90,\n  4.2,\n  450\n);\n```\n\n## Фильтрация и отображение\n\nСистема автоматически фильтрует коктейли по следующим параметрам:\n- **Поиск по названию** - поиск в поле `name`\n- **Категория** - фильтр по полю `category`\n- **Сложность** - фильтр по полю `difficulty`\n\nКогда выбраны \"Все категории\" и \"Любая сложность\", отображаются все коктейли из базы данных.\n\n## Адаптивная сетка\n\nСистема автоматически адаптирует количество карточек в зависимости от ширины экрана:\n- **Мобильные устройства** (до 768px): 1 карточка в ряду\n- **Планшеты** (768px - 1024px): 2 карточки в ряду  \n- **Десктоп** (1024px+): 3 карточки в ряду\n\n## Рекомендации по контенту\n\n1. **Качество изображений**: Используйте высококачественные 3D рендеры коктейлей\n2. **Описания**: Пишите краткие, но информативные описания (1-2 предложения)\n3. **Ингредиенты**: Указывайте точные пропорции в формате \"ингредиент - количество\"\n4. **Инструкции**: Пишите пошаговые инструкции простым языком\n5. **Теги**: Добавляйте релевантные теги для улучшения поиска\n\n## Обновление существующих коктейлей\n\n```sql\nUPDATE recipes \nSET \n  description = 'Новое описание',\n  rating = 4.8,\n  cost = 400\nWHERE name = 'Название коктейля';\n```\n\n## Удаление коктейлей\n\n```sql\nDELETE FROM recipes WHERE name = 'Название коктейля';\n```\n\n## Поддержка\n\nПри возникновении проблем с добавлением коктейлей:\n1. Проверьте соответствие структуры данных схеме\n2. Убедитесь что изображения доступны по указанному пути\n3. Проверьте валидность значений category и difficulty\n4. Обратитесь к разработчику для технической поддержки","size_bytes":6858},"client/src/data/cocktails.ts":{"content":"// Статическая база данных коктейлей\nexport interface CocktailData {\n  id: string;\n  name: string;\n  description: string;\n  category: 'classic' | 'summer' | 'shot' | 'nonalcoholic';\n  difficulty: 'easy' | 'medium' | 'hard';\n  image: string;\n  ingredients: string[];\n  instructions: string;\n  tags: string[];\n  abv: number;\n  volume: number;\n  rating: number;\n  reviewCount: number;\n  cost: number;\n}\n\nexport const cocktailsDatabase: CocktailData[] = [\n  {\n    id: '1',\n    name: 'Мохито',\n    description: 'Освежающий кубинский коктейль с мятой и лаймом',\n    category: 'summer',\n    difficulty: 'easy',\n    image: '/attached_assets/Flux_Dev_a_lush_3d_render_of_A_refreshing_Mojito_in_a_tall_hig_0_1753377591761.jpg',\n    ingredients: [\n      'Белый ром - 60мл',\n      'Лайм - 1/2 шт',\n      'Свежая мята - 10 листьев',\n      'Сахар - 2 ч.л.',\n      'Содовая вода - 100мл',\n      'Лед'\n    ],\n    instructions: 'Разомните мяту с сахаром в стакане. Добавьте сок лайма и ром. Заполните льдом и долейте содовой.',\n    tags: ['освежающий', 'мята', 'лайм', 'ром'],\n    abv: 12.5,\n    volume: 200,\n    rating: 4.5,\n    reviewCount: 1247,\n    cost: 350\n  },\n  {\n    id: '2',\n    name: 'Негрони',\n    description: 'Классический итальянский коктейль с горьким вкусом',\n    category: 'classic',\n    difficulty: 'medium',\n    image: '/attached_assets/Flux_Dev_A_classic_Negroni_in_a_short_glass_with_a_large_ice_c_3_1753377591753.jpg',\n    ingredients: [\n      'Джин - 30мл',\n      'Кампари - 30мл',\n      'Сладкий вермут - 30мл',\n      'Апельсиновая цедра',\n      'Лед'\n    ],\n    instructions: 'Смешайте джин, кампари и вермут в стакане со льдом. Украсьте апельсиновой цедрой.',\n    tags: ['горький', 'классика', 'джин', 'кампари'],\n    abv: 25.0,\n    volume: 90,\n    rating: 4.2,\n    reviewCount: 832,\n    cost: 450\n  },\n  {\n    id: '3',\n    name: 'Маргарита',\n    description: 'Классический мексиканский коктейль с текилой и лаймом',\n    category: 'classic',\n    difficulty: 'easy',\n    image: '/attached_assets/Flux_Dev_a_lush_3d_render_of_A_classic_Margarita_cocktail_in_a_0_1753377591761.jpg',\n    ingredients: [\n      'Текила - 50мл',\n      'Апельсиновый ликер - 25мл',\n      'Лайм - 1/2 шт',\n      'Соль для ободка',\n      'Лед'\n    ],\n    instructions: 'Обмакните край бокала в соль. Смешайте все ингредиенты с льдом в шейкере. Процедите в бокал.',\n    tags: ['кислый', 'текила', 'лайм', 'соль'],\n    abv: 22.0,\n    volume: 120,\n    rating: 4.6,\n    reviewCount: 1589,\n    cost: 380\n  },\n  {\n    id: '4',\n    name: 'Космополитен',\n    description: 'Элегантный розовый коктейль с водкой и клюквой',\n    category: 'classic',\n    difficulty: 'medium',\n    image: '/attached_assets/Flux_Dev_a_lush_3d_render_of_A_bright_pink_Cosmopolitan_in_a_m_0_1753377591757.jpg',\n    ingredients: [\n      'Водка - 45мл',\n      'Апельсиновый ликер - 15мл',\n      'Клюквенный сок - 30мл',\n      'Лайм - 1/4 шт',\n      'Лед'\n    ],\n    instructions: 'Смешайте все ингредиенты в шейкере со льдом. Процедите в охлажденный бокал мартини.',\n    tags: ['розовый', 'водка', 'клюква', 'элегантный'],\n    abv: 18.5,\n    volume: 110,\n    rating: 4.3,\n    reviewCount: 967,\n    cost: 420\n  },\n  {\n    id: '5',\n    name: 'Дайкири',\n    description: 'Простой и элегантный коктейль с ромом и лаймом',\n    category: 'summer',\n    difficulty: 'easy',\n    image: '/attached_assets/Flux_Dev_a_lush_3d_render_of_A_Daiquiri_in_a_sleek_cocktail_gl_0_1753377591759.jpg',\n    ingredients: [\n      'Белый ром - 60мл',\n      'Лайм - 1/2 шт',\n      'Сахарный сироп - 15мл',\n      'Лед'\n    ],\n    instructions: 'Смешайте все ингредиенты в шейкере со льдом. Процедите в охлажденный бокал.',\n    tags: ['простой', 'ром', 'лайм', 'освежающий'],\n    abv: 28.0,\n    volume: 80,\n    rating: 4.4,\n    reviewCount: 756,\n    cost: 320\n  },\n  {\n    id: '6',\n    name: 'Пина Колада',\n    description: 'Тропический кремовый коктейль с ромом и кокосом',\n    category: 'summer',\n    difficulty: 'medium',\n    image: '/attached_assets/Flux_Dev_a_lush_3d_render_of_A_Pia_Colada_in_a_tall_hurricane__0_1753377591760.jpg',\n    ingredients: [\n      'Белый ром - 50мл',\n      'Кокосовый крем - 30мл',\n      'Ананасовый сок - 90мл',\n      'Лед',\n      'Ананас для украшения'\n    ],\n    instructions: 'Смешайте все ингредиенты в блендере с льдом. Подавайте в высоком бокале, украсьте ананасом.',\n    tags: ['тропический', 'кремовый', 'ананас', 'кокос'],\n    abv: 12.0,\n    volume: 250,\n    rating: 4.7,\n    reviewCount: 1432,\n    cost: 390\n  },\n  {\n    id: '7',\n    name: 'Манхэттен',\n    description: 'Классический американский коктейль с виски',\n    category: 'classic',\n    difficulty: 'medium',\n    image: '/attached_assets/Flux_Dev_a_lush_3d_render_of_A_deep_amber_Manhattan_in_a_short_0_1753377591759.jpg',\n    ingredients: [\n      'Ржаной виски - 60мл',\n      'Сладкий вермут - 30мл',\n      'Ангостура - 2 капли',\n      'Вишня мараскино',\n      'Лед'\n    ],\n    instructions: 'Перемешайте виски, вермут и биттер со льдом. Процедите в бокал, украсьте вишней.',\n    tags: ['крепкий', 'виски', 'классика', 'горький'],\n    abv: 30.0,\n    volume: 95,\n    rating: 4.1,\n    reviewCount: 689,\n    cost: 480\n  },\n  {\n    id: '8',\n    name: 'Лонг Айленд',\n    description: 'Крепкий коктейль с пятью видами алкоголя',\n    category: 'classic',\n    difficulty: 'hard',\n    image: '/attached_assets/Flux_Dev_a_lush_3d_render_of_A_Long_Island_Iced_Tea_in_a_tall__1_1753377591756.jpg',\n    ingredients: [\n      'Водка - 15мл',\n      'Ром - 15мл',\n      'Джин - 15мл',\n      'Текила - 15мл',\n      'Апельсиновый ликер - 15мл',\n      'Лимонный сок - 30мл',\n      'Кола - 30мл'\n    ],\n    instructions: 'Смешайте все алкогольные ингредиенты с лимонным соком. Добавьте лед и долейте колу.',\n    tags: ['крепкий', 'сложный', 'микс', 'кола'],\n    abv: 35.0,\n    volume: 300,\n    rating: 4.0,\n    reviewCount: 1105,\n    cost: 550\n  },\n  {\n    id: '9',\n    name: 'Белый Русский',\n    description: 'Кремовый коктейль с водкой и кофейным ликером',\n    category: 'classic',\n    difficulty: 'easy',\n    image: '/attached_assets/Flux_Dev_a_lush_3d_render_of_A_White_Russian_in_a_short_glass__2_1753377591757.jpg',\n    ingredients: [\n      'Водка - 50мл',\n      'Кофейный ликер - 20мл',\n      'Сливки - 30мл',\n      'Лед'\n    ],\n    instructions: 'Налейте водку и ликер в стакан со льдом. Аккуратно добавьте сливки.',\n    tags: ['кремовый', 'кофе', 'водка', 'десертный'],\n    abv: 20.0,\n    volume: 100,\n    rating: 4.3,\n    reviewCount: 543,\n    cost: 370\n  },\n  {\n    id: '10',\n    name: 'B52',\n    description: 'Слоистый шот с кофейным ликером и сливками',\n    category: 'shot',\n    difficulty: 'hard',\n    image: '/attached_assets/Flux_Dev_a_lush_3d_render_of_A_layered_B52_shot_in_a_small_sho_3_1753377591758.jpg',\n    ingredients: [\n      'Кофейный ликер - 20мл',\n      'Ирландский крем - 20мл',\n      'Апельсиновый ликер - 20мл'\n    ],\n    instructions: 'Аккуратно налейте слоями: сначала кофейный ликер, затем ирландский крем, сверху апельсиновый ликер.',\n    tags: ['слоистый', 'шот', 'кофе', 'сливки'],\n    abv: 25.0,\n    volume: 60,\n    rating: 4.2,\n    reviewCount: 324,\n    cost: 280\n  },\n  {\n    id: '11',\n    name: 'Сангрия',\n    description: 'Испанский фруктовый коктейль с вином',\n    category: 'summer',\n    difficulty: 'easy',\n    image: '/attached_assets/Flux_Dev_a_lush_3d_render_of_A_vibrant_red_Sangria_in_a_large__1_1753377591760.jpg',\n    ingredients: [\n      'Красное вино - 200мл',\n      'Апельсин - 1/2 шт',\n      'Яблоко - 1/2 шт',\n      'Бренди - 30мл',\n      'Сахар - 1 ст.л.',\n      'Газировка - 50мл'\n    ],\n    instructions: 'Нарежьте фрукты. Смешайте вино, бренди и сахар. Добавьте фрукты, настаивайте час. Подавайте с газировкой.',\n    tags: ['фруктовый', 'вино', 'освежающий', 'испанский'],\n    abv: 8.5,\n    volume: 300,\n    rating: 4.4,\n    reviewCount: 892,\n    cost: 310\n  },\n  {\n    id: '12',\n    name: 'Апероль Шприц',\n    description: 'Итальянский аперитив с просекко и аперолем',\n    category: 'summer',\n    difficulty: 'easy',\n    image: '/attached_assets/Flux_Dev_a_lush_3d_render_of_An_Aperol_Spritz_in_a_large_ballo_0_1753377591760.jpg',\n    ingredients: [\n      'Апероль - 60мл',\n      'Просекко - 90мл',\n      'Содовая - 30мл',\n      'Апельсин - 2 дольки',\n      'Лед'\n    ],\n    instructions: 'В бокал со льдом налейте апероль, затем просекко и содовую. Украсьте долькой апельсина.',\n    tags: ['игристое', 'апероль', 'апельсин', 'аперитив'],\n    abv: 8.0,\n    volume: 180,\n    rating: 4.5,\n    reviewCount: 1267,\n    cost: 340\n  }\n];\n\n// Функции для работы с базой данных коктейлей\nexport const getCocktails = (filters?: {\n  search?: string;\n  category?: string;\n  difficulty?: string;\n}) => {\n  let filtered = [...cocktailsDatabase];\n\n  if (filters?.search) {\n    const searchTerm = filters.search.toLowerCase();\n    filtered = filtered.filter(cocktail => \n      cocktail.name.toLowerCase().includes(searchTerm) ||\n      cocktail.description.toLowerCase().includes(searchTerm) ||\n      cocktail.tags.some(tag => tag.toLowerCase().includes(searchTerm))\n    );\n  }\n\n  if (filters?.category && filters.category !== 'all') {\n    filtered = filtered.filter(cocktail => cocktail.category === filters.category);\n  }\n\n  if (filters?.difficulty && filters.difficulty !== 'all') {\n    filtered = filtered.filter(cocktail => cocktail.difficulty === filters.difficulty);\n  }\n\n  return filtered;\n};\n\nexport const getCocktailById = (id: string) => {\n  return cocktailsDatabase.find(cocktail => cocktail.id === id);\n};\n\nexport const getCategoryCounts = () => {\n  return {\n    all: cocktailsDatabase.length,\n    classic: cocktailsDatabase.filter(c => c.category === 'classic').length,\n    summer: cocktailsDatabase.filter(c => c.category === 'summer').length,\n    shot: cocktailsDatabase.filter(c => c.category === 'shot').length,\n    nonalcoholic: cocktailsDatabase.filter(c => c.category === 'nonalcoholic').length,\n  };\n};\n\nexport const getDifficultyCounts = () => {\n  return {\n    all: cocktailsDatabase.length,\n    easy: cocktailsDatabase.filter(c => c.difficulty === 'easy').length,\n    medium: cocktailsDatabase.filter(c => c.difficulty === 'medium').length,\n    hard: cocktailsDatabase.filter(c => c.difficulty === 'hard').length,\n  };\n};","size_bytes":12608}}}